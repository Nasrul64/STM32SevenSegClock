
SevenSegClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030bc  080030bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080030bc  080030bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030bc  080030bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030c0  080030c0  000130c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080030d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080030d0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf3  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000247d  00000000  00000000  0002fe27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000910d  00000000  00000000  000322a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  0003b3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d30  00000000  00000000  0003bc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001023b  00000000  00000000  0003c9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001237a  00000000  00000000  0004cbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005ccad  00000000  00000000  0005ef65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000bbc12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001aa8  00000000  00000000  000bbc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003014 	.word	0x08003014

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003014 	.word	0x08003014

08000108 <__gnu_thumb1_case_sqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5609      	ldrsb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__gnu_thumb1_case_uqi>:
 800011c:	b402      	push	{r1}
 800011e:	4671      	mov	r1, lr
 8000120:	0849      	lsrs	r1, r1, #1
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	5c09      	ldrb	r1, [r1, r0]
 8000126:	0049      	lsls	r1, r1, #1
 8000128:	448e      	add	lr, r1
 800012a:	bc02      	pop	{r1}
 800012c:	4770      	bx	lr
 800012e:	46c0      	nop			; (mov r8, r8)

08000130 <__gnu_thumb1_case_shi>:
 8000130:	b403      	push	{r0, r1}
 8000132:	4671      	mov	r1, lr
 8000134:	0849      	lsrs	r1, r1, #1
 8000136:	0040      	lsls	r0, r0, #1
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	5e09      	ldrsh	r1, [r1, r0]
 800013c:	0049      	lsls	r1, r1, #1
 800013e:	448e      	add	lr, r1
 8000140:	bc03      	pop	{r0, r1}
 8000142:	4770      	bx	lr

08000144 <__udivsi3>:
 8000144:	2200      	movs	r2, #0
 8000146:	0843      	lsrs	r3, r0, #1
 8000148:	428b      	cmp	r3, r1
 800014a:	d374      	bcc.n	8000236 <__udivsi3+0xf2>
 800014c:	0903      	lsrs	r3, r0, #4
 800014e:	428b      	cmp	r3, r1
 8000150:	d35f      	bcc.n	8000212 <__udivsi3+0xce>
 8000152:	0a03      	lsrs	r3, r0, #8
 8000154:	428b      	cmp	r3, r1
 8000156:	d344      	bcc.n	80001e2 <__udivsi3+0x9e>
 8000158:	0b03      	lsrs	r3, r0, #12
 800015a:	428b      	cmp	r3, r1
 800015c:	d328      	bcc.n	80001b0 <__udivsi3+0x6c>
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d30d      	bcc.n	8000180 <__udivsi3+0x3c>
 8000164:	22ff      	movs	r2, #255	; 0xff
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	ba12      	rev	r2, r2
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d302      	bcc.n	8000176 <__udivsi3+0x32>
 8000170:	1212      	asrs	r2, r2, #8
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	d065      	beq.n	8000242 <__udivsi3+0xfe>
 8000176:	0b03      	lsrs	r3, r0, #12
 8000178:	428b      	cmp	r3, r1
 800017a:	d319      	bcc.n	80001b0 <__udivsi3+0x6c>
 800017c:	e000      	b.n	8000180 <__udivsi3+0x3c>
 800017e:	0a09      	lsrs	r1, r1, #8
 8000180:	0bc3      	lsrs	r3, r0, #15
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x46>
 8000186:	03cb      	lsls	r3, r1, #15
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b83      	lsrs	r3, r0, #14
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x52>
 8000192:	038b      	lsls	r3, r1, #14
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b43      	lsrs	r3, r0, #13
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x5e>
 800019e:	034b      	lsls	r3, r1, #13
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x6a>
 80001aa:	030b      	lsls	r3, r1, #12
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0ac3      	lsrs	r3, r0, #11
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x76>
 80001b6:	02cb      	lsls	r3, r1, #11
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a83      	lsrs	r3, r0, #10
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x82>
 80001c2:	028b      	lsls	r3, r1, #10
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a43      	lsrs	r3, r0, #9
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x8e>
 80001ce:	024b      	lsls	r3, r1, #9
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a03      	lsrs	r3, r0, #8
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x9a>
 80001da:	020b      	lsls	r3, r1, #8
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	d2cd      	bcs.n	800017e <__udivsi3+0x3a>
 80001e2:	09c3      	lsrs	r3, r0, #7
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xa8>
 80001e8:	01cb      	lsls	r3, r1, #7
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0983      	lsrs	r3, r0, #6
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xb4>
 80001f4:	018b      	lsls	r3, r1, #6
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0943      	lsrs	r3, r0, #5
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xc0>
 8000200:	014b      	lsls	r3, r1, #5
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0903      	lsrs	r3, r0, #4
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xcc>
 800020c:	010b      	lsls	r3, r1, #4
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	08c3      	lsrs	r3, r0, #3
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xd8>
 8000218:	00cb      	lsls	r3, r1, #3
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0883      	lsrs	r3, r0, #2
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xe4>
 8000224:	008b      	lsls	r3, r1, #2
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0843      	lsrs	r3, r0, #1
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xf0>
 8000230:	004b      	lsls	r3, r1, #1
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	1a41      	subs	r1, r0, r1
 8000238:	d200      	bcs.n	800023c <__udivsi3+0xf8>
 800023a:	4601      	mov	r1, r0
 800023c:	4152      	adcs	r2, r2
 800023e:	4610      	mov	r0, r2
 8000240:	4770      	bx	lr
 8000242:	e7ff      	b.n	8000244 <__udivsi3+0x100>
 8000244:	b501      	push	{r0, lr}
 8000246:	2000      	movs	r0, #0
 8000248:	f000 f8f0 	bl	800042c <__aeabi_idiv0>
 800024c:	bd02      	pop	{r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)

08000250 <__aeabi_uidivmod>:
 8000250:	2900      	cmp	r1, #0
 8000252:	d0f7      	beq.n	8000244 <__udivsi3+0x100>
 8000254:	e776      	b.n	8000144 <__udivsi3>
 8000256:	4770      	bx	lr

08000258 <__divsi3>:
 8000258:	4603      	mov	r3, r0
 800025a:	430b      	orrs	r3, r1
 800025c:	d47f      	bmi.n	800035e <__divsi3+0x106>
 800025e:	2200      	movs	r2, #0
 8000260:	0843      	lsrs	r3, r0, #1
 8000262:	428b      	cmp	r3, r1
 8000264:	d374      	bcc.n	8000350 <__divsi3+0xf8>
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d35f      	bcc.n	800032c <__divsi3+0xd4>
 800026c:	0a03      	lsrs	r3, r0, #8
 800026e:	428b      	cmp	r3, r1
 8000270:	d344      	bcc.n	80002fc <__divsi3+0xa4>
 8000272:	0b03      	lsrs	r3, r0, #12
 8000274:	428b      	cmp	r3, r1
 8000276:	d328      	bcc.n	80002ca <__divsi3+0x72>
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d30d      	bcc.n	800029a <__divsi3+0x42>
 800027e:	22ff      	movs	r2, #255	; 0xff
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	ba12      	rev	r2, r2
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d302      	bcc.n	8000290 <__divsi3+0x38>
 800028a:	1212      	asrs	r2, r2, #8
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	d065      	beq.n	800035c <__divsi3+0x104>
 8000290:	0b03      	lsrs	r3, r0, #12
 8000292:	428b      	cmp	r3, r1
 8000294:	d319      	bcc.n	80002ca <__divsi3+0x72>
 8000296:	e000      	b.n	800029a <__divsi3+0x42>
 8000298:	0a09      	lsrs	r1, r1, #8
 800029a:	0bc3      	lsrs	r3, r0, #15
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x4c>
 80002a0:	03cb      	lsls	r3, r1, #15
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b83      	lsrs	r3, r0, #14
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x58>
 80002ac:	038b      	lsls	r3, r1, #14
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b43      	lsrs	r3, r0, #13
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x64>
 80002b8:	034b      	lsls	r3, r1, #13
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x70>
 80002c4:	030b      	lsls	r3, r1, #12
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0ac3      	lsrs	r3, r0, #11
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x7c>
 80002d0:	02cb      	lsls	r3, r1, #11
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a83      	lsrs	r3, r0, #10
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x88>
 80002dc:	028b      	lsls	r3, r1, #10
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a43      	lsrs	r3, r0, #9
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x94>
 80002e8:	024b      	lsls	r3, r1, #9
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a03      	lsrs	r3, r0, #8
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0xa0>
 80002f4:	020b      	lsls	r3, r1, #8
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	d2cd      	bcs.n	8000298 <__divsi3+0x40>
 80002fc:	09c3      	lsrs	r3, r0, #7
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xae>
 8000302:	01cb      	lsls	r3, r1, #7
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0983      	lsrs	r3, r0, #6
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xba>
 800030e:	018b      	lsls	r3, r1, #6
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0943      	lsrs	r3, r0, #5
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xc6>
 800031a:	014b      	lsls	r3, r1, #5
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0903      	lsrs	r3, r0, #4
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xd2>
 8000326:	010b      	lsls	r3, r1, #4
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	08c3      	lsrs	r3, r0, #3
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xde>
 8000332:	00cb      	lsls	r3, r1, #3
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0883      	lsrs	r3, r0, #2
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xea>
 800033e:	008b      	lsls	r3, r1, #2
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0843      	lsrs	r3, r0, #1
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xf6>
 800034a:	004b      	lsls	r3, r1, #1
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	1a41      	subs	r1, r0, r1
 8000352:	d200      	bcs.n	8000356 <__divsi3+0xfe>
 8000354:	4601      	mov	r1, r0
 8000356:	4152      	adcs	r2, r2
 8000358:	4610      	mov	r0, r2
 800035a:	4770      	bx	lr
 800035c:	e05d      	b.n	800041a <__divsi3+0x1c2>
 800035e:	0fca      	lsrs	r2, r1, #31
 8000360:	d000      	beq.n	8000364 <__divsi3+0x10c>
 8000362:	4249      	negs	r1, r1
 8000364:	1003      	asrs	r3, r0, #32
 8000366:	d300      	bcc.n	800036a <__divsi3+0x112>
 8000368:	4240      	negs	r0, r0
 800036a:	4053      	eors	r3, r2
 800036c:	2200      	movs	r2, #0
 800036e:	469c      	mov	ip, r3
 8000370:	0903      	lsrs	r3, r0, #4
 8000372:	428b      	cmp	r3, r1
 8000374:	d32d      	bcc.n	80003d2 <__divsi3+0x17a>
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d312      	bcc.n	80003a2 <__divsi3+0x14a>
 800037c:	22fc      	movs	r2, #252	; 0xfc
 800037e:	0189      	lsls	r1, r1, #6
 8000380:	ba12      	rev	r2, r2
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d30c      	bcc.n	80003a2 <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d308      	bcc.n	80003a2 <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d304      	bcc.n	80003a2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	d03a      	beq.n	8000412 <__divsi3+0x1ba>
 800039c:	1192      	asrs	r2, r2, #6
 800039e:	e000      	b.n	80003a2 <__divsi3+0x14a>
 80003a0:	0989      	lsrs	r1, r1, #6
 80003a2:	09c3      	lsrs	r3, r0, #7
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x154>
 80003a8:	01cb      	lsls	r3, r1, #7
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0983      	lsrs	r3, r0, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x160>
 80003b4:	018b      	lsls	r3, r1, #6
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0943      	lsrs	r3, r0, #5
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x16c>
 80003c0:	014b      	lsls	r3, r1, #5
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0903      	lsrs	r3, r0, #4
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x178>
 80003cc:	010b      	lsls	r3, r1, #4
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	08c3      	lsrs	r3, r0, #3
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x184>
 80003d8:	00cb      	lsls	r3, r1, #3
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0883      	lsrs	r3, r0, #2
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x190>
 80003e4:	008b      	lsls	r3, r1, #2
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	d2d9      	bcs.n	80003a0 <__divsi3+0x148>
 80003ec:	0843      	lsrs	r3, r0, #1
 80003ee:	428b      	cmp	r3, r1
 80003f0:	d301      	bcc.n	80003f6 <__divsi3+0x19e>
 80003f2:	004b      	lsls	r3, r1, #1
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	4152      	adcs	r2, r2
 80003f8:	1a41      	subs	r1, r0, r1
 80003fa:	d200      	bcs.n	80003fe <__divsi3+0x1a6>
 80003fc:	4601      	mov	r1, r0
 80003fe:	4663      	mov	r3, ip
 8000400:	4152      	adcs	r2, r2
 8000402:	105b      	asrs	r3, r3, #1
 8000404:	4610      	mov	r0, r2
 8000406:	d301      	bcc.n	800040c <__divsi3+0x1b4>
 8000408:	4240      	negs	r0, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d500      	bpl.n	8000410 <__divsi3+0x1b8>
 800040e:	4249      	negs	r1, r1
 8000410:	4770      	bx	lr
 8000412:	4663      	mov	r3, ip
 8000414:	105b      	asrs	r3, r3, #1
 8000416:	d300      	bcc.n	800041a <__divsi3+0x1c2>
 8000418:	4240      	negs	r0, r0
 800041a:	b501      	push	{r0, lr}
 800041c:	2000      	movs	r0, #0
 800041e:	f000 f805 	bl	800042c <__aeabi_idiv0>
 8000422:	bd02      	pop	{r1, pc}

08000424 <__aeabi_idivmod>:
 8000424:	2900      	cmp	r1, #0
 8000426:	d0f8      	beq.n	800041a <__divsi3+0x1c2>
 8000428:	e716      	b.n	8000258 <__divsi3>
 800042a:	4770      	bx	lr

0800042c <__aeabi_idiv0>:
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__aeabi_dadd>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	464f      	mov	r7, r9
 8000434:	4646      	mov	r6, r8
 8000436:	46d6      	mov	lr, sl
 8000438:	000d      	movs	r5, r1
 800043a:	0004      	movs	r4, r0
 800043c:	b5c0      	push	{r6, r7, lr}
 800043e:	001f      	movs	r7, r3
 8000440:	0011      	movs	r1, r2
 8000442:	0328      	lsls	r0, r5, #12
 8000444:	0f62      	lsrs	r2, r4, #29
 8000446:	0a40      	lsrs	r0, r0, #9
 8000448:	4310      	orrs	r0, r2
 800044a:	007a      	lsls	r2, r7, #1
 800044c:	0d52      	lsrs	r2, r2, #21
 800044e:	00e3      	lsls	r3, r4, #3
 8000450:	033c      	lsls	r4, r7, #12
 8000452:	4691      	mov	r9, r2
 8000454:	0a64      	lsrs	r4, r4, #9
 8000456:	0ffa      	lsrs	r2, r7, #31
 8000458:	0f4f      	lsrs	r7, r1, #29
 800045a:	006e      	lsls	r6, r5, #1
 800045c:	4327      	orrs	r7, r4
 800045e:	4692      	mov	sl, r2
 8000460:	46b8      	mov	r8, r7
 8000462:	0d76      	lsrs	r6, r6, #21
 8000464:	0fed      	lsrs	r5, r5, #31
 8000466:	00c9      	lsls	r1, r1, #3
 8000468:	4295      	cmp	r5, r2
 800046a:	d100      	bne.n	800046e <__aeabi_dadd+0x3e>
 800046c:	e099      	b.n	80005a2 <__aeabi_dadd+0x172>
 800046e:	464c      	mov	r4, r9
 8000470:	1b34      	subs	r4, r6, r4
 8000472:	46a4      	mov	ip, r4
 8000474:	2c00      	cmp	r4, #0
 8000476:	dc00      	bgt.n	800047a <__aeabi_dadd+0x4a>
 8000478:	e07c      	b.n	8000574 <__aeabi_dadd+0x144>
 800047a:	464a      	mov	r2, r9
 800047c:	2a00      	cmp	r2, #0
 800047e:	d100      	bne.n	8000482 <__aeabi_dadd+0x52>
 8000480:	e0b8      	b.n	80005f4 <__aeabi_dadd+0x1c4>
 8000482:	4ac5      	ldr	r2, [pc, #788]	; (8000798 <__aeabi_dadd+0x368>)
 8000484:	4296      	cmp	r6, r2
 8000486:	d100      	bne.n	800048a <__aeabi_dadd+0x5a>
 8000488:	e11c      	b.n	80006c4 <__aeabi_dadd+0x294>
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	003c      	movs	r4, r7
 800048e:	0412      	lsls	r2, r2, #16
 8000490:	4314      	orrs	r4, r2
 8000492:	46a0      	mov	r8, r4
 8000494:	4662      	mov	r2, ip
 8000496:	2a38      	cmp	r2, #56	; 0x38
 8000498:	dd00      	ble.n	800049c <__aeabi_dadd+0x6c>
 800049a:	e161      	b.n	8000760 <__aeabi_dadd+0x330>
 800049c:	2a1f      	cmp	r2, #31
 800049e:	dd00      	ble.n	80004a2 <__aeabi_dadd+0x72>
 80004a0:	e1cc      	b.n	800083c <__aeabi_dadd+0x40c>
 80004a2:	4664      	mov	r4, ip
 80004a4:	2220      	movs	r2, #32
 80004a6:	1b12      	subs	r2, r2, r4
 80004a8:	4644      	mov	r4, r8
 80004aa:	4094      	lsls	r4, r2
 80004ac:	000f      	movs	r7, r1
 80004ae:	46a1      	mov	r9, r4
 80004b0:	4664      	mov	r4, ip
 80004b2:	4091      	lsls	r1, r2
 80004b4:	40e7      	lsrs	r7, r4
 80004b6:	464c      	mov	r4, r9
 80004b8:	1e4a      	subs	r2, r1, #1
 80004ba:	4191      	sbcs	r1, r2
 80004bc:	433c      	orrs	r4, r7
 80004be:	4642      	mov	r2, r8
 80004c0:	4321      	orrs	r1, r4
 80004c2:	4664      	mov	r4, ip
 80004c4:	40e2      	lsrs	r2, r4
 80004c6:	1a80      	subs	r0, r0, r2
 80004c8:	1a5c      	subs	r4, r3, r1
 80004ca:	42a3      	cmp	r3, r4
 80004cc:	419b      	sbcs	r3, r3
 80004ce:	425f      	negs	r7, r3
 80004d0:	1bc7      	subs	r7, r0, r7
 80004d2:	023b      	lsls	r3, r7, #8
 80004d4:	d400      	bmi.n	80004d8 <__aeabi_dadd+0xa8>
 80004d6:	e0d0      	b.n	800067a <__aeabi_dadd+0x24a>
 80004d8:	027f      	lsls	r7, r7, #9
 80004da:	0a7f      	lsrs	r7, r7, #9
 80004dc:	2f00      	cmp	r7, #0
 80004de:	d100      	bne.n	80004e2 <__aeabi_dadd+0xb2>
 80004e0:	e0ff      	b.n	80006e2 <__aeabi_dadd+0x2b2>
 80004e2:	0038      	movs	r0, r7
 80004e4:	f000 fe82 	bl	80011ec <__clzsi2>
 80004e8:	0001      	movs	r1, r0
 80004ea:	3908      	subs	r1, #8
 80004ec:	2320      	movs	r3, #32
 80004ee:	0022      	movs	r2, r4
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	408f      	lsls	r7, r1
 80004f4:	40da      	lsrs	r2, r3
 80004f6:	408c      	lsls	r4, r1
 80004f8:	4317      	orrs	r7, r2
 80004fa:	42b1      	cmp	r1, r6
 80004fc:	da00      	bge.n	8000500 <__aeabi_dadd+0xd0>
 80004fe:	e0ff      	b.n	8000700 <__aeabi_dadd+0x2d0>
 8000500:	1b89      	subs	r1, r1, r6
 8000502:	1c4b      	adds	r3, r1, #1
 8000504:	2b1f      	cmp	r3, #31
 8000506:	dd00      	ble.n	800050a <__aeabi_dadd+0xda>
 8000508:	e0a8      	b.n	800065c <__aeabi_dadd+0x22c>
 800050a:	2220      	movs	r2, #32
 800050c:	0039      	movs	r1, r7
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	0020      	movs	r0, r4
 8000512:	4094      	lsls	r4, r2
 8000514:	4091      	lsls	r1, r2
 8000516:	40d8      	lsrs	r0, r3
 8000518:	1e62      	subs	r2, r4, #1
 800051a:	4194      	sbcs	r4, r2
 800051c:	40df      	lsrs	r7, r3
 800051e:	2600      	movs	r6, #0
 8000520:	4301      	orrs	r1, r0
 8000522:	430c      	orrs	r4, r1
 8000524:	0763      	lsls	r3, r4, #29
 8000526:	d009      	beq.n	800053c <__aeabi_dadd+0x10c>
 8000528:	230f      	movs	r3, #15
 800052a:	4023      	ands	r3, r4
 800052c:	2b04      	cmp	r3, #4
 800052e:	d005      	beq.n	800053c <__aeabi_dadd+0x10c>
 8000530:	1d23      	adds	r3, r4, #4
 8000532:	42a3      	cmp	r3, r4
 8000534:	41a4      	sbcs	r4, r4
 8000536:	4264      	negs	r4, r4
 8000538:	193f      	adds	r7, r7, r4
 800053a:	001c      	movs	r4, r3
 800053c:	023b      	lsls	r3, r7, #8
 800053e:	d400      	bmi.n	8000542 <__aeabi_dadd+0x112>
 8000540:	e09e      	b.n	8000680 <__aeabi_dadd+0x250>
 8000542:	4b95      	ldr	r3, [pc, #596]	; (8000798 <__aeabi_dadd+0x368>)
 8000544:	3601      	adds	r6, #1
 8000546:	429e      	cmp	r6, r3
 8000548:	d100      	bne.n	800054c <__aeabi_dadd+0x11c>
 800054a:	e0b7      	b.n	80006bc <__aeabi_dadd+0x28c>
 800054c:	4a93      	ldr	r2, [pc, #588]	; (800079c <__aeabi_dadd+0x36c>)
 800054e:	08e4      	lsrs	r4, r4, #3
 8000550:	4017      	ands	r7, r2
 8000552:	077b      	lsls	r3, r7, #29
 8000554:	0571      	lsls	r1, r6, #21
 8000556:	027f      	lsls	r7, r7, #9
 8000558:	4323      	orrs	r3, r4
 800055a:	0b3f      	lsrs	r7, r7, #12
 800055c:	0d4a      	lsrs	r2, r1, #21
 800055e:	0512      	lsls	r2, r2, #20
 8000560:	433a      	orrs	r2, r7
 8000562:	07ed      	lsls	r5, r5, #31
 8000564:	432a      	orrs	r2, r5
 8000566:	0018      	movs	r0, r3
 8000568:	0011      	movs	r1, r2
 800056a:	bce0      	pop	{r5, r6, r7}
 800056c:	46ba      	mov	sl, r7
 800056e:	46b1      	mov	r9, r6
 8000570:	46a8      	mov	r8, r5
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	2c00      	cmp	r4, #0
 8000576:	d04b      	beq.n	8000610 <__aeabi_dadd+0x1e0>
 8000578:	464c      	mov	r4, r9
 800057a:	1ba4      	subs	r4, r4, r6
 800057c:	46a4      	mov	ip, r4
 800057e:	2e00      	cmp	r6, #0
 8000580:	d000      	beq.n	8000584 <__aeabi_dadd+0x154>
 8000582:	e123      	b.n	80007cc <__aeabi_dadd+0x39c>
 8000584:	0004      	movs	r4, r0
 8000586:	431c      	orrs	r4, r3
 8000588:	d100      	bne.n	800058c <__aeabi_dadd+0x15c>
 800058a:	e1af      	b.n	80008ec <__aeabi_dadd+0x4bc>
 800058c:	4662      	mov	r2, ip
 800058e:	1e54      	subs	r4, r2, #1
 8000590:	2a01      	cmp	r2, #1
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x166>
 8000594:	e215      	b.n	80009c2 <__aeabi_dadd+0x592>
 8000596:	4d80      	ldr	r5, [pc, #512]	; (8000798 <__aeabi_dadd+0x368>)
 8000598:	45ac      	cmp	ip, r5
 800059a:	d100      	bne.n	800059e <__aeabi_dadd+0x16e>
 800059c:	e1c8      	b.n	8000930 <__aeabi_dadd+0x500>
 800059e:	46a4      	mov	ip, r4
 80005a0:	e11b      	b.n	80007da <__aeabi_dadd+0x3aa>
 80005a2:	464a      	mov	r2, r9
 80005a4:	1ab2      	subs	r2, r6, r2
 80005a6:	4694      	mov	ip, r2
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_dadd+0x17e>
 80005ac:	e0ac      	b.n	8000708 <__aeabi_dadd+0x2d8>
 80005ae:	464a      	mov	r2, r9
 80005b0:	2a00      	cmp	r2, #0
 80005b2:	d043      	beq.n	800063c <__aeabi_dadd+0x20c>
 80005b4:	4a78      	ldr	r2, [pc, #480]	; (8000798 <__aeabi_dadd+0x368>)
 80005b6:	4296      	cmp	r6, r2
 80005b8:	d100      	bne.n	80005bc <__aeabi_dadd+0x18c>
 80005ba:	e1af      	b.n	800091c <__aeabi_dadd+0x4ec>
 80005bc:	2280      	movs	r2, #128	; 0x80
 80005be:	003c      	movs	r4, r7
 80005c0:	0412      	lsls	r2, r2, #16
 80005c2:	4314      	orrs	r4, r2
 80005c4:	46a0      	mov	r8, r4
 80005c6:	4662      	mov	r2, ip
 80005c8:	2a38      	cmp	r2, #56	; 0x38
 80005ca:	dc67      	bgt.n	800069c <__aeabi_dadd+0x26c>
 80005cc:	2a1f      	cmp	r2, #31
 80005ce:	dc00      	bgt.n	80005d2 <__aeabi_dadd+0x1a2>
 80005d0:	e15f      	b.n	8000892 <__aeabi_dadd+0x462>
 80005d2:	4647      	mov	r7, r8
 80005d4:	3a20      	subs	r2, #32
 80005d6:	40d7      	lsrs	r7, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	2a20      	cmp	r2, #32
 80005dc:	d005      	beq.n	80005ea <__aeabi_dadd+0x1ba>
 80005de:	4664      	mov	r4, ip
 80005e0:	2240      	movs	r2, #64	; 0x40
 80005e2:	1b12      	subs	r2, r2, r4
 80005e4:	4644      	mov	r4, r8
 80005e6:	4094      	lsls	r4, r2
 80005e8:	4321      	orrs	r1, r4
 80005ea:	1e4a      	subs	r2, r1, #1
 80005ec:	4191      	sbcs	r1, r2
 80005ee:	000c      	movs	r4, r1
 80005f0:	433c      	orrs	r4, r7
 80005f2:	e057      	b.n	80006a4 <__aeabi_dadd+0x274>
 80005f4:	003a      	movs	r2, r7
 80005f6:	430a      	orrs	r2, r1
 80005f8:	d100      	bne.n	80005fc <__aeabi_dadd+0x1cc>
 80005fa:	e105      	b.n	8000808 <__aeabi_dadd+0x3d8>
 80005fc:	0022      	movs	r2, r4
 80005fe:	3a01      	subs	r2, #1
 8000600:	2c01      	cmp	r4, #1
 8000602:	d100      	bne.n	8000606 <__aeabi_dadd+0x1d6>
 8000604:	e182      	b.n	800090c <__aeabi_dadd+0x4dc>
 8000606:	4c64      	ldr	r4, [pc, #400]	; (8000798 <__aeabi_dadd+0x368>)
 8000608:	45a4      	cmp	ip, r4
 800060a:	d05b      	beq.n	80006c4 <__aeabi_dadd+0x294>
 800060c:	4694      	mov	ip, r2
 800060e:	e741      	b.n	8000494 <__aeabi_dadd+0x64>
 8000610:	4c63      	ldr	r4, [pc, #396]	; (80007a0 <__aeabi_dadd+0x370>)
 8000612:	1c77      	adds	r7, r6, #1
 8000614:	4227      	tst	r7, r4
 8000616:	d000      	beq.n	800061a <__aeabi_dadd+0x1ea>
 8000618:	e0c4      	b.n	80007a4 <__aeabi_dadd+0x374>
 800061a:	0004      	movs	r4, r0
 800061c:	431c      	orrs	r4, r3
 800061e:	2e00      	cmp	r6, #0
 8000620:	d000      	beq.n	8000624 <__aeabi_dadd+0x1f4>
 8000622:	e169      	b.n	80008f8 <__aeabi_dadd+0x4c8>
 8000624:	2c00      	cmp	r4, #0
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1fa>
 8000628:	e1bf      	b.n	80009aa <__aeabi_dadd+0x57a>
 800062a:	4644      	mov	r4, r8
 800062c:	430c      	orrs	r4, r1
 800062e:	d000      	beq.n	8000632 <__aeabi_dadd+0x202>
 8000630:	e1d0      	b.n	80009d4 <__aeabi_dadd+0x5a4>
 8000632:	0742      	lsls	r2, r0, #29
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	4313      	orrs	r3, r2
 8000638:	08c0      	lsrs	r0, r0, #3
 800063a:	e029      	b.n	8000690 <__aeabi_dadd+0x260>
 800063c:	003a      	movs	r2, r7
 800063e:	430a      	orrs	r2, r1
 8000640:	d100      	bne.n	8000644 <__aeabi_dadd+0x214>
 8000642:	e170      	b.n	8000926 <__aeabi_dadd+0x4f6>
 8000644:	4662      	mov	r2, ip
 8000646:	4664      	mov	r4, ip
 8000648:	3a01      	subs	r2, #1
 800064a:	2c01      	cmp	r4, #1
 800064c:	d100      	bne.n	8000650 <__aeabi_dadd+0x220>
 800064e:	e0e0      	b.n	8000812 <__aeabi_dadd+0x3e2>
 8000650:	4c51      	ldr	r4, [pc, #324]	; (8000798 <__aeabi_dadd+0x368>)
 8000652:	45a4      	cmp	ip, r4
 8000654:	d100      	bne.n	8000658 <__aeabi_dadd+0x228>
 8000656:	e161      	b.n	800091c <__aeabi_dadd+0x4ec>
 8000658:	4694      	mov	ip, r2
 800065a:	e7b4      	b.n	80005c6 <__aeabi_dadd+0x196>
 800065c:	003a      	movs	r2, r7
 800065e:	391f      	subs	r1, #31
 8000660:	40ca      	lsrs	r2, r1
 8000662:	0011      	movs	r1, r2
 8000664:	2b20      	cmp	r3, #32
 8000666:	d003      	beq.n	8000670 <__aeabi_dadd+0x240>
 8000668:	2240      	movs	r2, #64	; 0x40
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	409f      	lsls	r7, r3
 800066e:	433c      	orrs	r4, r7
 8000670:	1e63      	subs	r3, r4, #1
 8000672:	419c      	sbcs	r4, r3
 8000674:	2700      	movs	r7, #0
 8000676:	2600      	movs	r6, #0
 8000678:	430c      	orrs	r4, r1
 800067a:	0763      	lsls	r3, r4, #29
 800067c:	d000      	beq.n	8000680 <__aeabi_dadd+0x250>
 800067e:	e753      	b.n	8000528 <__aeabi_dadd+0xf8>
 8000680:	46b4      	mov	ip, r6
 8000682:	08e4      	lsrs	r4, r4, #3
 8000684:	077b      	lsls	r3, r7, #29
 8000686:	4323      	orrs	r3, r4
 8000688:	08f8      	lsrs	r0, r7, #3
 800068a:	4a43      	ldr	r2, [pc, #268]	; (8000798 <__aeabi_dadd+0x368>)
 800068c:	4594      	cmp	ip, r2
 800068e:	d01d      	beq.n	80006cc <__aeabi_dadd+0x29c>
 8000690:	4662      	mov	r2, ip
 8000692:	0307      	lsls	r7, r0, #12
 8000694:	0552      	lsls	r2, r2, #21
 8000696:	0b3f      	lsrs	r7, r7, #12
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	e760      	b.n	800055e <__aeabi_dadd+0x12e>
 800069c:	4644      	mov	r4, r8
 800069e:	430c      	orrs	r4, r1
 80006a0:	1e62      	subs	r2, r4, #1
 80006a2:	4194      	sbcs	r4, r2
 80006a4:	18e4      	adds	r4, r4, r3
 80006a6:	429c      	cmp	r4, r3
 80006a8:	419b      	sbcs	r3, r3
 80006aa:	425f      	negs	r7, r3
 80006ac:	183f      	adds	r7, r7, r0
 80006ae:	023b      	lsls	r3, r7, #8
 80006b0:	d5e3      	bpl.n	800067a <__aeabi_dadd+0x24a>
 80006b2:	4b39      	ldr	r3, [pc, #228]	; (8000798 <__aeabi_dadd+0x368>)
 80006b4:	3601      	adds	r6, #1
 80006b6:	429e      	cmp	r6, r3
 80006b8:	d000      	beq.n	80006bc <__aeabi_dadd+0x28c>
 80006ba:	e0b5      	b.n	8000828 <__aeabi_dadd+0x3f8>
 80006bc:	0032      	movs	r2, r6
 80006be:	2700      	movs	r7, #0
 80006c0:	2300      	movs	r3, #0
 80006c2:	e74c      	b.n	800055e <__aeabi_dadd+0x12e>
 80006c4:	0742      	lsls	r2, r0, #29
 80006c6:	08db      	lsrs	r3, r3, #3
 80006c8:	4313      	orrs	r3, r2
 80006ca:	08c0      	lsrs	r0, r0, #3
 80006cc:	001a      	movs	r2, r3
 80006ce:	4302      	orrs	r2, r0
 80006d0:	d100      	bne.n	80006d4 <__aeabi_dadd+0x2a4>
 80006d2:	e1e1      	b.n	8000a98 <__aeabi_dadd+0x668>
 80006d4:	2780      	movs	r7, #128	; 0x80
 80006d6:	033f      	lsls	r7, r7, #12
 80006d8:	4307      	orrs	r7, r0
 80006da:	033f      	lsls	r7, r7, #12
 80006dc:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <__aeabi_dadd+0x368>)
 80006de:	0b3f      	lsrs	r7, r7, #12
 80006e0:	e73d      	b.n	800055e <__aeabi_dadd+0x12e>
 80006e2:	0020      	movs	r0, r4
 80006e4:	f000 fd82 	bl	80011ec <__clzsi2>
 80006e8:	0001      	movs	r1, r0
 80006ea:	3118      	adds	r1, #24
 80006ec:	291f      	cmp	r1, #31
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_dadd+0x2c2>
 80006f0:	e6fc      	b.n	80004ec <__aeabi_dadd+0xbc>
 80006f2:	3808      	subs	r0, #8
 80006f4:	4084      	lsls	r4, r0
 80006f6:	0027      	movs	r7, r4
 80006f8:	2400      	movs	r4, #0
 80006fa:	42b1      	cmp	r1, r6
 80006fc:	db00      	blt.n	8000700 <__aeabi_dadd+0x2d0>
 80006fe:	e6ff      	b.n	8000500 <__aeabi_dadd+0xd0>
 8000700:	4a26      	ldr	r2, [pc, #152]	; (800079c <__aeabi_dadd+0x36c>)
 8000702:	1a76      	subs	r6, r6, r1
 8000704:	4017      	ands	r7, r2
 8000706:	e70d      	b.n	8000524 <__aeabi_dadd+0xf4>
 8000708:	2a00      	cmp	r2, #0
 800070a:	d02f      	beq.n	800076c <__aeabi_dadd+0x33c>
 800070c:	464a      	mov	r2, r9
 800070e:	1b92      	subs	r2, r2, r6
 8000710:	4694      	mov	ip, r2
 8000712:	2e00      	cmp	r6, #0
 8000714:	d100      	bne.n	8000718 <__aeabi_dadd+0x2e8>
 8000716:	e0ad      	b.n	8000874 <__aeabi_dadd+0x444>
 8000718:	4a1f      	ldr	r2, [pc, #124]	; (8000798 <__aeabi_dadd+0x368>)
 800071a:	4591      	cmp	r9, r2
 800071c:	d100      	bne.n	8000720 <__aeabi_dadd+0x2f0>
 800071e:	e10f      	b.n	8000940 <__aeabi_dadd+0x510>
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	0412      	lsls	r2, r2, #16
 8000724:	4310      	orrs	r0, r2
 8000726:	4662      	mov	r2, ip
 8000728:	2a38      	cmp	r2, #56	; 0x38
 800072a:	dd00      	ble.n	800072e <__aeabi_dadd+0x2fe>
 800072c:	e10f      	b.n	800094e <__aeabi_dadd+0x51e>
 800072e:	2a1f      	cmp	r2, #31
 8000730:	dd00      	ble.n	8000734 <__aeabi_dadd+0x304>
 8000732:	e180      	b.n	8000a36 <__aeabi_dadd+0x606>
 8000734:	4664      	mov	r4, ip
 8000736:	2220      	movs	r2, #32
 8000738:	001e      	movs	r6, r3
 800073a:	1b12      	subs	r2, r2, r4
 800073c:	4667      	mov	r7, ip
 800073e:	0004      	movs	r4, r0
 8000740:	4093      	lsls	r3, r2
 8000742:	4094      	lsls	r4, r2
 8000744:	40fe      	lsrs	r6, r7
 8000746:	1e5a      	subs	r2, r3, #1
 8000748:	4193      	sbcs	r3, r2
 800074a:	40f8      	lsrs	r0, r7
 800074c:	4334      	orrs	r4, r6
 800074e:	431c      	orrs	r4, r3
 8000750:	4480      	add	r8, r0
 8000752:	1864      	adds	r4, r4, r1
 8000754:	428c      	cmp	r4, r1
 8000756:	41bf      	sbcs	r7, r7
 8000758:	427f      	negs	r7, r7
 800075a:	464e      	mov	r6, r9
 800075c:	4447      	add	r7, r8
 800075e:	e7a6      	b.n	80006ae <__aeabi_dadd+0x27e>
 8000760:	4642      	mov	r2, r8
 8000762:	430a      	orrs	r2, r1
 8000764:	0011      	movs	r1, r2
 8000766:	1e4a      	subs	r2, r1, #1
 8000768:	4191      	sbcs	r1, r2
 800076a:	e6ad      	b.n	80004c8 <__aeabi_dadd+0x98>
 800076c:	4c0c      	ldr	r4, [pc, #48]	; (80007a0 <__aeabi_dadd+0x370>)
 800076e:	1c72      	adds	r2, r6, #1
 8000770:	4222      	tst	r2, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x346>
 8000774:	e0a1      	b.n	80008ba <__aeabi_dadd+0x48a>
 8000776:	0002      	movs	r2, r0
 8000778:	431a      	orrs	r2, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x350>
 800077e:	e0fa      	b.n	8000976 <__aeabi_dadd+0x546>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x356>
 8000784:	e145      	b.n	8000a12 <__aeabi_dadd+0x5e2>
 8000786:	003a      	movs	r2, r7
 8000788:	430a      	orrs	r2, r1
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x35e>
 800078c:	e146      	b.n	8000a1c <__aeabi_dadd+0x5ec>
 800078e:	0742      	lsls	r2, r0, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c0      	lsrs	r0, r0, #3
 8000796:	e77b      	b.n	8000690 <__aeabi_dadd+0x260>
 8000798:	000007ff 	.word	0x000007ff
 800079c:	ff7fffff 	.word	0xff7fffff
 80007a0:	000007fe 	.word	0x000007fe
 80007a4:	4647      	mov	r7, r8
 80007a6:	1a5c      	subs	r4, r3, r1
 80007a8:	1bc2      	subs	r2, r0, r7
 80007aa:	42a3      	cmp	r3, r4
 80007ac:	41bf      	sbcs	r7, r7
 80007ae:	427f      	negs	r7, r7
 80007b0:	46b9      	mov	r9, r7
 80007b2:	0017      	movs	r7, r2
 80007b4:	464a      	mov	r2, r9
 80007b6:	1abf      	subs	r7, r7, r2
 80007b8:	023a      	lsls	r2, r7, #8
 80007ba:	d500      	bpl.n	80007be <__aeabi_dadd+0x38e>
 80007bc:	e08d      	b.n	80008da <__aeabi_dadd+0x4aa>
 80007be:	0023      	movs	r3, r4
 80007c0:	433b      	orrs	r3, r7
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x396>
 80007c4:	e68a      	b.n	80004dc <__aeabi_dadd+0xac>
 80007c6:	2000      	movs	r0, #0
 80007c8:	2500      	movs	r5, #0
 80007ca:	e761      	b.n	8000690 <__aeabi_dadd+0x260>
 80007cc:	4cb4      	ldr	r4, [pc, #720]	; (8000aa0 <__aeabi_dadd+0x670>)
 80007ce:	45a1      	cmp	r9, r4
 80007d0:	d100      	bne.n	80007d4 <__aeabi_dadd+0x3a4>
 80007d2:	e0ad      	b.n	8000930 <__aeabi_dadd+0x500>
 80007d4:	2480      	movs	r4, #128	; 0x80
 80007d6:	0424      	lsls	r4, r4, #16
 80007d8:	4320      	orrs	r0, r4
 80007da:	4664      	mov	r4, ip
 80007dc:	2c38      	cmp	r4, #56	; 0x38
 80007de:	dc3d      	bgt.n	800085c <__aeabi_dadd+0x42c>
 80007e0:	4662      	mov	r2, ip
 80007e2:	2c1f      	cmp	r4, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dadd+0x3b8>
 80007e6:	e0b7      	b.n	8000958 <__aeabi_dadd+0x528>
 80007e8:	2520      	movs	r5, #32
 80007ea:	001e      	movs	r6, r3
 80007ec:	1b2d      	subs	r5, r5, r4
 80007ee:	0004      	movs	r4, r0
 80007f0:	40ab      	lsls	r3, r5
 80007f2:	40ac      	lsls	r4, r5
 80007f4:	40d6      	lsrs	r6, r2
 80007f6:	40d0      	lsrs	r0, r2
 80007f8:	4642      	mov	r2, r8
 80007fa:	1e5d      	subs	r5, r3, #1
 80007fc:	41ab      	sbcs	r3, r5
 80007fe:	4334      	orrs	r4, r6
 8000800:	1a12      	subs	r2, r2, r0
 8000802:	4690      	mov	r8, r2
 8000804:	4323      	orrs	r3, r4
 8000806:	e02c      	b.n	8000862 <__aeabi_dadd+0x432>
 8000808:	0742      	lsls	r2, r0, #29
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	4313      	orrs	r3, r2
 800080e:	08c0      	lsrs	r0, r0, #3
 8000810:	e73b      	b.n	800068a <__aeabi_dadd+0x25a>
 8000812:	185c      	adds	r4, r3, r1
 8000814:	429c      	cmp	r4, r3
 8000816:	419b      	sbcs	r3, r3
 8000818:	4440      	add	r0, r8
 800081a:	425b      	negs	r3, r3
 800081c:	18c7      	adds	r7, r0, r3
 800081e:	2601      	movs	r6, #1
 8000820:	023b      	lsls	r3, r7, #8
 8000822:	d400      	bmi.n	8000826 <__aeabi_dadd+0x3f6>
 8000824:	e729      	b.n	800067a <__aeabi_dadd+0x24a>
 8000826:	2602      	movs	r6, #2
 8000828:	4a9e      	ldr	r2, [pc, #632]	; (8000aa4 <__aeabi_dadd+0x674>)
 800082a:	0863      	lsrs	r3, r4, #1
 800082c:	4017      	ands	r7, r2
 800082e:	2201      	movs	r2, #1
 8000830:	4014      	ands	r4, r2
 8000832:	431c      	orrs	r4, r3
 8000834:	07fb      	lsls	r3, r7, #31
 8000836:	431c      	orrs	r4, r3
 8000838:	087f      	lsrs	r7, r7, #1
 800083a:	e673      	b.n	8000524 <__aeabi_dadd+0xf4>
 800083c:	4644      	mov	r4, r8
 800083e:	3a20      	subs	r2, #32
 8000840:	40d4      	lsrs	r4, r2
 8000842:	4662      	mov	r2, ip
 8000844:	2a20      	cmp	r2, #32
 8000846:	d005      	beq.n	8000854 <__aeabi_dadd+0x424>
 8000848:	4667      	mov	r7, ip
 800084a:	2240      	movs	r2, #64	; 0x40
 800084c:	1bd2      	subs	r2, r2, r7
 800084e:	4647      	mov	r7, r8
 8000850:	4097      	lsls	r7, r2
 8000852:	4339      	orrs	r1, r7
 8000854:	1e4a      	subs	r2, r1, #1
 8000856:	4191      	sbcs	r1, r2
 8000858:	4321      	orrs	r1, r4
 800085a:	e635      	b.n	80004c8 <__aeabi_dadd+0x98>
 800085c:	4303      	orrs	r3, r0
 800085e:	1e58      	subs	r0, r3, #1
 8000860:	4183      	sbcs	r3, r0
 8000862:	1acc      	subs	r4, r1, r3
 8000864:	42a1      	cmp	r1, r4
 8000866:	41bf      	sbcs	r7, r7
 8000868:	4643      	mov	r3, r8
 800086a:	427f      	negs	r7, r7
 800086c:	4655      	mov	r5, sl
 800086e:	464e      	mov	r6, r9
 8000870:	1bdf      	subs	r7, r3, r7
 8000872:	e62e      	b.n	80004d2 <__aeabi_dadd+0xa2>
 8000874:	0002      	movs	r2, r0
 8000876:	431a      	orrs	r2, r3
 8000878:	d100      	bne.n	800087c <__aeabi_dadd+0x44c>
 800087a:	e0bd      	b.n	80009f8 <__aeabi_dadd+0x5c8>
 800087c:	4662      	mov	r2, ip
 800087e:	4664      	mov	r4, ip
 8000880:	3a01      	subs	r2, #1
 8000882:	2c01      	cmp	r4, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_dadd+0x458>
 8000886:	e0e5      	b.n	8000a54 <__aeabi_dadd+0x624>
 8000888:	4c85      	ldr	r4, [pc, #532]	; (8000aa0 <__aeabi_dadd+0x670>)
 800088a:	45a4      	cmp	ip, r4
 800088c:	d058      	beq.n	8000940 <__aeabi_dadd+0x510>
 800088e:	4694      	mov	ip, r2
 8000890:	e749      	b.n	8000726 <__aeabi_dadd+0x2f6>
 8000892:	4664      	mov	r4, ip
 8000894:	2220      	movs	r2, #32
 8000896:	1b12      	subs	r2, r2, r4
 8000898:	4644      	mov	r4, r8
 800089a:	4094      	lsls	r4, r2
 800089c:	000f      	movs	r7, r1
 800089e:	46a1      	mov	r9, r4
 80008a0:	4664      	mov	r4, ip
 80008a2:	4091      	lsls	r1, r2
 80008a4:	40e7      	lsrs	r7, r4
 80008a6:	464c      	mov	r4, r9
 80008a8:	1e4a      	subs	r2, r1, #1
 80008aa:	4191      	sbcs	r1, r2
 80008ac:	433c      	orrs	r4, r7
 80008ae:	4642      	mov	r2, r8
 80008b0:	430c      	orrs	r4, r1
 80008b2:	4661      	mov	r1, ip
 80008b4:	40ca      	lsrs	r2, r1
 80008b6:	1880      	adds	r0, r0, r2
 80008b8:	e6f4      	b.n	80006a4 <__aeabi_dadd+0x274>
 80008ba:	4c79      	ldr	r4, [pc, #484]	; (8000aa0 <__aeabi_dadd+0x670>)
 80008bc:	42a2      	cmp	r2, r4
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x492>
 80008c0:	e6fd      	b.n	80006be <__aeabi_dadd+0x28e>
 80008c2:	1859      	adds	r1, r3, r1
 80008c4:	4299      	cmp	r1, r3
 80008c6:	419b      	sbcs	r3, r3
 80008c8:	4440      	add	r0, r8
 80008ca:	425f      	negs	r7, r3
 80008cc:	19c7      	adds	r7, r0, r7
 80008ce:	07fc      	lsls	r4, r7, #31
 80008d0:	0849      	lsrs	r1, r1, #1
 80008d2:	0016      	movs	r6, r2
 80008d4:	430c      	orrs	r4, r1
 80008d6:	087f      	lsrs	r7, r7, #1
 80008d8:	e6cf      	b.n	800067a <__aeabi_dadd+0x24a>
 80008da:	1acc      	subs	r4, r1, r3
 80008dc:	42a1      	cmp	r1, r4
 80008de:	41bf      	sbcs	r7, r7
 80008e0:	4643      	mov	r3, r8
 80008e2:	427f      	negs	r7, r7
 80008e4:	1a18      	subs	r0, r3, r0
 80008e6:	4655      	mov	r5, sl
 80008e8:	1bc7      	subs	r7, r0, r7
 80008ea:	e5f7      	b.n	80004dc <__aeabi_dadd+0xac>
 80008ec:	08c9      	lsrs	r1, r1, #3
 80008ee:	077b      	lsls	r3, r7, #29
 80008f0:	4655      	mov	r5, sl
 80008f2:	430b      	orrs	r3, r1
 80008f4:	08f8      	lsrs	r0, r7, #3
 80008f6:	e6c8      	b.n	800068a <__aeabi_dadd+0x25a>
 80008f8:	2c00      	cmp	r4, #0
 80008fa:	d000      	beq.n	80008fe <__aeabi_dadd+0x4ce>
 80008fc:	e081      	b.n	8000a02 <__aeabi_dadd+0x5d2>
 80008fe:	4643      	mov	r3, r8
 8000900:	430b      	orrs	r3, r1
 8000902:	d115      	bne.n	8000930 <__aeabi_dadd+0x500>
 8000904:	2080      	movs	r0, #128	; 0x80
 8000906:	2500      	movs	r5, #0
 8000908:	0300      	lsls	r0, r0, #12
 800090a:	e6e3      	b.n	80006d4 <__aeabi_dadd+0x2a4>
 800090c:	1a5c      	subs	r4, r3, r1
 800090e:	42a3      	cmp	r3, r4
 8000910:	419b      	sbcs	r3, r3
 8000912:	1bc7      	subs	r7, r0, r7
 8000914:	425b      	negs	r3, r3
 8000916:	2601      	movs	r6, #1
 8000918:	1aff      	subs	r7, r7, r3
 800091a:	e5da      	b.n	80004d2 <__aeabi_dadd+0xa2>
 800091c:	0742      	lsls	r2, r0, #29
 800091e:	08db      	lsrs	r3, r3, #3
 8000920:	4313      	orrs	r3, r2
 8000922:	08c0      	lsrs	r0, r0, #3
 8000924:	e6d2      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000926:	0742      	lsls	r2, r0, #29
 8000928:	08db      	lsrs	r3, r3, #3
 800092a:	4313      	orrs	r3, r2
 800092c:	08c0      	lsrs	r0, r0, #3
 800092e:	e6ac      	b.n	800068a <__aeabi_dadd+0x25a>
 8000930:	4643      	mov	r3, r8
 8000932:	4642      	mov	r2, r8
 8000934:	08c9      	lsrs	r1, r1, #3
 8000936:	075b      	lsls	r3, r3, #29
 8000938:	4655      	mov	r5, sl
 800093a:	430b      	orrs	r3, r1
 800093c:	08d0      	lsrs	r0, r2, #3
 800093e:	e6c5      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000940:	4643      	mov	r3, r8
 8000942:	4642      	mov	r2, r8
 8000944:	075b      	lsls	r3, r3, #29
 8000946:	08c9      	lsrs	r1, r1, #3
 8000948:	430b      	orrs	r3, r1
 800094a:	08d0      	lsrs	r0, r2, #3
 800094c:	e6be      	b.n	80006cc <__aeabi_dadd+0x29c>
 800094e:	4303      	orrs	r3, r0
 8000950:	001c      	movs	r4, r3
 8000952:	1e63      	subs	r3, r4, #1
 8000954:	419c      	sbcs	r4, r3
 8000956:	e6fc      	b.n	8000752 <__aeabi_dadd+0x322>
 8000958:	0002      	movs	r2, r0
 800095a:	3c20      	subs	r4, #32
 800095c:	40e2      	lsrs	r2, r4
 800095e:	0014      	movs	r4, r2
 8000960:	4662      	mov	r2, ip
 8000962:	2a20      	cmp	r2, #32
 8000964:	d003      	beq.n	800096e <__aeabi_dadd+0x53e>
 8000966:	2540      	movs	r5, #64	; 0x40
 8000968:	1aad      	subs	r5, r5, r2
 800096a:	40a8      	lsls	r0, r5
 800096c:	4303      	orrs	r3, r0
 800096e:	1e58      	subs	r0, r3, #1
 8000970:	4183      	sbcs	r3, r0
 8000972:	4323      	orrs	r3, r4
 8000974:	e775      	b.n	8000862 <__aeabi_dadd+0x432>
 8000976:	2a00      	cmp	r2, #0
 8000978:	d0e2      	beq.n	8000940 <__aeabi_dadd+0x510>
 800097a:	003a      	movs	r2, r7
 800097c:	430a      	orrs	r2, r1
 800097e:	d0cd      	beq.n	800091c <__aeabi_dadd+0x4ec>
 8000980:	0742      	lsls	r2, r0, #29
 8000982:	08db      	lsrs	r3, r3, #3
 8000984:	4313      	orrs	r3, r2
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	08c0      	lsrs	r0, r0, #3
 800098a:	0312      	lsls	r2, r2, #12
 800098c:	4210      	tst	r0, r2
 800098e:	d006      	beq.n	800099e <__aeabi_dadd+0x56e>
 8000990:	08fc      	lsrs	r4, r7, #3
 8000992:	4214      	tst	r4, r2
 8000994:	d103      	bne.n	800099e <__aeabi_dadd+0x56e>
 8000996:	0020      	movs	r0, r4
 8000998:	08cb      	lsrs	r3, r1, #3
 800099a:	077a      	lsls	r2, r7, #29
 800099c:	4313      	orrs	r3, r2
 800099e:	0f5a      	lsrs	r2, r3, #29
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	0752      	lsls	r2, r2, #29
 80009a4:	08db      	lsrs	r3, r3, #3
 80009a6:	4313      	orrs	r3, r2
 80009a8:	e690      	b.n	80006cc <__aeabi_dadd+0x29c>
 80009aa:	4643      	mov	r3, r8
 80009ac:	430b      	orrs	r3, r1
 80009ae:	d100      	bne.n	80009b2 <__aeabi_dadd+0x582>
 80009b0:	e709      	b.n	80007c6 <__aeabi_dadd+0x396>
 80009b2:	4643      	mov	r3, r8
 80009b4:	4642      	mov	r2, r8
 80009b6:	08c9      	lsrs	r1, r1, #3
 80009b8:	075b      	lsls	r3, r3, #29
 80009ba:	4655      	mov	r5, sl
 80009bc:	430b      	orrs	r3, r1
 80009be:	08d0      	lsrs	r0, r2, #3
 80009c0:	e666      	b.n	8000690 <__aeabi_dadd+0x260>
 80009c2:	1acc      	subs	r4, r1, r3
 80009c4:	42a1      	cmp	r1, r4
 80009c6:	4189      	sbcs	r1, r1
 80009c8:	1a3f      	subs	r7, r7, r0
 80009ca:	4249      	negs	r1, r1
 80009cc:	4655      	mov	r5, sl
 80009ce:	2601      	movs	r6, #1
 80009d0:	1a7f      	subs	r7, r7, r1
 80009d2:	e57e      	b.n	80004d2 <__aeabi_dadd+0xa2>
 80009d4:	4642      	mov	r2, r8
 80009d6:	1a5c      	subs	r4, r3, r1
 80009d8:	1a87      	subs	r7, r0, r2
 80009da:	42a3      	cmp	r3, r4
 80009dc:	4192      	sbcs	r2, r2
 80009de:	4252      	negs	r2, r2
 80009e0:	1abf      	subs	r7, r7, r2
 80009e2:	023a      	lsls	r2, r7, #8
 80009e4:	d53d      	bpl.n	8000a62 <__aeabi_dadd+0x632>
 80009e6:	1acc      	subs	r4, r1, r3
 80009e8:	42a1      	cmp	r1, r4
 80009ea:	4189      	sbcs	r1, r1
 80009ec:	4643      	mov	r3, r8
 80009ee:	4249      	negs	r1, r1
 80009f0:	1a1f      	subs	r7, r3, r0
 80009f2:	4655      	mov	r5, sl
 80009f4:	1a7f      	subs	r7, r7, r1
 80009f6:	e595      	b.n	8000524 <__aeabi_dadd+0xf4>
 80009f8:	077b      	lsls	r3, r7, #29
 80009fa:	08c9      	lsrs	r1, r1, #3
 80009fc:	430b      	orrs	r3, r1
 80009fe:	08f8      	lsrs	r0, r7, #3
 8000a00:	e643      	b.n	800068a <__aeabi_dadd+0x25a>
 8000a02:	4644      	mov	r4, r8
 8000a04:	08db      	lsrs	r3, r3, #3
 8000a06:	430c      	orrs	r4, r1
 8000a08:	d130      	bne.n	8000a6c <__aeabi_dadd+0x63c>
 8000a0a:	0742      	lsls	r2, r0, #29
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	08c0      	lsrs	r0, r0, #3
 8000a10:	e65c      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000a12:	077b      	lsls	r3, r7, #29
 8000a14:	08c9      	lsrs	r1, r1, #3
 8000a16:	430b      	orrs	r3, r1
 8000a18:	08f8      	lsrs	r0, r7, #3
 8000a1a:	e639      	b.n	8000690 <__aeabi_dadd+0x260>
 8000a1c:	185c      	adds	r4, r3, r1
 8000a1e:	429c      	cmp	r4, r3
 8000a20:	419b      	sbcs	r3, r3
 8000a22:	4440      	add	r0, r8
 8000a24:	425b      	negs	r3, r3
 8000a26:	18c7      	adds	r7, r0, r3
 8000a28:	023b      	lsls	r3, r7, #8
 8000a2a:	d400      	bmi.n	8000a2e <__aeabi_dadd+0x5fe>
 8000a2c:	e625      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <__aeabi_dadd+0x674>)
 8000a30:	2601      	movs	r6, #1
 8000a32:	401f      	ands	r7, r3
 8000a34:	e621      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a36:	0004      	movs	r4, r0
 8000a38:	3a20      	subs	r2, #32
 8000a3a:	40d4      	lsrs	r4, r2
 8000a3c:	4662      	mov	r2, ip
 8000a3e:	2a20      	cmp	r2, #32
 8000a40:	d004      	beq.n	8000a4c <__aeabi_dadd+0x61c>
 8000a42:	2240      	movs	r2, #64	; 0x40
 8000a44:	4666      	mov	r6, ip
 8000a46:	1b92      	subs	r2, r2, r6
 8000a48:	4090      	lsls	r0, r2
 8000a4a:	4303      	orrs	r3, r0
 8000a4c:	1e5a      	subs	r2, r3, #1
 8000a4e:	4193      	sbcs	r3, r2
 8000a50:	431c      	orrs	r4, r3
 8000a52:	e67e      	b.n	8000752 <__aeabi_dadd+0x322>
 8000a54:	185c      	adds	r4, r3, r1
 8000a56:	428c      	cmp	r4, r1
 8000a58:	4189      	sbcs	r1, r1
 8000a5a:	4440      	add	r0, r8
 8000a5c:	4249      	negs	r1, r1
 8000a5e:	1847      	adds	r7, r0, r1
 8000a60:	e6dd      	b.n	800081e <__aeabi_dadd+0x3ee>
 8000a62:	0023      	movs	r3, r4
 8000a64:	433b      	orrs	r3, r7
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x63a>
 8000a68:	e6ad      	b.n	80007c6 <__aeabi_dadd+0x396>
 8000a6a:	e606      	b.n	800067a <__aeabi_dadd+0x24a>
 8000a6c:	0744      	lsls	r4, r0, #29
 8000a6e:	4323      	orrs	r3, r4
 8000a70:	2480      	movs	r4, #128	; 0x80
 8000a72:	08c0      	lsrs	r0, r0, #3
 8000a74:	0324      	lsls	r4, r4, #12
 8000a76:	4220      	tst	r0, r4
 8000a78:	d008      	beq.n	8000a8c <__aeabi_dadd+0x65c>
 8000a7a:	4642      	mov	r2, r8
 8000a7c:	08d6      	lsrs	r6, r2, #3
 8000a7e:	4226      	tst	r6, r4
 8000a80:	d104      	bne.n	8000a8c <__aeabi_dadd+0x65c>
 8000a82:	4655      	mov	r5, sl
 8000a84:	0030      	movs	r0, r6
 8000a86:	08cb      	lsrs	r3, r1, #3
 8000a88:	0751      	lsls	r1, r2, #29
 8000a8a:	430b      	orrs	r3, r1
 8000a8c:	0f5a      	lsrs	r2, r3, #29
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	08db      	lsrs	r3, r3, #3
 8000a92:	0752      	lsls	r2, r2, #29
 8000a94:	4313      	orrs	r3, r2
 8000a96:	e619      	b.n	80006cc <__aeabi_dadd+0x29c>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	4a01      	ldr	r2, [pc, #4]	; (8000aa0 <__aeabi_dadd+0x670>)
 8000a9c:	001f      	movs	r7, r3
 8000a9e:	e55e      	b.n	800055e <__aeabi_dadd+0x12e>
 8000aa0:	000007ff 	.word	0x000007ff
 8000aa4:	ff7fffff 	.word	0xff7fffff

08000aa8 <__aeabi_dmul>:
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	4657      	mov	r7, sl
 8000aac:	464e      	mov	r6, r9
 8000aae:	4645      	mov	r5, r8
 8000ab0:	46de      	mov	lr, fp
 8000ab2:	b5e0      	push	{r5, r6, r7, lr}
 8000ab4:	4698      	mov	r8, r3
 8000ab6:	030c      	lsls	r4, r1, #12
 8000ab8:	004b      	lsls	r3, r1, #1
 8000aba:	0006      	movs	r6, r0
 8000abc:	4692      	mov	sl, r2
 8000abe:	b087      	sub	sp, #28
 8000ac0:	0b24      	lsrs	r4, r4, #12
 8000ac2:	0d5b      	lsrs	r3, r3, #21
 8000ac4:	0fcf      	lsrs	r7, r1, #31
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d100      	bne.n	8000acc <__aeabi_dmul+0x24>
 8000aca:	e15c      	b.n	8000d86 <__aeabi_dmul+0x2de>
 8000acc:	4ad9      	ldr	r2, [pc, #868]	; (8000e34 <__aeabi_dmul+0x38c>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dmul+0x2c>
 8000ad2:	e175      	b.n	8000dc0 <__aeabi_dmul+0x318>
 8000ad4:	0f42      	lsrs	r2, r0, #29
 8000ad6:	00e4      	lsls	r4, r4, #3
 8000ad8:	4314      	orrs	r4, r2
 8000ada:	2280      	movs	r2, #128	; 0x80
 8000adc:	0412      	lsls	r2, r2, #16
 8000ade:	4314      	orrs	r4, r2
 8000ae0:	4ad5      	ldr	r2, [pc, #852]	; (8000e38 <__aeabi_dmul+0x390>)
 8000ae2:	00c5      	lsls	r5, r0, #3
 8000ae4:	4694      	mov	ip, r2
 8000ae6:	4463      	add	r3, ip
 8000ae8:	9300      	str	r3, [sp, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	4699      	mov	r9, r3
 8000aee:	469b      	mov	fp, r3
 8000af0:	4643      	mov	r3, r8
 8000af2:	4642      	mov	r2, r8
 8000af4:	031e      	lsls	r6, r3, #12
 8000af6:	0fd2      	lsrs	r2, r2, #31
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4650      	mov	r0, sl
 8000afc:	4690      	mov	r8, r2
 8000afe:	0b36      	lsrs	r6, r6, #12
 8000b00:	0d5b      	lsrs	r3, r3, #21
 8000b02:	d100      	bne.n	8000b06 <__aeabi_dmul+0x5e>
 8000b04:	e120      	b.n	8000d48 <__aeabi_dmul+0x2a0>
 8000b06:	4acb      	ldr	r2, [pc, #812]	; (8000e34 <__aeabi_dmul+0x38c>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dmul+0x66>
 8000b0c:	e162      	b.n	8000dd4 <__aeabi_dmul+0x32c>
 8000b0e:	49ca      	ldr	r1, [pc, #808]	; (8000e38 <__aeabi_dmul+0x390>)
 8000b10:	0f42      	lsrs	r2, r0, #29
 8000b12:	468c      	mov	ip, r1
 8000b14:	9900      	ldr	r1, [sp, #0]
 8000b16:	4463      	add	r3, ip
 8000b18:	00f6      	lsls	r6, r6, #3
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	4316      	orrs	r6, r2
 8000b1e:	2280      	movs	r2, #128	; 0x80
 8000b20:	449c      	add	ip, r3
 8000b22:	0412      	lsls	r2, r2, #16
 8000b24:	4663      	mov	r3, ip
 8000b26:	4316      	orrs	r6, r2
 8000b28:	00c2      	lsls	r2, r0, #3
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	9900      	ldr	r1, [sp, #0]
 8000b30:	4643      	mov	r3, r8
 8000b32:	3101      	adds	r1, #1
 8000b34:	468c      	mov	ip, r1
 8000b36:	4649      	mov	r1, r9
 8000b38:	407b      	eors	r3, r7
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	290f      	cmp	r1, #15
 8000b3e:	d826      	bhi.n	8000b8e <__aeabi_dmul+0xe6>
 8000b40:	4bbe      	ldr	r3, [pc, #760]	; (8000e3c <__aeabi_dmul+0x394>)
 8000b42:	0089      	lsls	r1, r1, #2
 8000b44:	5859      	ldr	r1, [r3, r1]
 8000b46:	468f      	mov	pc, r1
 8000b48:	4643      	mov	r3, r8
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	0034      	movs	r4, r6
 8000b4e:	0015      	movs	r5, r2
 8000b50:	4683      	mov	fp, r0
 8000b52:	465b      	mov	r3, fp
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	d016      	beq.n	8000b86 <__aeabi_dmul+0xde>
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_dmul+0xb6>
 8000b5c:	e203      	b.n	8000f66 <__aeabi_dmul+0x4be>
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d000      	beq.n	8000b64 <__aeabi_dmul+0xbc>
 8000b62:	e0cd      	b.n	8000d00 <__aeabi_dmul+0x258>
 8000b64:	2200      	movs	r2, #0
 8000b66:	2400      	movs	r4, #0
 8000b68:	2500      	movs	r5, #0
 8000b6a:	9b01      	ldr	r3, [sp, #4]
 8000b6c:	0512      	lsls	r2, r2, #20
 8000b6e:	4322      	orrs	r2, r4
 8000b70:	07db      	lsls	r3, r3, #31
 8000b72:	431a      	orrs	r2, r3
 8000b74:	0028      	movs	r0, r5
 8000b76:	0011      	movs	r1, r2
 8000b78:	b007      	add	sp, #28
 8000b7a:	bcf0      	pop	{r4, r5, r6, r7}
 8000b7c:	46bb      	mov	fp, r7
 8000b7e:	46b2      	mov	sl, r6
 8000b80:	46a9      	mov	r9, r5
 8000b82:	46a0      	mov	r8, r4
 8000b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b86:	2400      	movs	r4, #0
 8000b88:	2500      	movs	r5, #0
 8000b8a:	4aaa      	ldr	r2, [pc, #680]	; (8000e34 <__aeabi_dmul+0x38c>)
 8000b8c:	e7ed      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000b8e:	0c28      	lsrs	r0, r5, #16
 8000b90:	042d      	lsls	r5, r5, #16
 8000b92:	0c2d      	lsrs	r5, r5, #16
 8000b94:	002b      	movs	r3, r5
 8000b96:	0c11      	lsrs	r1, r2, #16
 8000b98:	0412      	lsls	r2, r2, #16
 8000b9a:	0c12      	lsrs	r2, r2, #16
 8000b9c:	4353      	muls	r3, r2
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	002f      	movs	r7, r5
 8000ba4:	4343      	muls	r3, r0
 8000ba6:	4699      	mov	r9, r3
 8000ba8:	434f      	muls	r7, r1
 8000baa:	444f      	add	r7, r9
 8000bac:	46bb      	mov	fp, r7
 8000bae:	4647      	mov	r7, r8
 8000bb0:	000b      	movs	r3, r1
 8000bb2:	0c3f      	lsrs	r7, r7, #16
 8000bb4:	46ba      	mov	sl, r7
 8000bb6:	4343      	muls	r3, r0
 8000bb8:	44da      	add	sl, fp
 8000bba:	9302      	str	r3, [sp, #8]
 8000bbc:	45d1      	cmp	r9, sl
 8000bbe:	d904      	bls.n	8000bca <__aeabi_dmul+0x122>
 8000bc0:	2780      	movs	r7, #128	; 0x80
 8000bc2:	027f      	lsls	r7, r7, #9
 8000bc4:	46b9      	mov	r9, r7
 8000bc6:	444b      	add	r3, r9
 8000bc8:	9302      	str	r3, [sp, #8]
 8000bca:	4653      	mov	r3, sl
 8000bcc:	0c1b      	lsrs	r3, r3, #16
 8000bce:	469b      	mov	fp, r3
 8000bd0:	4653      	mov	r3, sl
 8000bd2:	041f      	lsls	r7, r3, #16
 8000bd4:	4643      	mov	r3, r8
 8000bd6:	041b      	lsls	r3, r3, #16
 8000bd8:	0c1b      	lsrs	r3, r3, #16
 8000bda:	4698      	mov	r8, r3
 8000bdc:	003b      	movs	r3, r7
 8000bde:	4443      	add	r3, r8
 8000be0:	9304      	str	r3, [sp, #16]
 8000be2:	0c33      	lsrs	r3, r6, #16
 8000be4:	0436      	lsls	r6, r6, #16
 8000be6:	0c36      	lsrs	r6, r6, #16
 8000be8:	4698      	mov	r8, r3
 8000bea:	0033      	movs	r3, r6
 8000bec:	4343      	muls	r3, r0
 8000bee:	4699      	mov	r9, r3
 8000bf0:	4643      	mov	r3, r8
 8000bf2:	4343      	muls	r3, r0
 8000bf4:	002f      	movs	r7, r5
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	4643      	mov	r3, r8
 8000bfa:	4377      	muls	r7, r6
 8000bfc:	435d      	muls	r5, r3
 8000bfe:	0c38      	lsrs	r0, r7, #16
 8000c00:	444d      	add	r5, r9
 8000c02:	1945      	adds	r5, r0, r5
 8000c04:	45a9      	cmp	r9, r5
 8000c06:	d903      	bls.n	8000c10 <__aeabi_dmul+0x168>
 8000c08:	2380      	movs	r3, #128	; 0x80
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	4699      	mov	r9, r3
 8000c0e:	44ca      	add	sl, r9
 8000c10:	043f      	lsls	r7, r7, #16
 8000c12:	0c28      	lsrs	r0, r5, #16
 8000c14:	0c3f      	lsrs	r7, r7, #16
 8000c16:	042d      	lsls	r5, r5, #16
 8000c18:	19ed      	adds	r5, r5, r7
 8000c1a:	0c27      	lsrs	r7, r4, #16
 8000c1c:	0424      	lsls	r4, r4, #16
 8000c1e:	0c24      	lsrs	r4, r4, #16
 8000c20:	0003      	movs	r3, r0
 8000c22:	0020      	movs	r0, r4
 8000c24:	4350      	muls	r0, r2
 8000c26:	437a      	muls	r2, r7
 8000c28:	4691      	mov	r9, r2
 8000c2a:	003a      	movs	r2, r7
 8000c2c:	4453      	add	r3, sl
 8000c2e:	9305      	str	r3, [sp, #20]
 8000c30:	0c03      	lsrs	r3, r0, #16
 8000c32:	469a      	mov	sl, r3
 8000c34:	434a      	muls	r2, r1
 8000c36:	4361      	muls	r1, r4
 8000c38:	4449      	add	r1, r9
 8000c3a:	4451      	add	r1, sl
 8000c3c:	44ab      	add	fp, r5
 8000c3e:	4589      	cmp	r9, r1
 8000c40:	d903      	bls.n	8000c4a <__aeabi_dmul+0x1a2>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	025b      	lsls	r3, r3, #9
 8000c46:	4699      	mov	r9, r3
 8000c48:	444a      	add	r2, r9
 8000c4a:	0400      	lsls	r0, r0, #16
 8000c4c:	0c0b      	lsrs	r3, r1, #16
 8000c4e:	0c00      	lsrs	r0, r0, #16
 8000c50:	0409      	lsls	r1, r1, #16
 8000c52:	1809      	adds	r1, r1, r0
 8000c54:	0020      	movs	r0, r4
 8000c56:	4699      	mov	r9, r3
 8000c58:	4643      	mov	r3, r8
 8000c5a:	4370      	muls	r0, r6
 8000c5c:	435c      	muls	r4, r3
 8000c5e:	437e      	muls	r6, r7
 8000c60:	435f      	muls	r7, r3
 8000c62:	0c03      	lsrs	r3, r0, #16
 8000c64:	4698      	mov	r8, r3
 8000c66:	19a4      	adds	r4, r4, r6
 8000c68:	4444      	add	r4, r8
 8000c6a:	444a      	add	r2, r9
 8000c6c:	9703      	str	r7, [sp, #12]
 8000c6e:	42a6      	cmp	r6, r4
 8000c70:	d904      	bls.n	8000c7c <__aeabi_dmul+0x1d4>
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	025b      	lsls	r3, r3, #9
 8000c76:	4698      	mov	r8, r3
 8000c78:	4447      	add	r7, r8
 8000c7a:	9703      	str	r7, [sp, #12]
 8000c7c:	0423      	lsls	r3, r4, #16
 8000c7e:	9e02      	ldr	r6, [sp, #8]
 8000c80:	469a      	mov	sl, r3
 8000c82:	9b05      	ldr	r3, [sp, #20]
 8000c84:	445e      	add	r6, fp
 8000c86:	4698      	mov	r8, r3
 8000c88:	42ae      	cmp	r6, r5
 8000c8a:	41ad      	sbcs	r5, r5
 8000c8c:	1876      	adds	r6, r6, r1
 8000c8e:	428e      	cmp	r6, r1
 8000c90:	4189      	sbcs	r1, r1
 8000c92:	0400      	lsls	r0, r0, #16
 8000c94:	0c00      	lsrs	r0, r0, #16
 8000c96:	4450      	add	r0, sl
 8000c98:	4440      	add	r0, r8
 8000c9a:	426d      	negs	r5, r5
 8000c9c:	1947      	adds	r7, r0, r5
 8000c9e:	46b8      	mov	r8, r7
 8000ca0:	4693      	mov	fp, r2
 8000ca2:	4249      	negs	r1, r1
 8000ca4:	4689      	mov	r9, r1
 8000ca6:	44c3      	add	fp, r8
 8000ca8:	44d9      	add	r9, fp
 8000caa:	4298      	cmp	r0, r3
 8000cac:	4180      	sbcs	r0, r0
 8000cae:	45a8      	cmp	r8, r5
 8000cb0:	41ad      	sbcs	r5, r5
 8000cb2:	4593      	cmp	fp, r2
 8000cb4:	4192      	sbcs	r2, r2
 8000cb6:	4589      	cmp	r9, r1
 8000cb8:	4189      	sbcs	r1, r1
 8000cba:	426d      	negs	r5, r5
 8000cbc:	4240      	negs	r0, r0
 8000cbe:	4328      	orrs	r0, r5
 8000cc0:	0c24      	lsrs	r4, r4, #16
 8000cc2:	4252      	negs	r2, r2
 8000cc4:	4249      	negs	r1, r1
 8000cc6:	430a      	orrs	r2, r1
 8000cc8:	9b03      	ldr	r3, [sp, #12]
 8000cca:	1900      	adds	r0, r0, r4
 8000ccc:	1880      	adds	r0, r0, r2
 8000cce:	18c7      	adds	r7, r0, r3
 8000cd0:	464b      	mov	r3, r9
 8000cd2:	0ddc      	lsrs	r4, r3, #23
 8000cd4:	9b04      	ldr	r3, [sp, #16]
 8000cd6:	0275      	lsls	r5, r6, #9
 8000cd8:	431d      	orrs	r5, r3
 8000cda:	1e6a      	subs	r2, r5, #1
 8000cdc:	4195      	sbcs	r5, r2
 8000cde:	464b      	mov	r3, r9
 8000ce0:	0df6      	lsrs	r6, r6, #23
 8000ce2:	027f      	lsls	r7, r7, #9
 8000ce4:	4335      	orrs	r5, r6
 8000ce6:	025a      	lsls	r2, r3, #9
 8000ce8:	433c      	orrs	r4, r7
 8000cea:	4315      	orrs	r5, r2
 8000cec:	01fb      	lsls	r3, r7, #7
 8000cee:	d400      	bmi.n	8000cf2 <__aeabi_dmul+0x24a>
 8000cf0:	e11c      	b.n	8000f2c <__aeabi_dmul+0x484>
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	086a      	lsrs	r2, r5, #1
 8000cf6:	400d      	ands	r5, r1
 8000cf8:	4315      	orrs	r5, r2
 8000cfa:	07e2      	lsls	r2, r4, #31
 8000cfc:	4315      	orrs	r5, r2
 8000cfe:	0864      	lsrs	r4, r4, #1
 8000d00:	494f      	ldr	r1, [pc, #316]	; (8000e40 <__aeabi_dmul+0x398>)
 8000d02:	4461      	add	r1, ip
 8000d04:	2900      	cmp	r1, #0
 8000d06:	dc00      	bgt.n	8000d0a <__aeabi_dmul+0x262>
 8000d08:	e0b0      	b.n	8000e6c <__aeabi_dmul+0x3c4>
 8000d0a:	076b      	lsls	r3, r5, #29
 8000d0c:	d009      	beq.n	8000d22 <__aeabi_dmul+0x27a>
 8000d0e:	220f      	movs	r2, #15
 8000d10:	402a      	ands	r2, r5
 8000d12:	2a04      	cmp	r2, #4
 8000d14:	d005      	beq.n	8000d22 <__aeabi_dmul+0x27a>
 8000d16:	1d2a      	adds	r2, r5, #4
 8000d18:	42aa      	cmp	r2, r5
 8000d1a:	41ad      	sbcs	r5, r5
 8000d1c:	426d      	negs	r5, r5
 8000d1e:	1964      	adds	r4, r4, r5
 8000d20:	0015      	movs	r5, r2
 8000d22:	01e3      	lsls	r3, r4, #7
 8000d24:	d504      	bpl.n	8000d30 <__aeabi_dmul+0x288>
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <__aeabi_dmul+0x39c>)
 8000d2a:	00c9      	lsls	r1, r1, #3
 8000d2c:	4014      	ands	r4, r2
 8000d2e:	4461      	add	r1, ip
 8000d30:	4a45      	ldr	r2, [pc, #276]	; (8000e48 <__aeabi_dmul+0x3a0>)
 8000d32:	4291      	cmp	r1, r2
 8000d34:	dd00      	ble.n	8000d38 <__aeabi_dmul+0x290>
 8000d36:	e726      	b.n	8000b86 <__aeabi_dmul+0xde>
 8000d38:	0762      	lsls	r2, r4, #29
 8000d3a:	08ed      	lsrs	r5, r5, #3
 8000d3c:	0264      	lsls	r4, r4, #9
 8000d3e:	0549      	lsls	r1, r1, #21
 8000d40:	4315      	orrs	r5, r2
 8000d42:	0b24      	lsrs	r4, r4, #12
 8000d44:	0d4a      	lsrs	r2, r1, #21
 8000d46:	e710      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000d48:	4652      	mov	r2, sl
 8000d4a:	4332      	orrs	r2, r6
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dmul+0x2a8>
 8000d4e:	e07f      	b.n	8000e50 <__aeabi_dmul+0x3a8>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dmul+0x2ae>
 8000d54:	e0dc      	b.n	8000f10 <__aeabi_dmul+0x468>
 8000d56:	0030      	movs	r0, r6
 8000d58:	f000 fa48 	bl	80011ec <__clzsi2>
 8000d5c:	0002      	movs	r2, r0
 8000d5e:	3a0b      	subs	r2, #11
 8000d60:	231d      	movs	r3, #29
 8000d62:	0001      	movs	r1, r0
 8000d64:	1a9b      	subs	r3, r3, r2
 8000d66:	4652      	mov	r2, sl
 8000d68:	3908      	subs	r1, #8
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	408e      	lsls	r6, r1
 8000d6e:	4316      	orrs	r6, r2
 8000d70:	4652      	mov	r2, sl
 8000d72:	408a      	lsls	r2, r1
 8000d74:	9b00      	ldr	r3, [sp, #0]
 8000d76:	4935      	ldr	r1, [pc, #212]	; (8000e4c <__aeabi_dmul+0x3a4>)
 8000d78:	1a18      	subs	r0, r3, r0
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	468c      	mov	ip, r1
 8000d7e:	4463      	add	r3, ip
 8000d80:	2000      	movs	r0, #0
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	e6d3      	b.n	8000b2e <__aeabi_dmul+0x86>
 8000d86:	0025      	movs	r5, r4
 8000d88:	4305      	orrs	r5, r0
 8000d8a:	d04a      	beq.n	8000e22 <__aeabi_dmul+0x37a>
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d100      	bne.n	8000d92 <__aeabi_dmul+0x2ea>
 8000d90:	e0b0      	b.n	8000ef4 <__aeabi_dmul+0x44c>
 8000d92:	0020      	movs	r0, r4
 8000d94:	f000 fa2a 	bl	80011ec <__clzsi2>
 8000d98:	0001      	movs	r1, r0
 8000d9a:	0002      	movs	r2, r0
 8000d9c:	390b      	subs	r1, #11
 8000d9e:	231d      	movs	r3, #29
 8000da0:	0010      	movs	r0, r2
 8000da2:	1a5b      	subs	r3, r3, r1
 8000da4:	0031      	movs	r1, r6
 8000da6:	0035      	movs	r5, r6
 8000da8:	3808      	subs	r0, #8
 8000daa:	4084      	lsls	r4, r0
 8000dac:	40d9      	lsrs	r1, r3
 8000dae:	4085      	lsls	r5, r0
 8000db0:	430c      	orrs	r4, r1
 8000db2:	4826      	ldr	r0, [pc, #152]	; (8000e4c <__aeabi_dmul+0x3a4>)
 8000db4:	1a83      	subs	r3, r0, r2
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2300      	movs	r3, #0
 8000dba:	4699      	mov	r9, r3
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	e697      	b.n	8000af0 <__aeabi_dmul+0x48>
 8000dc0:	0005      	movs	r5, r0
 8000dc2:	4325      	orrs	r5, r4
 8000dc4:	d126      	bne.n	8000e14 <__aeabi_dmul+0x36c>
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	9300      	str	r3, [sp, #0]
 8000dca:	2302      	movs	r3, #2
 8000dcc:	2400      	movs	r4, #0
 8000dce:	4691      	mov	r9, r2
 8000dd0:	469b      	mov	fp, r3
 8000dd2:	e68d      	b.n	8000af0 <__aeabi_dmul+0x48>
 8000dd4:	4652      	mov	r2, sl
 8000dd6:	9b00      	ldr	r3, [sp, #0]
 8000dd8:	4332      	orrs	r2, r6
 8000dda:	d110      	bne.n	8000dfe <__aeabi_dmul+0x356>
 8000ddc:	4915      	ldr	r1, [pc, #84]	; (8000e34 <__aeabi_dmul+0x38c>)
 8000dde:	2600      	movs	r6, #0
 8000de0:	468c      	mov	ip, r1
 8000de2:	4463      	add	r3, ip
 8000de4:	4649      	mov	r1, r9
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2302      	movs	r3, #2
 8000dea:	4319      	orrs	r1, r3
 8000dec:	4689      	mov	r9, r1
 8000dee:	2002      	movs	r0, #2
 8000df0:	e69d      	b.n	8000b2e <__aeabi_dmul+0x86>
 8000df2:	465b      	mov	r3, fp
 8000df4:	9701      	str	r7, [sp, #4]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d000      	beq.n	8000dfc <__aeabi_dmul+0x354>
 8000dfa:	e6ad      	b.n	8000b58 <__aeabi_dmul+0xb0>
 8000dfc:	e6c3      	b.n	8000b86 <__aeabi_dmul+0xde>
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <__aeabi_dmul+0x38c>)
 8000e00:	2003      	movs	r0, #3
 8000e02:	4694      	mov	ip, r2
 8000e04:	4463      	add	r3, ip
 8000e06:	464a      	mov	r2, r9
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	4691      	mov	r9, r2
 8000e10:	4652      	mov	r2, sl
 8000e12:	e68c      	b.n	8000b2e <__aeabi_dmul+0x86>
 8000e14:	220c      	movs	r2, #12
 8000e16:	9300      	str	r3, [sp, #0]
 8000e18:	2303      	movs	r3, #3
 8000e1a:	0005      	movs	r5, r0
 8000e1c:	4691      	mov	r9, r2
 8000e1e:	469b      	mov	fp, r3
 8000e20:	e666      	b.n	8000af0 <__aeabi_dmul+0x48>
 8000e22:	2304      	movs	r3, #4
 8000e24:	4699      	mov	r9, r3
 8000e26:	2300      	movs	r3, #0
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	2400      	movs	r4, #0
 8000e2e:	469b      	mov	fp, r3
 8000e30:	e65e      	b.n	8000af0 <__aeabi_dmul+0x48>
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	000007ff 	.word	0x000007ff
 8000e38:	fffffc01 	.word	0xfffffc01
 8000e3c:	0800302c 	.word	0x0800302c
 8000e40:	000003ff 	.word	0x000003ff
 8000e44:	feffffff 	.word	0xfeffffff
 8000e48:	000007fe 	.word	0x000007fe
 8000e4c:	fffffc0d 	.word	0xfffffc0d
 8000e50:	4649      	mov	r1, r9
 8000e52:	2301      	movs	r3, #1
 8000e54:	4319      	orrs	r1, r3
 8000e56:	4689      	mov	r9, r1
 8000e58:	2600      	movs	r6, #0
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	e667      	b.n	8000b2e <__aeabi_dmul+0x86>
 8000e5e:	2300      	movs	r3, #0
 8000e60:	2480      	movs	r4, #128	; 0x80
 8000e62:	2500      	movs	r5, #0
 8000e64:	4a43      	ldr	r2, [pc, #268]	; (8000f74 <__aeabi_dmul+0x4cc>)
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	0324      	lsls	r4, r4, #12
 8000e6a:	e67e      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	1a40      	subs	r0, r0, r1
 8000e70:	2838      	cmp	r0, #56	; 0x38
 8000e72:	dd00      	ble.n	8000e76 <__aeabi_dmul+0x3ce>
 8000e74:	e676      	b.n	8000b64 <__aeabi_dmul+0xbc>
 8000e76:	281f      	cmp	r0, #31
 8000e78:	dd5b      	ble.n	8000f32 <__aeabi_dmul+0x48a>
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	0023      	movs	r3, r4
 8000e7e:	4252      	negs	r2, r2
 8000e80:	1a51      	subs	r1, r2, r1
 8000e82:	40cb      	lsrs	r3, r1
 8000e84:	0019      	movs	r1, r3
 8000e86:	2820      	cmp	r0, #32
 8000e88:	d003      	beq.n	8000e92 <__aeabi_dmul+0x3ea>
 8000e8a:	4a3b      	ldr	r2, [pc, #236]	; (8000f78 <__aeabi_dmul+0x4d0>)
 8000e8c:	4462      	add	r2, ip
 8000e8e:	4094      	lsls	r4, r2
 8000e90:	4325      	orrs	r5, r4
 8000e92:	1e6a      	subs	r2, r5, #1
 8000e94:	4195      	sbcs	r5, r2
 8000e96:	002a      	movs	r2, r5
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	000d      	movs	r5, r1
 8000e9e:	2400      	movs	r4, #0
 8000ea0:	4015      	ands	r5, r2
 8000ea2:	4211      	tst	r1, r2
 8000ea4:	d05b      	beq.n	8000f5e <__aeabi_dmul+0x4b6>
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	2400      	movs	r4, #0
 8000eaa:	4011      	ands	r1, r2
 8000eac:	2904      	cmp	r1, #4
 8000eae:	d053      	beq.n	8000f58 <__aeabi_dmul+0x4b0>
 8000eb0:	1d11      	adds	r1, r2, #4
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	4192      	sbcs	r2, r2
 8000eb6:	4252      	negs	r2, r2
 8000eb8:	18a4      	adds	r4, r4, r2
 8000eba:	000a      	movs	r2, r1
 8000ebc:	0223      	lsls	r3, r4, #8
 8000ebe:	d54b      	bpl.n	8000f58 <__aeabi_dmul+0x4b0>
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2500      	movs	r5, #0
 8000ec6:	e650      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000ec8:	2380      	movs	r3, #128	; 0x80
 8000eca:	031b      	lsls	r3, r3, #12
 8000ecc:	421c      	tst	r4, r3
 8000ece:	d009      	beq.n	8000ee4 <__aeabi_dmul+0x43c>
 8000ed0:	421e      	tst	r6, r3
 8000ed2:	d107      	bne.n	8000ee4 <__aeabi_dmul+0x43c>
 8000ed4:	4333      	orrs	r3, r6
 8000ed6:	031c      	lsls	r4, r3, #12
 8000ed8:	4643      	mov	r3, r8
 8000eda:	0015      	movs	r5, r2
 8000edc:	0b24      	lsrs	r4, r4, #12
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <__aeabi_dmul+0x4cc>)
 8000ee0:	9301      	str	r3, [sp, #4]
 8000ee2:	e642      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0312      	lsls	r2, r2, #12
 8000ee8:	4314      	orrs	r4, r2
 8000eea:	0324      	lsls	r4, r4, #12
 8000eec:	4a21      	ldr	r2, [pc, #132]	; (8000f74 <__aeabi_dmul+0x4cc>)
 8000eee:	0b24      	lsrs	r4, r4, #12
 8000ef0:	9701      	str	r7, [sp, #4]
 8000ef2:	e63a      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000ef4:	f000 f97a 	bl	80011ec <__clzsi2>
 8000ef8:	0001      	movs	r1, r0
 8000efa:	0002      	movs	r2, r0
 8000efc:	3115      	adds	r1, #21
 8000efe:	3220      	adds	r2, #32
 8000f00:	291c      	cmp	r1, #28
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_dmul+0x45e>
 8000f04:	e74b      	b.n	8000d9e <__aeabi_dmul+0x2f6>
 8000f06:	0034      	movs	r4, r6
 8000f08:	3808      	subs	r0, #8
 8000f0a:	2500      	movs	r5, #0
 8000f0c:	4084      	lsls	r4, r0
 8000f0e:	e750      	b.n	8000db2 <__aeabi_dmul+0x30a>
 8000f10:	f000 f96c 	bl	80011ec <__clzsi2>
 8000f14:	0003      	movs	r3, r0
 8000f16:	001a      	movs	r2, r3
 8000f18:	3215      	adds	r2, #21
 8000f1a:	3020      	adds	r0, #32
 8000f1c:	2a1c      	cmp	r2, #28
 8000f1e:	dc00      	bgt.n	8000f22 <__aeabi_dmul+0x47a>
 8000f20:	e71e      	b.n	8000d60 <__aeabi_dmul+0x2b8>
 8000f22:	4656      	mov	r6, sl
 8000f24:	3b08      	subs	r3, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	409e      	lsls	r6, r3
 8000f2a:	e723      	b.n	8000d74 <__aeabi_dmul+0x2cc>
 8000f2c:	9b00      	ldr	r3, [sp, #0]
 8000f2e:	469c      	mov	ip, r3
 8000f30:	e6e6      	b.n	8000d00 <__aeabi_dmul+0x258>
 8000f32:	4912      	ldr	r1, [pc, #72]	; (8000f7c <__aeabi_dmul+0x4d4>)
 8000f34:	0022      	movs	r2, r4
 8000f36:	4461      	add	r1, ip
 8000f38:	002e      	movs	r6, r5
 8000f3a:	408d      	lsls	r5, r1
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	40c6      	lsrs	r6, r0
 8000f40:	1e69      	subs	r1, r5, #1
 8000f42:	418d      	sbcs	r5, r1
 8000f44:	4332      	orrs	r2, r6
 8000f46:	432a      	orrs	r2, r5
 8000f48:	40c4      	lsrs	r4, r0
 8000f4a:	0753      	lsls	r3, r2, #29
 8000f4c:	d0b6      	beq.n	8000ebc <__aeabi_dmul+0x414>
 8000f4e:	210f      	movs	r1, #15
 8000f50:	4011      	ands	r1, r2
 8000f52:	2904      	cmp	r1, #4
 8000f54:	d1ac      	bne.n	8000eb0 <__aeabi_dmul+0x408>
 8000f56:	e7b1      	b.n	8000ebc <__aeabi_dmul+0x414>
 8000f58:	0765      	lsls	r5, r4, #29
 8000f5a:	0264      	lsls	r4, r4, #9
 8000f5c:	0b24      	lsrs	r4, r4, #12
 8000f5e:	08d2      	lsrs	r2, r2, #3
 8000f60:	4315      	orrs	r5, r2
 8000f62:	2200      	movs	r2, #0
 8000f64:	e601      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	0312      	lsls	r2, r2, #12
 8000f6a:	4314      	orrs	r4, r2
 8000f6c:	0324      	lsls	r4, r4, #12
 8000f6e:	4a01      	ldr	r2, [pc, #4]	; (8000f74 <__aeabi_dmul+0x4cc>)
 8000f70:	0b24      	lsrs	r4, r4, #12
 8000f72:	e5fa      	b.n	8000b6a <__aeabi_dmul+0xc2>
 8000f74:	000007ff 	.word	0x000007ff
 8000f78:	0000043e 	.word	0x0000043e
 8000f7c:	0000041e 	.word	0x0000041e

08000f80 <__aeabi_d2iz>:
 8000f80:	000a      	movs	r2, r1
 8000f82:	b530      	push	{r4, r5, lr}
 8000f84:	4c13      	ldr	r4, [pc, #76]	; (8000fd4 <__aeabi_d2iz+0x54>)
 8000f86:	0053      	lsls	r3, r2, #1
 8000f88:	0309      	lsls	r1, r1, #12
 8000f8a:	0005      	movs	r5, r0
 8000f8c:	0b09      	lsrs	r1, r1, #12
 8000f8e:	2000      	movs	r0, #0
 8000f90:	0d5b      	lsrs	r3, r3, #21
 8000f92:	0fd2      	lsrs	r2, r2, #31
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	dd04      	ble.n	8000fa2 <__aeabi_d2iz+0x22>
 8000f98:	480f      	ldr	r0, [pc, #60]	; (8000fd8 <__aeabi_d2iz+0x58>)
 8000f9a:	4283      	cmp	r3, r0
 8000f9c:	dd02      	ble.n	8000fa4 <__aeabi_d2iz+0x24>
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <__aeabi_d2iz+0x5c>)
 8000fa0:	18d0      	adds	r0, r2, r3
 8000fa2:	bd30      	pop	{r4, r5, pc}
 8000fa4:	2080      	movs	r0, #128	; 0x80
 8000fa6:	0340      	lsls	r0, r0, #13
 8000fa8:	4301      	orrs	r1, r0
 8000faa:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <__aeabi_d2iz+0x60>)
 8000fac:	1ac0      	subs	r0, r0, r3
 8000fae:	281f      	cmp	r0, #31
 8000fb0:	dd08      	ble.n	8000fc4 <__aeabi_d2iz+0x44>
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <__aeabi_d2iz+0x64>)
 8000fb4:	1ac3      	subs	r3, r0, r3
 8000fb6:	40d9      	lsrs	r1, r3
 8000fb8:	000b      	movs	r3, r1
 8000fba:	4258      	negs	r0, r3
 8000fbc:	2a00      	cmp	r2, #0
 8000fbe:	d1f0      	bne.n	8000fa2 <__aeabi_d2iz+0x22>
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	e7ee      	b.n	8000fa2 <__aeabi_d2iz+0x22>
 8000fc4:	4c08      	ldr	r4, [pc, #32]	; (8000fe8 <__aeabi_d2iz+0x68>)
 8000fc6:	40c5      	lsrs	r5, r0
 8000fc8:	46a4      	mov	ip, r4
 8000fca:	4463      	add	r3, ip
 8000fcc:	4099      	lsls	r1, r3
 8000fce:	000b      	movs	r3, r1
 8000fd0:	432b      	orrs	r3, r5
 8000fd2:	e7f2      	b.n	8000fba <__aeabi_d2iz+0x3a>
 8000fd4:	000003fe 	.word	0x000003fe
 8000fd8:	0000041d 	.word	0x0000041d
 8000fdc:	7fffffff 	.word	0x7fffffff
 8000fe0:	00000433 	.word	0x00000433
 8000fe4:	00000413 	.word	0x00000413
 8000fe8:	fffffbed 	.word	0xfffffbed

08000fec <__aeabi_i2d>:
 8000fec:	b570      	push	{r4, r5, r6, lr}
 8000fee:	2800      	cmp	r0, #0
 8000ff0:	d016      	beq.n	8001020 <__aeabi_i2d+0x34>
 8000ff2:	17c3      	asrs	r3, r0, #31
 8000ff4:	18c5      	adds	r5, r0, r3
 8000ff6:	405d      	eors	r5, r3
 8000ff8:	0fc4      	lsrs	r4, r0, #31
 8000ffa:	0028      	movs	r0, r5
 8000ffc:	f000 f8f6 	bl	80011ec <__clzsi2>
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <__aeabi_i2d+0x5c>)
 8001002:	1a12      	subs	r2, r2, r0
 8001004:	280a      	cmp	r0, #10
 8001006:	dc16      	bgt.n	8001036 <__aeabi_i2d+0x4a>
 8001008:	0003      	movs	r3, r0
 800100a:	002e      	movs	r6, r5
 800100c:	3315      	adds	r3, #21
 800100e:	409e      	lsls	r6, r3
 8001010:	230b      	movs	r3, #11
 8001012:	1a18      	subs	r0, r3, r0
 8001014:	40c5      	lsrs	r5, r0
 8001016:	0552      	lsls	r2, r2, #21
 8001018:	032d      	lsls	r5, r5, #12
 800101a:	0b2d      	lsrs	r5, r5, #12
 800101c:	0d53      	lsrs	r3, r2, #21
 800101e:	e003      	b.n	8001028 <__aeabi_i2d+0x3c>
 8001020:	2400      	movs	r4, #0
 8001022:	2300      	movs	r3, #0
 8001024:	2500      	movs	r5, #0
 8001026:	2600      	movs	r6, #0
 8001028:	051b      	lsls	r3, r3, #20
 800102a:	432b      	orrs	r3, r5
 800102c:	07e4      	lsls	r4, r4, #31
 800102e:	4323      	orrs	r3, r4
 8001030:	0030      	movs	r0, r6
 8001032:	0019      	movs	r1, r3
 8001034:	bd70      	pop	{r4, r5, r6, pc}
 8001036:	380b      	subs	r0, #11
 8001038:	4085      	lsls	r5, r0
 800103a:	0552      	lsls	r2, r2, #21
 800103c:	032d      	lsls	r5, r5, #12
 800103e:	2600      	movs	r6, #0
 8001040:	0b2d      	lsrs	r5, r5, #12
 8001042:	0d53      	lsrs	r3, r2, #21
 8001044:	e7f0      	b.n	8001028 <__aeabi_i2d+0x3c>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	0000041e 	.word	0x0000041e

0800104c <__aeabi_f2d>:
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	0043      	lsls	r3, r0, #1
 8001050:	0246      	lsls	r6, r0, #9
 8001052:	0fc4      	lsrs	r4, r0, #31
 8001054:	20fe      	movs	r0, #254	; 0xfe
 8001056:	0e1b      	lsrs	r3, r3, #24
 8001058:	1c59      	adds	r1, r3, #1
 800105a:	0a75      	lsrs	r5, r6, #9
 800105c:	4208      	tst	r0, r1
 800105e:	d00c      	beq.n	800107a <__aeabi_f2d+0x2e>
 8001060:	22e0      	movs	r2, #224	; 0xe0
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	4694      	mov	ip, r2
 8001066:	076d      	lsls	r5, r5, #29
 8001068:	0b36      	lsrs	r6, r6, #12
 800106a:	4463      	add	r3, ip
 800106c:	051b      	lsls	r3, r3, #20
 800106e:	4333      	orrs	r3, r6
 8001070:	07e4      	lsls	r4, r4, #31
 8001072:	4323      	orrs	r3, r4
 8001074:	0028      	movs	r0, r5
 8001076:	0019      	movs	r1, r3
 8001078:	bd70      	pop	{r4, r5, r6, pc}
 800107a:	2b00      	cmp	r3, #0
 800107c:	d114      	bne.n	80010a8 <__aeabi_f2d+0x5c>
 800107e:	2d00      	cmp	r5, #0
 8001080:	d01b      	beq.n	80010ba <__aeabi_f2d+0x6e>
 8001082:	0028      	movs	r0, r5
 8001084:	f000 f8b2 	bl	80011ec <__clzsi2>
 8001088:	280a      	cmp	r0, #10
 800108a:	dc1c      	bgt.n	80010c6 <__aeabi_f2d+0x7a>
 800108c:	230b      	movs	r3, #11
 800108e:	002e      	movs	r6, r5
 8001090:	1a1b      	subs	r3, r3, r0
 8001092:	40de      	lsrs	r6, r3
 8001094:	0003      	movs	r3, r0
 8001096:	3315      	adds	r3, #21
 8001098:	409d      	lsls	r5, r3
 800109a:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <__aeabi_f2d+0x88>)
 800109c:	0336      	lsls	r6, r6, #12
 800109e:	1a12      	subs	r2, r2, r0
 80010a0:	0552      	lsls	r2, r2, #21
 80010a2:	0b36      	lsrs	r6, r6, #12
 80010a4:	0d53      	lsrs	r3, r2, #21
 80010a6:	e7e1      	b.n	800106c <__aeabi_f2d+0x20>
 80010a8:	2d00      	cmp	r5, #0
 80010aa:	d009      	beq.n	80010c0 <__aeabi_f2d+0x74>
 80010ac:	2280      	movs	r2, #128	; 0x80
 80010ae:	0b36      	lsrs	r6, r6, #12
 80010b0:	0312      	lsls	r2, r2, #12
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <__aeabi_f2d+0x8c>)
 80010b4:	076d      	lsls	r5, r5, #29
 80010b6:	4316      	orrs	r6, r2
 80010b8:	e7d8      	b.n	800106c <__aeabi_f2d+0x20>
 80010ba:	2300      	movs	r3, #0
 80010bc:	2600      	movs	r6, #0
 80010be:	e7d5      	b.n	800106c <__aeabi_f2d+0x20>
 80010c0:	2600      	movs	r6, #0
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <__aeabi_f2d+0x8c>)
 80010c4:	e7d2      	b.n	800106c <__aeabi_f2d+0x20>
 80010c6:	0003      	movs	r3, r0
 80010c8:	3b0b      	subs	r3, #11
 80010ca:	409d      	lsls	r5, r3
 80010cc:	002e      	movs	r6, r5
 80010ce:	2500      	movs	r5, #0
 80010d0:	e7e3      	b.n	800109a <__aeabi_f2d+0x4e>
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	00000389 	.word	0x00000389
 80010d8:	000007ff 	.word	0x000007ff

080010dc <__aeabi_d2f>:
 80010dc:	0002      	movs	r2, r0
 80010de:	004b      	lsls	r3, r1, #1
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	0d5b      	lsrs	r3, r3, #21
 80010e4:	030c      	lsls	r4, r1, #12
 80010e6:	4e3d      	ldr	r6, [pc, #244]	; (80011dc <__aeabi_d2f+0x100>)
 80010e8:	0a64      	lsrs	r4, r4, #9
 80010ea:	0f40      	lsrs	r0, r0, #29
 80010ec:	1c5f      	adds	r7, r3, #1
 80010ee:	0fc9      	lsrs	r1, r1, #31
 80010f0:	4304      	orrs	r4, r0
 80010f2:	00d5      	lsls	r5, r2, #3
 80010f4:	4237      	tst	r7, r6
 80010f6:	d00a      	beq.n	800110e <__aeabi_d2f+0x32>
 80010f8:	4839      	ldr	r0, [pc, #228]	; (80011e0 <__aeabi_d2f+0x104>)
 80010fa:	181e      	adds	r6, r3, r0
 80010fc:	2efe      	cmp	r6, #254	; 0xfe
 80010fe:	dd16      	ble.n	800112e <__aeabi_d2f+0x52>
 8001100:	20ff      	movs	r0, #255	; 0xff
 8001102:	2400      	movs	r4, #0
 8001104:	05c0      	lsls	r0, r0, #23
 8001106:	4320      	orrs	r0, r4
 8001108:	07c9      	lsls	r1, r1, #31
 800110a:	4308      	orrs	r0, r1
 800110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <__aeabi_d2f+0x44>
 8001112:	432c      	orrs	r4, r5
 8001114:	d026      	beq.n	8001164 <__aeabi_d2f+0x88>
 8001116:	2205      	movs	r2, #5
 8001118:	0192      	lsls	r2, r2, #6
 800111a:	0a54      	lsrs	r4, r2, #9
 800111c:	b2d8      	uxtb	r0, r3
 800111e:	e7f1      	b.n	8001104 <__aeabi_d2f+0x28>
 8001120:	4325      	orrs	r5, r4
 8001122:	d0ed      	beq.n	8001100 <__aeabi_d2f+0x24>
 8001124:	2080      	movs	r0, #128	; 0x80
 8001126:	03c0      	lsls	r0, r0, #15
 8001128:	4304      	orrs	r4, r0
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	e7ea      	b.n	8001104 <__aeabi_d2f+0x28>
 800112e:	2e00      	cmp	r6, #0
 8001130:	dd1b      	ble.n	800116a <__aeabi_d2f+0x8e>
 8001132:	0192      	lsls	r2, r2, #6
 8001134:	1e53      	subs	r3, r2, #1
 8001136:	419a      	sbcs	r2, r3
 8001138:	00e4      	lsls	r4, r4, #3
 800113a:	0f6d      	lsrs	r5, r5, #29
 800113c:	4322      	orrs	r2, r4
 800113e:	432a      	orrs	r2, r5
 8001140:	0753      	lsls	r3, r2, #29
 8001142:	d048      	beq.n	80011d6 <__aeabi_d2f+0xfa>
 8001144:	230f      	movs	r3, #15
 8001146:	4013      	ands	r3, r2
 8001148:	2b04      	cmp	r3, #4
 800114a:	d000      	beq.n	800114e <__aeabi_d2f+0x72>
 800114c:	3204      	adds	r2, #4
 800114e:	2380      	movs	r3, #128	; 0x80
 8001150:	04db      	lsls	r3, r3, #19
 8001152:	4013      	ands	r3, r2
 8001154:	d03f      	beq.n	80011d6 <__aeabi_d2f+0xfa>
 8001156:	1c70      	adds	r0, r6, #1
 8001158:	2efe      	cmp	r6, #254	; 0xfe
 800115a:	d0d1      	beq.n	8001100 <__aeabi_d2f+0x24>
 800115c:	0192      	lsls	r2, r2, #6
 800115e:	0a54      	lsrs	r4, r2, #9
 8001160:	b2c0      	uxtb	r0, r0
 8001162:	e7cf      	b.n	8001104 <__aeabi_d2f+0x28>
 8001164:	2000      	movs	r0, #0
 8001166:	2400      	movs	r4, #0
 8001168:	e7cc      	b.n	8001104 <__aeabi_d2f+0x28>
 800116a:	0032      	movs	r2, r6
 800116c:	3217      	adds	r2, #23
 800116e:	db22      	blt.n	80011b6 <__aeabi_d2f+0xda>
 8001170:	2080      	movs	r0, #128	; 0x80
 8001172:	0400      	lsls	r0, r0, #16
 8001174:	4320      	orrs	r0, r4
 8001176:	241e      	movs	r4, #30
 8001178:	1ba4      	subs	r4, r4, r6
 800117a:	2c1f      	cmp	r4, #31
 800117c:	dd1d      	ble.n	80011ba <__aeabi_d2f+0xde>
 800117e:	2202      	movs	r2, #2
 8001180:	4252      	negs	r2, r2
 8001182:	1b96      	subs	r6, r2, r6
 8001184:	0002      	movs	r2, r0
 8001186:	40f2      	lsrs	r2, r6
 8001188:	0016      	movs	r6, r2
 800118a:	2c20      	cmp	r4, #32
 800118c:	d004      	beq.n	8001198 <__aeabi_d2f+0xbc>
 800118e:	4a15      	ldr	r2, [pc, #84]	; (80011e4 <__aeabi_d2f+0x108>)
 8001190:	4694      	mov	ip, r2
 8001192:	4463      	add	r3, ip
 8001194:	4098      	lsls	r0, r3
 8001196:	4305      	orrs	r5, r0
 8001198:	002a      	movs	r2, r5
 800119a:	1e53      	subs	r3, r2, #1
 800119c:	419a      	sbcs	r2, r3
 800119e:	4332      	orrs	r2, r6
 80011a0:	2600      	movs	r6, #0
 80011a2:	0753      	lsls	r3, r2, #29
 80011a4:	d1ce      	bne.n	8001144 <__aeabi_d2f+0x68>
 80011a6:	2480      	movs	r4, #128	; 0x80
 80011a8:	0013      	movs	r3, r2
 80011aa:	04e4      	lsls	r4, r4, #19
 80011ac:	2001      	movs	r0, #1
 80011ae:	4023      	ands	r3, r4
 80011b0:	4222      	tst	r2, r4
 80011b2:	d1d3      	bne.n	800115c <__aeabi_d2f+0x80>
 80011b4:	e7b0      	b.n	8001118 <__aeabi_d2f+0x3c>
 80011b6:	2300      	movs	r3, #0
 80011b8:	e7ad      	b.n	8001116 <__aeabi_d2f+0x3a>
 80011ba:	4a0b      	ldr	r2, [pc, #44]	; (80011e8 <__aeabi_d2f+0x10c>)
 80011bc:	4694      	mov	ip, r2
 80011be:	002a      	movs	r2, r5
 80011c0:	40e2      	lsrs	r2, r4
 80011c2:	0014      	movs	r4, r2
 80011c4:	002a      	movs	r2, r5
 80011c6:	4463      	add	r3, ip
 80011c8:	409a      	lsls	r2, r3
 80011ca:	4098      	lsls	r0, r3
 80011cc:	1e55      	subs	r5, r2, #1
 80011ce:	41aa      	sbcs	r2, r5
 80011d0:	4302      	orrs	r2, r0
 80011d2:	4322      	orrs	r2, r4
 80011d4:	e7e4      	b.n	80011a0 <__aeabi_d2f+0xc4>
 80011d6:	0033      	movs	r3, r6
 80011d8:	e79e      	b.n	8001118 <__aeabi_d2f+0x3c>
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	000007fe 	.word	0x000007fe
 80011e0:	fffffc80 	.word	0xfffffc80
 80011e4:	fffffca2 	.word	0xfffffca2
 80011e8:	fffffc82 	.word	0xfffffc82

080011ec <__clzsi2>:
 80011ec:	211c      	movs	r1, #28
 80011ee:	2301      	movs	r3, #1
 80011f0:	041b      	lsls	r3, r3, #16
 80011f2:	4298      	cmp	r0, r3
 80011f4:	d301      	bcc.n	80011fa <__clzsi2+0xe>
 80011f6:	0c00      	lsrs	r0, r0, #16
 80011f8:	3910      	subs	r1, #16
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	4298      	cmp	r0, r3
 80011fe:	d301      	bcc.n	8001204 <__clzsi2+0x18>
 8001200:	0a00      	lsrs	r0, r0, #8
 8001202:	3908      	subs	r1, #8
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	4298      	cmp	r0, r3
 8001208:	d301      	bcc.n	800120e <__clzsi2+0x22>
 800120a:	0900      	lsrs	r0, r0, #4
 800120c:	3904      	subs	r1, #4
 800120e:	a202      	add	r2, pc, #8	; (adr r2, 8001218 <__clzsi2+0x2c>)
 8001210:	5c10      	ldrb	r0, [r2, r0]
 8001212:	1840      	adds	r0, r0, r1
 8001214:	4770      	bx	lr
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	02020304 	.word	0x02020304
 800121c:	01010101 	.word	0x01010101
	...

08001228 <decToBcd>:

#include "DS3231.h"

// Convert normal decimal numbers to binary coded decimal
uint8_t decToBcd(int val)
{
 8001228:	b570      	push	{r4, r5, r6, lr}
  return (uint8_t)( (val/10*16) + (val%10) );
 800122a:	210a      	movs	r1, #10
{
 800122c:	0005      	movs	r5, r0
  return (uint8_t)( (val/10*16) + (val%10) );
 800122e:	f7ff f813 	bl	8000258 <__divsi3>
 8001232:	210a      	movs	r1, #10
 8001234:	0104      	lsls	r4, r0, #4
 8001236:	0028      	movs	r0, r5
 8001238:	f7ff f8f4 	bl	8000424 <__aeabi_idivmod>
 800123c:	1864      	adds	r4, r4, r1
 800123e:	b2e0      	uxtb	r0, r4
}
 8001240:	bd70      	pop	{r4, r5, r6, pc}

08001242 <bcdToDec>:

// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
  return (int)( (val/16*10) + (val%16) );
 8001242:	230a      	movs	r3, #10
 8001244:	0902      	lsrs	r2, r0, #4
 8001246:	4353      	muls	r3, r2
 8001248:	220f      	movs	r2, #15
 800124a:	4010      	ands	r0, r2
 800124c:	1818      	adds	r0, r3, r0
}
 800124e:	4770      	bx	lr

08001250 <ds3231_SetTime>:

// function to set time

void ds3231_SetTime (uint8_t sec, uint8_t min, uint8_t hour, uint8_t dow, uint8_t dom, uint8_t month, uint8_t year)
{
 8001250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001252:	b08b      	sub	sp, #44	; 0x2c
 8001254:	001d      	movs	r5, r3
 8001256:	ab10      	add	r3, sp, #64	; 0x40
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	000f      	movs	r7, r1
 800125c:	9305      	str	r3, [sp, #20]
 800125e:	ab11      	add	r3, sp, #68	; 0x44
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	0016      	movs	r6, r2
 8001264:	9306      	str	r3, [sp, #24]
 8001266:	ab12      	add	r3, sp, #72	; 0x48
 8001268:	781b      	ldrb	r3, [r3, #0]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 800126a:	ac08      	add	r4, sp, #32
{
 800126c:	9307      	str	r3, [sp, #28]
	set_time[0] = decToBcd(sec);
 800126e:	f7ff ffdb 	bl	8001228 <decToBcd>
 8001272:	7020      	strb	r0, [r4, #0]
	set_time[1] = decToBcd(min);
 8001274:	0038      	movs	r0, r7
 8001276:	f7ff ffd7 	bl	8001228 <decToBcd>
 800127a:	7060      	strb	r0, [r4, #1]
	set_time[2] = decToBcd(hour);
 800127c:	0030      	movs	r0, r6
 800127e:	f7ff ffd3 	bl	8001228 <decToBcd>
 8001282:	70a0      	strb	r0, [r4, #2]
	set_time[3] = decToBcd(dow);
 8001284:	0028      	movs	r0, r5
 8001286:	f7ff ffcf 	bl	8001228 <decToBcd>
 800128a:	70e0      	strb	r0, [r4, #3]
	set_time[4] = decToBcd(dom);
 800128c:	9805      	ldr	r0, [sp, #20]
 800128e:	f7ff ffcb 	bl	8001228 <decToBcd>
 8001292:	7120      	strb	r0, [r4, #4]
	set_time[5] = decToBcd(month);
 8001294:	9806      	ldr	r0, [sp, #24]
 8001296:	f7ff ffc7 	bl	8001228 <decToBcd>
 800129a:	7160      	strb	r0, [r4, #5]
	set_time[6] = decToBcd(year);
 800129c:	9807      	ldr	r0, [sp, #28]
 800129e:	f7ff ffc3 	bl	8001228 <decToBcd>

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 100);
 80012a2:	2364      	movs	r3, #100	; 0x64
	set_time[6] = decToBcd(year);
 80012a4:	71a0      	strb	r0, [r4, #6]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 100);
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	3b5d      	subs	r3, #93	; 0x5d
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	2200      	movs	r2, #0
 80012ae:	21d0      	movs	r1, #208	; 0xd0
 80012b0:	9400      	str	r4, [sp, #0]
 80012b2:	3b06      	subs	r3, #6
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <ds3231_SetTime+0x70>)
 80012b6:	f000 ffa9 	bl	800220c <HAL_I2C_Mem_Write>
}
 80012ba:	b00b      	add	sp, #44	; 0x2c
 80012bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012be:	46c0      	nop			; (mov r8, r8)
 80012c0:	20000028 	.word	0x20000028

080012c4 <ds3231_SetTimeByTimeStruct>:

void ds3231_SetTimeByTimeStruct (TIME time)
{
 80012c4:	b570      	push	{r4, r5, r6, lr}
 80012c6:	0a04      	lsrs	r4, r0, #8
 80012c8:	0c0e      	lsrs	r6, r1, #16
 80012ca:	0a0d      	lsrs	r5, r1, #8
 80012cc:	b086      	sub	sp, #24
 80012ce:	0c02      	lsrs	r2, r0, #16
	ds3231_SetTime (time.seconds, time.minutes, time.hour, time.dayofweek, time.dayofmonth, time.month, time.year);
 80012d0:	b2e4      	uxtb	r4, r4
 80012d2:	b2f6      	uxtb	r6, r6
 80012d4:	b2ed      	uxtb	r5, r5
 80012d6:	b2c9      	uxtb	r1, r1
 80012d8:	0e03      	lsrs	r3, r0, #24
 80012da:	9100      	str	r1, [sp, #0]
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	0021      	movs	r1, r4
 80012e0:	b2c0      	uxtb	r0, r0
 80012e2:	9602      	str	r6, [sp, #8]
 80012e4:	9501      	str	r5, [sp, #4]
 80012e6:	f7ff ffb3 	bl	8001250 <ds3231_SetTime>
}
 80012ea:	b006      	add	sp, #24
 80012ec:	bd70      	pop	{r4, r5, r6, pc}
	...

080012f0 <ds3231_GetTime>:

void ds3231_GetTime (TIME* time)
{
	uint8_t get_time[7];
	if(HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 100)==HAL_OK)
 80012f0:	2364      	movs	r3, #100	; 0x64
{
 80012f2:	b530      	push	{r4, r5, lr}
 80012f4:	b087      	sub	sp, #28
	if(HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 100)==HAL_OK)
 80012f6:	9302      	str	r3, [sp, #8]
 80012f8:	ad04      	add	r5, sp, #16
 80012fa:	3b5d      	subs	r3, #93	; 0x5d
{
 80012fc:	0004      	movs	r4, r0
	if(HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 100)==HAL_OK)
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	21d0      	movs	r1, #208	; 0xd0
 8001304:	4812      	ldr	r0, [pc, #72]	; (8001350 <ds3231_GetTime+0x60>)
 8001306:	9500      	str	r5, [sp, #0]
 8001308:	3b06      	subs	r3, #6
 800130a:	f001 f839 	bl	8002380 <HAL_I2C_Mem_Read>
 800130e:	2800      	cmp	r0, #0
 8001310:	d11b      	bne.n	800134a <ds3231_GetTime+0x5a>
	{
		time->seconds = bcdToDec(get_time[0]);
 8001312:	7828      	ldrb	r0, [r5, #0]
 8001314:	f7ff ff95 	bl	8001242 <bcdToDec>
 8001318:	7020      	strb	r0, [r4, #0]
		time->minutes = bcdToDec(get_time[1]);
 800131a:	7868      	ldrb	r0, [r5, #1]
 800131c:	f7ff ff91 	bl	8001242 <bcdToDec>
 8001320:	7060      	strb	r0, [r4, #1]
		time->hour = bcdToDec(get_time[2]);
 8001322:	78a8      	ldrb	r0, [r5, #2]
 8001324:	f7ff ff8d 	bl	8001242 <bcdToDec>
 8001328:	70a0      	strb	r0, [r4, #2]
		time->dayofweek = bcdToDec(get_time[3]);
 800132a:	78e8      	ldrb	r0, [r5, #3]
 800132c:	f7ff ff89 	bl	8001242 <bcdToDec>
 8001330:	70e0      	strb	r0, [r4, #3]
		time->dayofmonth = bcdToDec(get_time[4]);
 8001332:	7928      	ldrb	r0, [r5, #4]
 8001334:	f7ff ff85 	bl	8001242 <bcdToDec>
 8001338:	7120      	strb	r0, [r4, #4]
		time->month = bcdToDec(get_time[5]);
 800133a:	7968      	ldrb	r0, [r5, #5]
 800133c:	f7ff ff81 	bl	8001242 <bcdToDec>
 8001340:	7160      	strb	r0, [r4, #5]
		time->year = bcdToDec(get_time[6]);
 8001342:	79a8      	ldrb	r0, [r5, #6]
 8001344:	f7ff ff7d 	bl	8001242 <bcdToDec>
 8001348:	71a0      	strb	r0, [r4, #6]
	}
}
 800134a:	b007      	add	sp, #28
 800134c:	bd30      	pop	{r4, r5, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000028 	.word	0x20000028

08001354 <ds3231_GetTemp>:

float ds3231_GetTemp (void)
{
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 100);
 8001354:	2364      	movs	r3, #100	; 0x64
{
 8001356:	b570      	push	{r4, r5, r6, lr}
 8001358:	b086      	sub	sp, #24
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 100);
 800135a:	ae05      	add	r6, sp, #20
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	3b62      	subs	r3, #98	; 0x62
 8001360:	2211      	movs	r2, #17
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	21d0      	movs	r1, #208	; 0xd0
 8001366:	3b01      	subs	r3, #1
 8001368:	9600      	str	r6, [sp, #0]
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <ds3231_GetTemp+0x4c>)
 800136c:	f001 f808 	bl	8002380 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 8001370:	7870      	ldrb	r0, [r6, #1]
 8001372:	0980      	lsrs	r0, r0, #6
 8001374:	f7ff fe3a 	bl	8000fec <__aeabi_i2d>
 8001378:	2200      	movs	r2, #0
 800137a:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <ds3231_GetTemp+0x50>)
 800137c:	f7ff fb94 	bl	8000aa8 <__aeabi_dmul>
 8001380:	0004      	movs	r4, r0
 8001382:	7830      	ldrb	r0, [r6, #0]
 8001384:	000d      	movs	r5, r1
 8001386:	f7ff fe31 	bl	8000fec <__aeabi_i2d>
 800138a:	0002      	movs	r2, r0
 800138c:	000b      	movs	r3, r1
 800138e:	0020      	movs	r0, r4
 8001390:	0029      	movs	r1, r5
 8001392:	f7ff f84d 	bl	8000430 <__aeabi_dadd>
 8001396:	f7ff fea1 	bl	80010dc <__aeabi_d2f>
}
 800139a:	b006      	add	sp, #24
 800139c:	bd70      	pop	{r4, r5, r6, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000028 	.word	0x20000028
 80013a4:	3fd00000 	.word	0x3fd00000

080013a8 <ds3231_ForceTempConv>:

void ds3231_ForceTempConv (void)
{
 80013a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t status=0;
 80013aa:	2716      	movs	r7, #22
	uint8_t control=0;
 80013ac:	2617      	movs	r6, #23
	uint8_t status=0;
 80013ae:	2300      	movs	r3, #0
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 80013b0:	2401      	movs	r4, #1
{
 80013b2:	b087      	sub	sp, #28
	uint8_t status=0;
 80013b4:	446f      	add	r7, sp
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 80013b6:	4d15      	ldr	r5, [pc, #84]	; (800140c <ds3231_ForceTempConv+0x64>)
	uint8_t control=0;
 80013b8:	446e      	add	r6, sp
	uint8_t status=0;
 80013ba:	703b      	strb	r3, [r7, #0]
	uint8_t control=0;
 80013bc:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);  // read status register
 80013be:	3364      	adds	r3, #100	; 0x64
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	220f      	movs	r2, #15
 80013c4:	0023      	movs	r3, r4
 80013c6:	21d0      	movs	r1, #208	; 0xd0
 80013c8:	0028      	movs	r0, r5
 80013ca:	9401      	str	r4, [sp, #4]
 80013cc:	9700      	str	r7, [sp, #0]
 80013ce:	f000 ffd7 	bl	8002380 <HAL_I2C_Mem_Read>
	if (!(status&0x04))
 80013d2:	783b      	ldrb	r3, [r7, #0]
 80013d4:	075b      	lsls	r3, r3, #29
 80013d6:	d417      	bmi.n	8001408 <ds3231_ForceTempConv+0x60>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);  // read control register
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	001f      	movs	r7, r3
 80013dc:	220e      	movs	r2, #14
 80013de:	21d0      	movs	r1, #208	; 0xd0
 80013e0:	9302      	str	r3, [sp, #8]
 80013e2:	0028      	movs	r0, r5
 80013e4:	0023      	movs	r3, r4
 80013e6:	9401      	str	r4, [sp, #4]
 80013e8:	9600      	str	r6, [sp, #0]
 80013ea:	f000 ffc9 	bl	8002380 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 80013ee:	003b      	movs	r3, r7
 80013f0:	9702      	str	r7, [sp, #8]
 80013f2:	9401      	str	r4, [sp, #4]
 80013f4:	7832      	ldrb	r2, [r6, #0]
 80013f6:	3b44      	subs	r3, #68	; 0x44
 80013f8:	4313      	orrs	r3, r2
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	220e      	movs	r2, #14
 80013fe:	0023      	movs	r3, r4
 8001400:	21d0      	movs	r1, #208	; 0xd0
 8001402:	0028      	movs	r0, r5
 8001404:	f000 ff02 	bl	800220c <HAL_I2C_Mem_Write>
	}
}
 8001408:	b007      	add	sp, #28
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140c:	20000028 	.word	0x20000028

08001410 <_tm1637DelayUsec>:
    }
}

void _tm1637DelayUsec(unsigned int i)
{
    for (; i>0; i--) {
 8001410:	2800      	cmp	r0, #0
 8001412:	d100      	bne.n	8001416 <_tm1637DelayUsec+0x6>
        for (int j = 0; j < 10; ++j) {
            __asm__ __volatile__("nop\n\t":::"memory");
        }
    }
}
 8001414:	4770      	bx	lr
 8001416:	230a      	movs	r3, #10
            __asm__ __volatile__("nop\n\t":::"memory");
 8001418:	46c0      	nop			; (mov r8, r8)
        for (int j = 0; j < 10; ++j) {
 800141a:	3b01      	subs	r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1fb      	bne.n	8001418 <_tm1637DelayUsec+0x8>
    for (; i>0; i--) {
 8001420:	3801      	subs	r0, #1
 8001422:	e7f5      	b.n	8001410 <_tm1637DelayUsec>

08001424 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
{
 8001426:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8001428:	0011      	movs	r1, r2
 800142a:	4802      	ldr	r0, [pc, #8]	; (8001434 <_tm1637ClkHigh+0x10>)
 800142c:	f000 fd4c 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8001430:	bd10      	pop	{r4, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	48001400 	.word	0x48001400

08001438 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 8001438:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	2101      	movs	r1, #1
 800143e:	4802      	ldr	r0, [pc, #8]	; (8001448 <_tm1637ClkLow+0x10>)
 8001440:	f000 fd42 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8001444:	bd10      	pop	{r4, pc}
 8001446:	46c0      	nop			; (mov r8, r8)
 8001448:	48001400 	.word	0x48001400

0800144c <_tm1637ReadResult>:
{
 800144c:	b510      	push	{r4, lr}
    _tm1637ClkLow();
 800144e:	f7ff fff3 	bl	8001438 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 8001452:	2005      	movs	r0, #5
 8001454:	f7ff ffdc 	bl	8001410 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 8001458:	f7ff ffe4 	bl	8001424 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 800145c:	2002      	movs	r0, #2
 800145e:	f7ff ffd7 	bl	8001410 <_tm1637DelayUsec>
    _tm1637ClkLow();
 8001462:	f7ff ffe9 	bl	8001438 <_tm1637ClkLow>
}
 8001466:	bd10      	pop	{r4, pc}

08001468 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 8001468:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 800146a:	2201      	movs	r2, #1
 800146c:	2102      	movs	r1, #2
 800146e:	4802      	ldr	r0, [pc, #8]	; (8001478 <_tm1637DioHigh+0x10>)
 8001470:	f000 fd2a 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8001474:	bd10      	pop	{r4, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	48001400 	.word	0x48001400

0800147c <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 800147c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 800147e:	2200      	movs	r2, #0
 8001480:	2102      	movs	r1, #2
 8001482:	4802      	ldr	r0, [pc, #8]	; (800148c <_tm1637DioLow+0x10>)
 8001484:	f000 fd20 	bl	8001ec8 <HAL_GPIO_WritePin>
}
 8001488:	bd10      	pop	{r4, pc}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	48001400 	.word	0x48001400

08001490 <_tm1637Start>:
{
 8001490:	b510      	push	{r4, lr}
    _tm1637ClkHigh();
 8001492:	f7ff ffc7 	bl	8001424 <_tm1637ClkHigh>
    _tm1637DioHigh();
 8001496:	f7ff ffe7 	bl	8001468 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 800149a:	2002      	movs	r0, #2
 800149c:	f7ff ffb8 	bl	8001410 <_tm1637DelayUsec>
    _tm1637DioLow();
 80014a0:	f7ff ffec 	bl	800147c <_tm1637DioLow>
}
 80014a4:	bd10      	pop	{r4, pc}

080014a6 <_tm1637Stop>:
{
 80014a6:	b510      	push	{r4, lr}
    _tm1637ClkLow();
 80014a8:	f7ff ffc6 	bl	8001438 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 80014ac:	2002      	movs	r0, #2
 80014ae:	f7ff ffaf 	bl	8001410 <_tm1637DelayUsec>
    _tm1637DioLow();
 80014b2:	f7ff ffe3 	bl	800147c <_tm1637DioLow>
    _tm1637DelayUsec(2);
 80014b6:	2002      	movs	r0, #2
 80014b8:	f7ff ffaa 	bl	8001410 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 80014bc:	f7ff ffb2 	bl	8001424 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f7ff ffa5 	bl	8001410 <_tm1637DelayUsec>
    _tm1637DioHigh();
 80014c6:	f7ff ffcf 	bl	8001468 <_tm1637DioHigh>
}
 80014ca:	bd10      	pop	{r4, pc}

080014cc <_tm1637WriteByte>:
{
 80014cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ce:	0004      	movs	r4, r0
 80014d0:	2508      	movs	r5, #8
        if (b & 0x01) {
 80014d2:	2701      	movs	r7, #1
        _tm1637DelayUsec(3);
 80014d4:	2603      	movs	r6, #3
        _tm1637ClkLow();
 80014d6:	f7ff ffaf 	bl	8001438 <_tm1637ClkLow>
        if (b & 0x01) {
 80014da:	423c      	tst	r4, r7
 80014dc:	d00e      	beq.n	80014fc <_tm1637WriteByte+0x30>
            _tm1637DioHigh();
 80014de:	f7ff ffc3 	bl	8001468 <_tm1637DioHigh>
        _tm1637DelayUsec(3);
 80014e2:	0030      	movs	r0, r6
 80014e4:	f7ff ff94 	bl	8001410 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 80014e8:	3d01      	subs	r5, #1
        _tm1637ClkHigh();
 80014ea:	f7ff ff9b 	bl	8001424 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 80014ee:	0030      	movs	r0, r6
 80014f0:	f7ff ff8e 	bl	8001410 <_tm1637DelayUsec>
        b >>= 1;
 80014f4:	0864      	lsrs	r4, r4, #1
    for (int i = 0; i < 8; ++i) {
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	d1ed      	bne.n	80014d6 <_tm1637WriteByte+0xa>
}
 80014fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            _tm1637DioLow();
 80014fc:	f7ff ffbe 	bl	800147c <_tm1637DioLow>
 8001500:	e7ef      	b.n	80014e2 <_tm1637WriteByte+0x16>
	...

08001504 <tm1637_DisplayDecimal>:
{
 8001504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001506:	0004      	movs	r4, r0
    for (int i = 0; i < 4; ++i) {
 8001508:	2500      	movs	r5, #0
        digitArr[i] = segmentMap[v % 10];
 800150a:	270a      	movs	r7, #10
{
 800150c:	b085      	sub	sp, #20
 800150e:	9101      	str	r1, [sp, #4]
        digitArr[i] = segmentMap[v % 10];
 8001510:	ae03      	add	r6, sp, #12
 8001512:	0039      	movs	r1, r7
 8001514:	0020      	movs	r0, r4
 8001516:	f7fe ff85 	bl	8000424 <__aeabi_idivmod>
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <tm1637_DisplayDecimal+0x78>)
 800151c:	5c5b      	ldrb	r3, [r3, r1]
 800151e:	55ab      	strb	r3, [r5, r6]
        if (i == 2 && displaySeparator) {
 8001520:	2d02      	cmp	r5, #2
 8001522:	d106      	bne.n	8001532 <tm1637_DisplayDecimal+0x2e>
 8001524:	9a01      	ldr	r2, [sp, #4]
 8001526:	2a00      	cmp	r2, #0
 8001528:	d003      	beq.n	8001532 <tm1637_DisplayDecimal+0x2e>
            digitArr[i] |= 1 << 7;
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	4252      	negs	r2, r2
 800152e:	4313      	orrs	r3, r2
 8001530:	70b3      	strb	r3, [r6, #2]
        v /= 10;
 8001532:	0020      	movs	r0, r4
 8001534:	0039      	movs	r1, r7
 8001536:	f7fe fe8f 	bl	8000258 <__divsi3>
    for (int i = 0; i < 4; ++i) {
 800153a:	3501      	adds	r5, #1
        v /= 10;
 800153c:	0004      	movs	r4, r0
    for (int i = 0; i < 4; ++i) {
 800153e:	2d04      	cmp	r5, #4
 8001540:	d1e7      	bne.n	8001512 <tm1637_DisplayDecimal+0xe>
    _tm1637Start();
 8001542:	f7ff ffa5 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0x40);
 8001546:	2040      	movs	r0, #64	; 0x40
 8001548:	f7ff ffc0 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 800154c:	f7ff ff7e 	bl	800144c <_tm1637ReadResult>
    _tm1637Stop();
 8001550:	f7ff ffa9 	bl	80014a6 <_tm1637Stop>
    _tm1637Start();
 8001554:	f7ff ff9c 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 8001558:	20c0      	movs	r0, #192	; 0xc0
 800155a:	f7ff ffb7 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 800155e:	2403      	movs	r4, #3
 8001560:	f7ff ff74 	bl	800144c <_tm1637ReadResult>
        _tm1637WriteByte(digitArr[3 - i]);
 8001564:	5d30      	ldrb	r0, [r6, r4]
 8001566:	f7ff ffb1 	bl	80014cc <_tm1637WriteByte>
        _tm1637ReadResult();
 800156a:	f7ff ff6f 	bl	800144c <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 800156e:	3c01      	subs	r4, #1
 8001570:	d2f8      	bcs.n	8001564 <tm1637_DisplayDecimal+0x60>
    _tm1637Stop();
 8001572:	f7ff ff98 	bl	80014a6 <_tm1637Stop>
}
 8001576:	b005      	add	sp, #20
 8001578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	0800306c 	.word	0x0800306c

08001580 <tm1637_DisplayClock>:
{
 8001580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001582:	000f      	movs	r7, r1
 8001584:	b085      	sub	sp, #20
 8001586:	0005      	movs	r5, r0
    digitArr[0] = segmentMap[m % 10];
 8001588:	210a      	movs	r1, #10
 800158a:	0038      	movs	r0, r7
{
 800158c:	9201      	str	r2, [sp, #4]
    digitArr[0] = segmentMap[m % 10];
 800158e:	f7fe ff49 	bl	8000424 <__aeabi_idivmod>
 8001592:	4e22      	ldr	r6, [pc, #136]	; (800161c <tm1637_DisplayClock+0x9c>)
 8001594:	ac03      	add	r4, sp, #12
 8001596:	5c73      	ldrb	r3, [r6, r1]
    digitArr[1] = segmentMap[(m/10) % 10];
 8001598:	0038      	movs	r0, r7
 800159a:	210a      	movs	r1, #10
    digitArr[0] = segmentMap[m % 10];
 800159c:	7023      	strb	r3, [r4, #0]
    digitArr[1] = segmentMap[(m/10) % 10];
 800159e:	f7fe fe5b 	bl	8000258 <__divsi3>
 80015a2:	210a      	movs	r1, #10
 80015a4:	f7fe ff3e 	bl	8000424 <__aeabi_idivmod>
 80015a8:	5c73      	ldrb	r3, [r6, r1]
    digitArr[2] = segmentMap[h % 10];
 80015aa:	0028      	movs	r0, r5
 80015ac:	210a      	movs	r1, #10
    digitArr[1] = segmentMap[(m/10) % 10];
 80015ae:	7063      	strb	r3, [r4, #1]
    digitArr[2] = segmentMap[h % 10];
 80015b0:	f7fe ff38 	bl	8000424 <__aeabi_idivmod>
    digitArr[3] = (h/10==0)?0x00:segmentMap[(h/10) % 10];
 80015b4:	002a      	movs	r2, r5
    digitArr[2] = segmentMap[h % 10];
 80015b6:	5c77      	ldrb	r7, [r6, r1]
    digitArr[3] = (h/10==0)?0x00:segmentMap[(h/10) % 10];
 80015b8:	3209      	adds	r2, #9
 80015ba:	2300      	movs	r3, #0
    digitArr[2] = segmentMap[h % 10];
 80015bc:	70a7      	strb	r7, [r4, #2]
    digitArr[3] = (h/10==0)?0x00:segmentMap[(h/10) % 10];
 80015be:	2a12      	cmp	r2, #18
 80015c0:	d907      	bls.n	80015d2 <tm1637_DisplayClock+0x52>
 80015c2:	210a      	movs	r1, #10
 80015c4:	0028      	movs	r0, r5
 80015c6:	f7fe fe47 	bl	8000258 <__divsi3>
 80015ca:	210a      	movs	r1, #10
 80015cc:	f7fe ff2a 	bl	8000424 <__aeabi_idivmod>
 80015d0:	5c73      	ldrb	r3, [r6, r1]
 80015d2:	70e3      	strb	r3, [r4, #3]
    if(displaySeparator)
 80015d4:	9b01      	ldr	r3, [sp, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <tm1637_DisplayClock+0x62>
    	digitArr[2] |= 1 << 7;
 80015da:	2380      	movs	r3, #128	; 0x80
 80015dc:	425b      	negs	r3, r3
 80015de:	431f      	orrs	r7, r3
 80015e0:	70a7      	strb	r7, [r4, #2]
    _tm1637Start();
 80015e2:	f7ff ff55 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0x40);
 80015e6:	2040      	movs	r0, #64	; 0x40
 80015e8:	f7ff ff70 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 80015ec:	f7ff ff2e 	bl	800144c <_tm1637ReadResult>
    _tm1637Stop();
 80015f0:	f7ff ff59 	bl	80014a6 <_tm1637Stop>
    _tm1637Start();
 80015f4:	f7ff ff4c 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 80015f8:	20c0      	movs	r0, #192	; 0xc0
 80015fa:	f7ff ff67 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 80015fe:	2503      	movs	r5, #3
 8001600:	f7ff ff24 	bl	800144c <_tm1637ReadResult>
        _tm1637WriteByte(digitArr[3 - i]);
 8001604:	5d60      	ldrb	r0, [r4, r5]
 8001606:	f7ff ff61 	bl	80014cc <_tm1637WriteByte>
        _tm1637ReadResult();
 800160a:	f7ff ff1f 	bl	800144c <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 800160e:	3d01      	subs	r5, #1
 8001610:	d2f8      	bcs.n	8001604 <tm1637_DisplayClock+0x84>
    _tm1637Stop();
 8001612:	f7ff ff48 	bl	80014a6 <_tm1637Stop>
}
 8001616:	b005      	add	sp, #20
 8001618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800161a:	46c0      	nop			; (mov r8, r8)
 800161c:	0800306c 	.word	0x0800306c

08001620 <tm1637_DisplayTempDegC>:
    digitArr[0] = 0x39; // 'C'
 8001620:	2339      	movs	r3, #57	; 0x39
{
 8001622:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001624:	0005      	movs	r5, r0
    digitArr[0] = 0x39; // 'C'
 8001626:	ac01      	add	r4, sp, #4
 8001628:	7023      	strb	r3, [r4, #0]
    digitArr[2] = segmentMap[t % 10];
 800162a:	210a      	movs	r1, #10
    digitArr[1] = 0x63; // '°'
 800162c:	332a      	adds	r3, #42	; 0x2a
 800162e:	7063      	strb	r3, [r4, #1]
    digitArr[2] = segmentMap[t % 10];
 8001630:	f7fe fef8 	bl	8000424 <__aeabi_idivmod>
    digitArr[3] = (t/10==0)?0x00:segmentMap[(t/10) % 10];
 8001634:	002a      	movs	r2, r5
    digitArr[2] = segmentMap[t % 10];
 8001636:	4e15      	ldr	r6, [pc, #84]	; (800168c <tm1637_DisplayTempDegC+0x6c>)
    digitArr[3] = (t/10==0)?0x00:segmentMap[(t/10) % 10];
 8001638:	3209      	adds	r2, #9
    digitArr[2] = segmentMap[t % 10];
 800163a:	5c73      	ldrb	r3, [r6, r1]
 800163c:	70a3      	strb	r3, [r4, #2]
    digitArr[3] = (t/10==0)?0x00:segmentMap[(t/10) % 10];
 800163e:	2300      	movs	r3, #0
 8001640:	2a12      	cmp	r2, #18
 8001642:	d907      	bls.n	8001654 <tm1637_DisplayTempDegC+0x34>
 8001644:	210a      	movs	r1, #10
 8001646:	0028      	movs	r0, r5
 8001648:	f7fe fe06 	bl	8000258 <__divsi3>
 800164c:	210a      	movs	r1, #10
 800164e:	f7fe fee9 	bl	8000424 <__aeabi_idivmod>
 8001652:	5c73      	ldrb	r3, [r6, r1]
 8001654:	70e3      	strb	r3, [r4, #3]
    _tm1637Start();
 8001656:	f7ff ff1b 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0x40);
 800165a:	2040      	movs	r0, #64	; 0x40
 800165c:	f7ff ff36 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 8001660:	f7ff fef4 	bl	800144c <_tm1637ReadResult>
    _tm1637Stop();
 8001664:	f7ff ff1f 	bl	80014a6 <_tm1637Stop>
    _tm1637Start();
 8001668:	f7ff ff12 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0xc0);
 800166c:	20c0      	movs	r0, #192	; 0xc0
 800166e:	f7ff ff2d 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 8001672:	2503      	movs	r5, #3
 8001674:	f7ff feea 	bl	800144c <_tm1637ReadResult>
        _tm1637WriteByte(digitArr[3 - i]);
 8001678:	5d60      	ldrb	r0, [r4, r5]
 800167a:	f7ff ff27 	bl	80014cc <_tm1637WriteByte>
        _tm1637ReadResult();
 800167e:	f7ff fee5 	bl	800144c <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8001682:	3d01      	subs	r5, #1
 8001684:	d2f8      	bcs.n	8001678 <tm1637_DisplayTempDegC+0x58>
    _tm1637Stop();
 8001686:	f7ff ff0e 	bl	80014a6 <_tm1637Stop>
}
 800168a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800168c:	0800306c 	.word	0x0800306c

08001690 <tm1637_SetBrightness>:
{
 8001690:	b510      	push	{r4, lr}
 8001692:	0004      	movs	r4, r0
    _tm1637WriteByte(0x87 + brightness);
 8001694:	3c79      	subs	r4, #121	; 0x79
    _tm1637Start();
 8001696:	f7ff fefb 	bl	8001490 <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 800169a:	b2e0      	uxtb	r0, r4
 800169c:	f7ff ff16 	bl	80014cc <_tm1637WriteByte>
    _tm1637ReadResult();
 80016a0:	f7ff fed4 	bl	800144c <_tm1637ReadResult>
    _tm1637Stop();
 80016a4:	f7ff feff 	bl	80014a6 <_tm1637Stop>
}
 80016a8:	bd10      	pop	{r4, pc}
	...

080016ac <tm1637_Init>:
    CLK_PORT_CLK_ENABLE();
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <tm1637_Init+0x58>)
{
 80016b0:	b510      	push	{r4, lr}
    CLK_PORT_CLK_ENABLE();
 80016b2:	6959      	ldr	r1, [r3, #20]
 80016b4:	0312      	lsls	r2, r2, #12
 80016b6:	4311      	orrs	r1, r2
 80016b8:	6159      	str	r1, [r3, #20]
 80016ba:	6959      	ldr	r1, [r3, #20]
{
 80016bc:	b088      	sub	sp, #32
    CLK_PORT_CLK_ENABLE();
 80016be:	4011      	ands	r1, r2
 80016c0:	9101      	str	r1, [sp, #4]
 80016c2:	9901      	ldr	r1, [sp, #4]
    DIO_PORT_CLK_ENABLE();
 80016c4:	6959      	ldr	r1, [r3, #20]
    HAL_GPIO_Init(CLK_PORT, &g);
 80016c6:	4c10      	ldr	r4, [pc, #64]	; (8001708 <tm1637_Init+0x5c>)
    DIO_PORT_CLK_ENABLE();
 80016c8:	4311      	orrs	r1, r2
 80016ca:	6159      	str	r1, [r3, #20]
 80016cc:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(CLK_PORT, &g);
 80016ce:	0020      	movs	r0, r4
    DIO_PORT_CLK_ENABLE();
 80016d0:	401a      	ands	r2, r3
 80016d2:	9202      	str	r2, [sp, #8]
 80016d4:	9b02      	ldr	r3, [sp, #8]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 80016d6:	2211      	movs	r2, #17
    GPIO_InitTypeDef g = {0};
 80016d8:	2300      	movs	r3, #0
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 80016da:	9204      	str	r2, [sp, #16]
    GPIO_InitTypeDef g = {0};
 80016dc:	9307      	str	r3, [sp, #28]
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 80016de:	3a0e      	subs	r2, #14
    g.Pull = GPIO_PULLUP;
 80016e0:	3301      	adds	r3, #1
    HAL_GPIO_Init(CLK_PORT, &g);
 80016e2:	a903      	add	r1, sp, #12
    g.Speed = GPIO_SPEED_FREQ_HIGH;
 80016e4:	9206      	str	r2, [sp, #24]
    g.Pull = GPIO_PULLUP;
 80016e6:	9305      	str	r3, [sp, #20]
    g.Pin = CLK_PIN;
 80016e8:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 80016ea:	f000 fb31 	bl	8001d50 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 80016ee:	2302      	movs	r3, #2
    HAL_GPIO_Init(DIO_PORT, &g);
 80016f0:	0020      	movs	r0, r4
 80016f2:	a903      	add	r1, sp, #12
    g.Pin = DIO_PIN;
 80016f4:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 80016f6:	f000 fb2b 	bl	8001d50 <HAL_GPIO_Init>
    tm1637_SetBrightness(8);
 80016fa:	2008      	movs	r0, #8
 80016fc:	f7ff ffc8 	bl	8001690 <tm1637_SetBrightness>
}
 8001700:	b008      	add	sp, #32
 8001702:	bd10      	pop	{r4, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	48001400 	.word	0x48001400

0800170c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	2214      	movs	r2, #20
 8001712:	2100      	movs	r1, #0
 8001714:	a803      	add	r0, sp, #12
 8001716:	f001 fc74 	bl	8003002 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	2080      	movs	r0, #128	; 0x80
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <MX_GPIO_Init+0xa0>)
 800171e:	03c0      	lsls	r0, r0, #15
 8001720:	6959      	ldr	r1, [r3, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = SS_CLK_Pin|SS_DIO_Pin;
 8001722:	2403      	movs	r4, #3
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001724:	4301      	orrs	r1, r0
 8001726:	6159      	str	r1, [r3, #20]
 8001728:	695a      	ldr	r2, [r3, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800172c:	4002      	ands	r2, r0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001730:	9200      	str	r2, [sp, #0]
 8001732:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	6959      	ldr	r1, [r3, #20]
 8001736:	0280      	lsls	r0, r0, #10
 8001738:	4301      	orrs	r1, r0
 800173a:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173c:	2180      	movs	r1, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800173e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001740:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001742:	02c9      	lsls	r1, r1, #11
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	4002      	ands	r2, r0
 8001746:	9201      	str	r2, [sp, #4]
 8001748:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);
 800174c:	4f18      	ldr	r7, [pc, #96]	; (80017b0 <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	430a      	orrs	r2, r1
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);
 8001754:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001756:	400b      	ands	r3, r1
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);
 8001758:	0038      	movs	r0, r7
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);
 800175c:	2103      	movs	r1, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800175e:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOF, SS_CLK_Pin|SS_DIO_Pin, GPIO_PIN_RESET);
 8001760:	f000 fbb2 	bl	8001ec8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001764:	0038      	movs	r0, r7
 8001766:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pin = SS_CLK_Pin|SS_DIO_Pin;
 800176a:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800176e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001770:	f000 faee 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001774:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001776:	2690      	movs	r6, #144	; 0x90
 8001778:	05f6      	lsls	r6, r6, #23
 800177a:	0030      	movs	r0, r6
 800177c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800177e:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001780:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	f000 fae5 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001786:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	0030      	movs	r0, r6
 800178a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800178c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f000 fadd 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001796:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_GPIO_Init+0xa8>)
 800179a:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800179c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f000 fad5 	bl	8001d50 <HAL_GPIO_Init>

}
 80017a6:	b009      	add	sp, #36	; 0x24
 80017a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48001400 	.word	0x48001400
 80017b4:	48000400 	.word	0x48000400

080017b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017b8:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_I2C1_Init+0x50>)
 80017bc:	4c13      	ldr	r4, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
  hi2c1.Init.Timing = 0x2000090E;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017be:	2201      	movs	r2, #1
  hi2c1.Instance = I2C1;
 80017c0:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80017c2:	4b13      	ldr	r3, [pc, #76]	; (8001810 <MX_I2C1_Init+0x58>)
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	0020      	movs	r0, r4
  hi2c1.Init.Timing = 0x2000090E;
 80017c6:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017c8:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ca:	60e2      	str	r2, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 80017cc:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ce:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017d0:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017d2:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017d4:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d6:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d8:	f000 fcc2 	bl	8002160 <HAL_I2C_Init>
 80017dc:	2800      	cmp	r0, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C1_Init+0x2c>
  {
    Error_Handler();
 80017e0:	f000 f97e 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	0020      	movs	r0, r4
 80017e8:	f000 fe8e 	bl	8002508 <HAL_I2CEx_ConfigAnalogFilter>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d001      	beq.n	80017f4 <MX_I2C1_Init+0x3c>
  {
    Error_Handler();
 80017f0:	f000 f976 	bl	8001ae0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f4:	2100      	movs	r1, #0
 80017f6:	0020      	movs	r0, r4
 80017f8:	f000 feac 	bl	8002554 <HAL_I2CEx_ConfigDigitalFilter>
 80017fc:	2800      	cmp	r0, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f000 f96e 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001804:	bd10      	pop	{r4, pc}
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	40005400 	.word	0x40005400
 800180c:	20000028 	.word	0x20000028
 8001810:	2000090e 	.word	0x2000090e

08001814 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001814:	b510      	push	{r4, lr}
 8001816:	0004      	movs	r4, r0
 8001818:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	2214      	movs	r2, #20
 800181c:	2100      	movs	r1, #0
 800181e:	a803      	add	r0, sp, #12
 8001820:	f001 fbef 	bl	8003002 <memset>
  if(i2cHandle->Instance==I2C1)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_I2C_MspInit+0x60>)
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d120      	bne.n	800186e <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	2180      	movs	r1, #128	; 0x80
 800182e:	4c12      	ldr	r4, [pc, #72]	; (8001878 <HAL_I2C_MspInit+0x64>)
 8001830:	0289      	lsls	r1, r1, #10
 8001832:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001834:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	430a      	orrs	r2, r1
 8001838:	6162      	str	r2, [r4, #20]
 800183a:	6963      	ldr	r3, [r4, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	400b      	ands	r3, r1
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = RTC_SCL_Pin|RTC_SDA_Pin;
 8001844:	23c0      	movs	r3, #192	; 0xc0
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800184a:	2312      	movs	r3, #18
 800184c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	3b0f      	subs	r3, #15
 8001850:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001854:	3301      	adds	r3, #1
 8001856:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f000 fa7a 	bl	8001d50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	69e2      	ldr	r2, [r4, #28]
 8001860:	0389      	lsls	r1, r1, #14
 8001862:	430a      	orrs	r2, r1
 8001864:	61e2      	str	r2, [r4, #28]
 8001866:	69e3      	ldr	r3, [r4, #28]
 8001868:	400b      	ands	r3, r1
 800186a:	9302      	str	r3, [sp, #8]
 800186c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800186e:	b008      	add	sp, #32
 8001870:	bd10      	pop	{r4, pc}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	40005400 	.word	0x40005400
 8001878:	40021000 	.word	0x40021000

0800187c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800187c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800187e:	2510      	movs	r5, #16
{
 8001880:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001882:	222c      	movs	r2, #44	; 0x2c
 8001884:	2100      	movs	r1, #0
 8001886:	a809      	add	r0, sp, #36	; 0x24
 8001888:	f001 fbbb 	bl	8003002 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	002a      	movs	r2, r5
 800188e:	2100      	movs	r1, #0
 8001890:	4668      	mov	r0, sp
 8001892:	f001 fbb6 	bl	8003002 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001896:	2100      	movs	r1, #0
 8001898:	002a      	movs	r2, r5
 800189a:	a804      	add	r0, sp, #16
 800189c:	f001 fbb1 	bl	8003002 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80018a4:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a6:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80018a8:	031b      	lsls	r3, r3, #12
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018aa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ae:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b0:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80018b2:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f000 fe72 	bl	800259c <HAL_RCC_OscConfig>
 80018b8:	1e01      	subs	r1, r0, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x44>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018bc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018be:	e7fe      	b.n	80018be <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c2:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018c4:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ca:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018cc:	f001 f898 	bl	8002a00 <HAL_RCC_ClockConfig>
 80018d0:	2800      	cmp	r0, #0
 80018d2:	d001      	beq.n	80018d8 <SystemClock_Config+0x5c>
 80018d4:	b672      	cpsid	i
  while (1)
 80018d6:	e7fe      	b.n	80018d6 <SystemClock_Config+0x5a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80018d8:	2321      	movs	r3, #33	; 0x21
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80018da:	9006      	str	r0, [sp, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80018dc:	9007      	str	r0, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018de:	a804      	add	r0, sp, #16
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80018e0:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018e2:	f001 f921 	bl	8002b28 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0x72>
 80018ea:	b672      	cpsid	i
  while (1)
 80018ec:	e7fe      	b.n	80018ec <SystemClock_Config+0x70>
}
 80018ee:	b015      	add	sp, #84	; 0x54
 80018f0:	bd30      	pop	{r4, r5, pc}
	...

080018f4 <main>:
{
 80018f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  enum StateType nCurState = 0;
 80018f6:	2700      	movs	r7, #0
			  nNextState = stUpdateTime;
 80018f8:	2502      	movs	r5, #2
  int nStateTime = 0;
 80018fa:	003e      	movs	r6, r7
{
 80018fc:	b087      	sub	sp, #28
  HAL_Init();
 80018fe:	f000 f9af 	bl	8001c60 <HAL_Init>
  SystemClock_Config();
 8001902:	f7ff ffbb 	bl	800187c <SystemClock_Config>
  MX_GPIO_Init();
 8001906:	f7ff ff01 	bl	800170c <MX_GPIO_Init>
  MX_I2C1_Init();
 800190a:	f7ff ff55 	bl	80017b8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800190e:	f000 f90b 	bl	8001b28 <MX_USART1_UART_Init>
  tm1637_Init();
 8001912:	f7ff fecb 	bl	80016ac <tm1637_Init>
  tm1637_SetBrightness(1); // Optionally set brightness. 0 is off. By default, initialized to full brightness.
 8001916:	2001      	movs	r0, #1
 8001918:	f7ff feba 	bl	8001690 <tm1637_SetBrightness>
  tm1637_DisplayDecimal(1234, 1); // Display the value "1234" and turn on the `:` that is between digits 2 and 3.
 800191c:	2101      	movs	r1, #1
 800191e:	486b      	ldr	r0, [pc, #428]	; (8001acc <main+0x1d8>)
 8001920:	f7ff fdf0 	bl	8001504 <tm1637_DisplayDecimal>
  int nDebounceBtn2 = 0;
 8001924:	9701      	str	r7, [sp, #4]
  int nDebounceBtn1 = 0;
 8001926:	9702      	str	r7, [sp, #8]
			  bColon = 0;
 8001928:	9703      	str	r7, [sp, #12]
	  HAL_Delay(10);
 800192a:	200a      	movs	r0, #10
 800192c:	f000 f9ba 	bl	8001ca4 <HAL_Delay>
	  if(nCurState==nNextState)
 8001930:	42bd      	cmp	r5, r7
 8001932:	d000      	beq.n	8001936 <main+0x42>
 8001934:	e0be      	b.n	8001ab4 <main+0x1c0>
		  nStateTime++;
 8001936:	3601      	adds	r6, #1
	  switch(nCurState)
 8001938:	2d05      	cmp	r5, #5
 800193a:	d900      	bls.n	800193e <main+0x4a>
 800193c:	e0b5      	b.n	8001aaa <main+0x1b6>
 800193e:	0028      	movs	r0, r5
 8001940:	f7fe fbec 	bl	800011c <__gnu_thumb1_case_uqi>
 8001944:	b30b4a04 	.word	0xb30b4a04
 8001948:	ada2      	.short	0xada2
		  nStateTime = 0;
 800194a:	2600      	movs	r6, #0
			  nNextState = stUpdateTime;
 800194c:	2402      	movs	r4, #2
			  bColon = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	9303      	str	r3, [sp, #12]
		  nStateTime = 0;
 8001952:	002f      	movs	r7, r5
 8001954:	0025      	movs	r5, r4
 8001956:	e7e8      	b.n	800192a <main+0x36>
 8001958:	2600      	movs	r6, #0
			  ds3231_GetTime(&timeNow);
 800195a:	4c5d      	ldr	r4, [pc, #372]	; (8001ad0 <main+0x1dc>)
 800195c:	0020      	movs	r0, r4
 800195e:	f7ff fcc7 	bl	80012f0 <ds3231_GetTime>
			  nHour = timeNow.hour%12;
 8001962:	210c      	movs	r1, #12
 8001964:	78a0      	ldrb	r0, [r4, #2]
 8001966:	f7fe fc73 	bl	8000250 <__aeabi_uidivmod>
 800196a:	b2c9      	uxtb	r1, r1
			  nHour = (nHour==0)?12:nHour;
 800196c:	2900      	cmp	r1, #0
 800196e:	d100      	bne.n	8001972 <main+0x7e>
 8001970:	310c      	adds	r1, #12
 8001972:	9104      	str	r1, [sp, #16]
			  nMin = timeNow.minutes;
 8001974:	7863      	ldrb	r3, [r4, #1]
 8001976:	2401      	movs	r4, #1
 8001978:	9305      	str	r3, [sp, #20]
			  bColon =! bColon;
 800197a:	9b03      	ldr	r3, [sp, #12]
 800197c:	4063      	eors	r3, r4
 800197e:	e7e7      	b.n	8001950 <main+0x5c>
			  tm1637_DisplayClock(nHour, nMin, bColon);
 8001980:	9a03      	ldr	r2, [sp, #12]
 8001982:	9905      	ldr	r1, [sp, #20]
 8001984:	9804      	ldr	r0, [sp, #16]
 8001986:	f7ff fdfb 	bl	8001580 <tm1637_DisplayClock>
 800198a:	002c      	movs	r4, r5
		  nStateTime = 0;
 800198c:	2600      	movs	r6, #0
		  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)==GPIO_PIN_RESET){if(nDebounceBtn1++==5){timeNow.seconds=0;timeNow.minutes++;if(timeNow.minutes>59)timeNow.minutes=0;ds3231_SetTimeByTimeStruct(timeNow);}}else nDebounceBtn1 = 0;
 800198e:	2090      	movs	r0, #144	; 0x90
 8001990:	2101      	movs	r1, #1
 8001992:	05c0      	lsls	r0, r0, #23
 8001994:	f000 fa92 	bl	8001ebc <HAL_GPIO_ReadPin>
 8001998:	2700      	movs	r7, #0
 800199a:	42b8      	cmp	r0, r7
 800199c:	d104      	bne.n	80019a8 <main+0xb4>
 800199e:	9b02      	ldr	r3, [sp, #8]
 80019a0:	2b05      	cmp	r3, #5
 80019a2:	d01e      	beq.n	80019e2 <main+0xee>
 80019a4:	001f      	movs	r7, r3
 80019a6:	3701      	adds	r7, #1
		  if(HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin)==GPIO_PIN_RESET){if(nDebounceBtn2++==5){timeNow.hour++;if(timeNow.hour>12)timeNow.hour=1;ds3231_SetTimeByTimeStruct(timeNow);}}else nDebounceBtn2 = 0;
 80019a8:	2090      	movs	r0, #144	; 0x90
 80019aa:	2102      	movs	r1, #2
 80019ac:	05c0      	lsls	r0, r0, #23
 80019ae:	f000 fa85 	bl	8001ebc <HAL_GPIO_ReadPin>
 80019b2:	2800      	cmp	r0, #0
 80019b4:	d154      	bne.n	8001a60 <main+0x16c>
 80019b6:	9b01      	ldr	r3, [sp, #4]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d031      	beq.n	8001a20 <main+0x12c>
 80019bc:	3301      	adds	r3, #1
 80019be:	9301      	str	r3, [sp, #4]
		  if(nDebounceBtn1==0 && nDebounceBtn2==0 && timeNow.seconds==30)
 80019c0:	9b01      	ldr	r3, [sp, #4]
 80019c2:	433b      	orrs	r3, r7
 80019c4:	9302      	str	r3, [sp, #8]
 80019c6:	d147      	bne.n	8001a58 <main+0x164>
 80019c8:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <main+0x1dc>)
 80019ca:	9a02      	ldr	r2, [sp, #8]
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	9201      	str	r2, [sp, #4]
 80019d0:	2b1e      	cmp	r3, #30
 80019d2:	d1be      	bne.n	8001952 <main+0x5e>
			  tm1637_DisplayTempDegC((int)(fTemp+0.5));
 80019d4:	2404      	movs	r4, #4
 80019d6:	e7bc      	b.n	8001952 <main+0x5e>
		  if(nStateTime==50)
 80019d8:	002c      	movs	r4, r5
 80019da:	2e32      	cmp	r6, #50	; 0x32
 80019dc:	d1d7      	bne.n	800198e <main+0x9a>
			  nNextState = stUpdateTime;
 80019de:	2402      	movs	r4, #2
 80019e0:	e7d5      	b.n	800198e <main+0x9a>
		  if(HAL_GPIO_ReadPin(BTN1_GPIO_Port, BTN1_Pin)==GPIO_PIN_RESET){if(nDebounceBtn1++==5){timeNow.seconds=0;timeNow.minutes++;if(timeNow.minutes>59)timeNow.minutes=0;ds3231_SetTimeByTimeStruct(timeNow);}}else nDebounceBtn1 = 0;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <main+0x1dc>)
 80019e4:	785a      	ldrb	r2, [r3, #1]
 80019e6:	7018      	strb	r0, [r3, #0]
 80019e8:	3201      	adds	r2, #1
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	2a3b      	cmp	r2, #59	; 0x3b
 80019ee:	d815      	bhi.n	8001a1c <main+0x128>
 80019f0:	705a      	strb	r2, [r3, #1]
 80019f2:	785a      	ldrb	r2, [r3, #1]
 80019f4:	7819      	ldrb	r1, [r3, #0]
 80019f6:	7898      	ldrb	r0, [r3, #2]
 80019f8:	0212      	lsls	r2, r2, #8
 80019fa:	4311      	orrs	r1, r2
 80019fc:	78da      	ldrb	r2, [r3, #3]
 80019fe:	0400      	lsls	r0, r0, #16
 8001a00:	4308      	orrs	r0, r1
 8001a02:	0612      	lsls	r2, r2, #24
 8001a04:	7959      	ldrb	r1, [r3, #5]
 8001a06:	4310      	orrs	r0, r2
 8001a08:	791a      	ldrb	r2, [r3, #4]
 8001a0a:	0209      	lsls	r1, r1, #8
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	7999      	ldrb	r1, [r3, #6]
 8001a10:	2706      	movs	r7, #6
 8001a12:	0409      	lsls	r1, r1, #16
 8001a14:	4311      	orrs	r1, r2
 8001a16:	f7ff fc55 	bl	80012c4 <ds3231_SetTimeByTimeStruct>
 8001a1a:	e7c5      	b.n	80019a8 <main+0xb4>
 8001a1c:	7058      	strb	r0, [r3, #1]
 8001a1e:	e7e8      	b.n	80019f2 <main+0xfe>
		  if(HAL_GPIO_ReadPin(BTN2_GPIO_Port, BTN2_Pin)==GPIO_PIN_RESET){if(nDebounceBtn2++==5){timeNow.hour++;if(timeNow.hour>12)timeNow.hour=1;ds3231_SetTimeByTimeStruct(timeNow);}}else nDebounceBtn2 = 0;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <main+0x1dc>)
 8001a22:	789a      	ldrb	r2, [r3, #2]
 8001a24:	3201      	adds	r2, #1
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	2a0c      	cmp	r2, #12
 8001a2a:	d817      	bhi.n	8001a5c <main+0x168>
 8001a2c:	709a      	strb	r2, [r3, #2]
 8001a2e:	785a      	ldrb	r2, [r3, #1]
 8001a30:	7819      	ldrb	r1, [r3, #0]
 8001a32:	7898      	ldrb	r0, [r3, #2]
 8001a34:	0212      	lsls	r2, r2, #8
 8001a36:	4311      	orrs	r1, r2
 8001a38:	78da      	ldrb	r2, [r3, #3]
 8001a3a:	0400      	lsls	r0, r0, #16
 8001a3c:	4308      	orrs	r0, r1
 8001a3e:	0612      	lsls	r2, r2, #24
 8001a40:	7959      	ldrb	r1, [r3, #5]
 8001a42:	4310      	orrs	r0, r2
 8001a44:	791a      	ldrb	r2, [r3, #4]
 8001a46:	0209      	lsls	r1, r1, #8
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	7999      	ldrb	r1, [r3, #6]
 8001a4c:	0409      	lsls	r1, r1, #16
 8001a4e:	4311      	orrs	r1, r2
 8001a50:	f7ff fc38 	bl	80012c4 <ds3231_SetTimeByTimeStruct>
 8001a54:	2306      	movs	r3, #6
 8001a56:	9301      	str	r3, [sp, #4]
 8001a58:	9702      	str	r7, [sp, #8]
 8001a5a:	e77a      	b.n	8001952 <main+0x5e>
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	e7e5      	b.n	8001a2c <main+0x138>
 8001a60:	2300      	movs	r3, #0
 8001a62:	e7ac      	b.n	80019be <main+0xca>
		  nStateTime = 0;
 8001a64:	2600      	movs	r6, #0
			  ds3231_ForceTempConv();
 8001a66:	f7ff fc9f 	bl	80013a8 <ds3231_ForceTempConv>
			  fTemp = ds3231_GetTemp();
 8001a6a:	f7ff fc73 	bl	8001354 <ds3231_GetTemp>
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <main+0x1e0>)
 8001a70:	6018      	str	r0, [r3, #0]
			  tm1637_DisplayTempDegC((int)(fTemp+0.5));
 8001a72:	f7ff faeb 	bl	800104c <__aeabi_f2d>
 8001a76:	2200      	movs	r2, #0
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <main+0x1e4>)
 8001a7a:	f7fe fcd9 	bl	8000430 <__aeabi_dadd>
 8001a7e:	f7ff fa7f 	bl	8000f80 <__aeabi_d2iz>
 8001a82:	f7ff fdcd 	bl	8001620 <tm1637_DisplayTempDegC>
 8001a86:	e7a5      	b.n	80019d4 <main+0xe0>
		  if(bFirst)
 8001a88:	2e00      	cmp	r6, #0
 8001a8a:	d0ec      	beq.n	8001a66 <main+0x172>
		  if(nStateTime==300)
 8001a8c:	2396      	movs	r3, #150	; 0x96
 8001a8e:	2404      	movs	r4, #4
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	429e      	cmp	r6, r3
 8001a94:	d000      	beq.n	8001a98 <main+0x1a4>
 8001a96:	e75c      	b.n	8001952 <main+0x5e>
			  nNextState = stUpdateTime;
 8001a98:	3c02      	subs	r4, #2
 8001a9a:	e75a      	b.n	8001952 <main+0x5e>
		  nStateTime = 0;
 8001a9c:	2600      	movs	r6, #0
		  tm1637_DisplayDecimal(9999, 0);
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	480e      	ldr	r0, [pc, #56]	; (8001adc <main+0x1e8>)
 8001aa2:	f7ff fd2f 	bl	8001504 <tm1637_DisplayDecimal>
 8001aa6:	2405      	movs	r4, #5
 8001aa8:	e753      	b.n	8001952 <main+0x5e>
	  switch(nCurState)
 8001aaa:	002c      	movs	r4, r5
 8001aac:	e751      	b.n	8001952 <main+0x5e>
 8001aae:	002c      	movs	r4, r5
		  nStateTime = 0;
 8001ab0:	2600      	movs	r6, #0
 8001ab2:	e74e      	b.n	8001952 <main+0x5e>
	  switch(nCurState)
 8001ab4:	2d05      	cmp	r5, #5
 8001ab6:	d8fa      	bhi.n	8001aae <main+0x1ba>
 8001ab8:	0028      	movs	r0, r5
 8001aba:	f7fe fb39 	bl	8000130 <__gnu_thumb1_case_shi>
 8001abe:	ff46      	.short	0xff46
 8001ac0:	ff4dff61 	.word	0xff4dff61
 8001ac4:	ffd3fff8 	.word	0xffd3fff8
 8001ac8:	ffef      	.short	0xffef
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	000004d2 	.word	0x000004d2
 8001ad0:	20000078 	.word	0x20000078
 8001ad4:	20000074 	.word	0x20000074
 8001ad8:	3fe00000 	.word	0x3fe00000
 8001adc:	0000270f 	.word	0x0000270f

08001ae0 <Error_Handler>:
 8001ae0:	b672      	cpsid	i
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <Error_Handler+0x2>

08001ae4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_MspInit+0x2c>)
{
 8001ae8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	6999      	ldr	r1, [r3, #24]
 8001aec:	4301      	orrs	r1, r0
 8001aee:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af0:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001af4:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	4002      	ands	r2, r0
 8001af8:	9200      	str	r2, [sp, #0]
 8001afa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afc:	69da      	ldr	r2, [r3, #28]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	61da      	str	r2, [r3, #28]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	400b      	ands	r3, r1
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	b002      	add	sp, #8
 8001b0c:	4770      	bx	lr
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000

08001b14 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <NMI_Handler>

08001b16 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <HardFault_Handler>

08001b18 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b18:	4770      	bx	lr

08001b1a <PendSV_Handler>:
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b1c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1e:	f000 f8af 	bl	8001c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b22:	bd10      	pop	{r4, pc}

08001b24 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b24:	4770      	bx	lr
	...

08001b28 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <MX_USART1_UART_Init+0x30>)
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_USART1_UART_Init+0x34>)
{
 8001b2c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001b2e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8001b30:	2396      	movs	r3, #150	; 0x96
 8001b32:	019b      	lsls	r3, r3, #6
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b34:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 9600;
 8001b36:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b38:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b3a:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b3e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b40:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b42:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b46:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b4a:	f001 f9fb 	bl	8002f44 <HAL_UART_Init>
 8001b4e:	2800      	cmp	r0, #0
 8001b50:	d001      	beq.n	8001b56 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 8001b52:	f7ff ffc5 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b56:	bd10      	pop	{r4, pc}
 8001b58:	20000080 	.word	0x20000080
 8001b5c:	40013800 	.word	0x40013800

08001b60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b60:	b510      	push	{r4, lr}
 8001b62:	0004      	movs	r4, r0
 8001b64:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b66:	2214      	movs	r2, #20
 8001b68:	2100      	movs	r1, #0
 8001b6a:	a803      	add	r0, sp, #12
 8001b6c:	f001 fa49 	bl	8003002 <memset>
  if(uartHandle->Instance==USART1)
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <HAL_UART_MspInit+0x5c>)
 8001b72:	6822      	ldr	r2, [r4, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d11f      	bne.n	8001bb8 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b78:	2080      	movs	r0, #128	; 0x80
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x60>)
 8001b7c:	01c0      	lsls	r0, r0, #7
 8001b7e:	6999      	ldr	r1, [r3, #24]
 8001b80:	4301      	orrs	r1, r0
 8001b82:	6199      	str	r1, [r3, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b86:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	0289      	lsls	r1, r1, #10
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8a:	4002      	ands	r2, r0
 8001b8c:	9201      	str	r2, [sp, #4]
 8001b8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b90:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Pin = REM_TX_Pin|REM_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	430a      	orrs	r2, r1
 8001b96:	615a      	str	r2, [r3, #20]
 8001b98:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = REM_TX_Pin|REM_RX_Pin;
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	3b0a      	subs	r3, #10
 8001ba8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001baa:	3301      	adds	r3, #1
 8001bac:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001bb0:	3b02      	subs	r3, #2
 8001bb2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb4:	f000 f8cc 	bl	8001d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bb8:	b008      	add	sp, #32
 8001bba:	bd10      	pop	{r4, pc}
 8001bbc:	40013800 	.word	0x40013800
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bee:	f7ff ff99 	bl	8001b24 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f001 f9d9 	bl	8002fa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7ff fe7d 	bl	80018f4 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001c08:	080030c4 	.word	0x080030c4
  ldr r2, =_sbss
 8001c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001c10:	20000108 	.word	0x20000108

08001c14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b570      	push	{r4, r5, r6, lr}
 8001c1a:	0005      	movs	r5, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c1c:	20fa      	movs	r0, #250	; 0xfa
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_InitTick+0x3c>)
 8001c20:	0080      	lsls	r0, r0, #2
 8001c22:	7819      	ldrb	r1, [r3, #0]
 8001c24:	f7fe fa8e 	bl	8000144 <__udivsi3>
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_InitTick+0x40>)
 8001c2a:	0001      	movs	r1, r0
 8001c2c:	6818      	ldr	r0, [r3, #0]
 8001c2e:	f7fe fa89 	bl	8000144 <__udivsi3>
 8001c32:	f000 f873 	bl	8001d1c <HAL_SYSTICK_Config>
 8001c36:	0004      	movs	r4, r0
  {
    return HAL_ERROR;
 8001c38:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c3a:	2c00      	cmp	r4, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_InitTick+0x3a>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	2d03      	cmp	r5, #3
 8001c40:	d807      	bhi.n	8001c52 <HAL_InitTick+0x3a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c42:	3802      	subs	r0, #2
 8001c44:	0022      	movs	r2, r4
 8001c46:	0029      	movs	r1, r5
 8001c48:	f000 f83e 	bl	8001cc8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	0020      	movs	r0, r4
 8001c4e:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <HAL_InitTick+0x44>)
 8001c50:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8001c52:	bd70      	pop	{r4, r5, r6, pc}
 8001c54:	20000004 	.word	0x20000004
 8001c58:	20000000 	.word	0x20000000
 8001c5c:	20000008 	.word	0x20000008

08001c60 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c60:	2310      	movs	r3, #16
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <HAL_Init+0x1c>)
{
 8001c64:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c66:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c68:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6a:	430b      	orrs	r3, r1
 8001c6c:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c6e:	f7ff ffd3 	bl	8001c18 <HAL_InitTick>
  HAL_MspInit();
 8001c72:	f7ff ff37 	bl	8001ae4 <HAL_MspInit>
}
 8001c76:	2000      	movs	r0, #0
 8001c78:	bd10      	pop	{r4, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c80:	4a03      	ldr	r2, [pc, #12]	; (8001c90 <HAL_IncTick+0x10>)
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_IncTick+0x14>)
 8001c84:	6811      	ldr	r1, [r2, #0]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	185b      	adds	r3, r3, r1
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	4770      	bx	lr
 8001c8e:	46c0      	nop			; (mov r8, r8)
 8001c90:	20000104 	.word	0x20000104
 8001c94:	20000004 	.word	0x20000004

08001c98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c98:	4b01      	ldr	r3, [pc, #4]	; (8001ca0 <HAL_GetTick+0x8>)
 8001c9a:	6818      	ldr	r0, [r3, #0]
}
 8001c9c:	4770      	bx	lr
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	20000104 	.word	0x20000104

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
 8001ca6:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ca8:	f7ff fff6 	bl	8001c98 <HAL_GetTick>
 8001cac:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cae:	1c63      	adds	r3, r4, #1
 8001cb0:	d002      	beq.n	8001cb8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <HAL_Delay+0x20>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	1b40      	subs	r0, r0, r5
 8001cbe:	42a0      	cmp	r0, r4
 8001cc0:	d3fa      	bcc.n	8001cb8 <HAL_Delay+0x14>
  {
  }
}
 8001cc2:	bd70      	pop	{r4, r5, r6, pc}
 8001cc4:	20000004 	.word	0x20000004

08001cc8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc8:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cca:	25ff      	movs	r5, #255	; 0xff
 8001ccc:	2403      	movs	r4, #3
 8001cce:	002a      	movs	r2, r5
 8001cd0:	4004      	ands	r4, r0
 8001cd2:	00e4      	lsls	r4, r4, #3
 8001cd4:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cd6:	0189      	lsls	r1, r1, #6
 8001cd8:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cda:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001cdc:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cde:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	db0a      	blt.n	8001cfa <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ce4:	24c0      	movs	r4, #192	; 0xc0
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_NVIC_SetPriority+0x4c>)
 8001ce8:	0880      	lsrs	r0, r0, #2
 8001cea:	0080      	lsls	r0, r0, #2
 8001cec:	18c0      	adds	r0, r0, r3
 8001cee:	00a4      	lsls	r4, r4, #2
 8001cf0:	5903      	ldr	r3, [r0, r4]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	4311      	orrs	r1, r2
 8001cf6:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001cf8:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001cfa:	200f      	movs	r0, #15
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	3b08      	subs	r3, #8
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <HAL_NVIC_SetPriority+0x50>)
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	181b      	adds	r3, r3, r0
 8001d08:	69d8      	ldr	r0, [r3, #28]
 8001d0a:	4002      	ands	r2, r0
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	61d9      	str	r1, [r3, #28]
 8001d10:	e7f2      	b.n	8001cf8 <HAL_NVIC_SetPriority+0x30>
 8001d12:	46c0      	nop			; (mov r8, r8)
 8001d14:	e000e100 	.word	0xe000e100
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	1e43      	subs	r3, r0, #1
 8001d20:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d22:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d20d      	bcs.n	8001d44 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d28:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d2c:	4807      	ldr	r0, [pc, #28]	; (8001d4c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d30:	6a03      	ldr	r3, [r0, #32]
 8001d32:	0609      	lsls	r1, r1, #24
 8001d34:	021b      	lsls	r3, r3, #8
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3e:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d42:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d44:	4770      	bx	lr
 8001d46:	46c0      	nop			; (mov r8, r8)
 8001d48:	e000e010 	.word	0xe000e010
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001d50:	2300      	movs	r3, #0
{
 8001d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d54:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	680a      	ldr	r2, [r1, #0]
 8001d58:	0014      	movs	r4, r2
 8001d5a:	40dc      	lsrs	r4, r3
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 8001d5e:	b007      	add	sp, #28
 8001d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d62:	2501      	movs	r5, #1
 8001d64:	0014      	movs	r4, r2
 8001d66:	409d      	lsls	r5, r3
 8001d68:	402c      	ands	r4, r5
 8001d6a:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001d6c:	422a      	tst	r2, r5
 8001d6e:	d100      	bne.n	8001d72 <HAL_GPIO_Init+0x22>
 8001d70:	e095      	b.n	8001e9e <HAL_GPIO_Init+0x14e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d72:	684a      	ldr	r2, [r1, #4]
 8001d74:	005e      	lsls	r6, r3, #1
 8001d76:	4694      	mov	ip, r2
 8001d78:	2203      	movs	r2, #3
 8001d7a:	4664      	mov	r4, ip
 8001d7c:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d7e:	2403      	movs	r4, #3
 8001d80:	40b4      	lsls	r4, r6
 8001d82:	43e4      	mvns	r4, r4
 8001d84:	9402      	str	r4, [sp, #8]
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d86:	1e54      	subs	r4, r2, #1
 8001d88:	2c01      	cmp	r4, #1
 8001d8a:	d82a      	bhi.n	8001de2 <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001d8c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d8e:	9c02      	ldr	r4, [sp, #8]
 8001d90:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d92:	68cc      	ldr	r4, [r1, #12]
 8001d94:	40b4      	lsls	r4, r6
 8001d96:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001d98:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d9a:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9e:	43ac      	bics	r4, r5
 8001da0:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da2:	4664      	mov	r4, ip
 8001da4:	0924      	lsrs	r4, r4, #4
 8001da6:	403c      	ands	r4, r7
 8001da8:	409c      	lsls	r4, r3
 8001daa:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001dac:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001dae:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001db0:	9c02      	ldr	r4, [sp, #8]
 8001db2:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001db4:	688c      	ldr	r4, [r1, #8]
 8001db6:	40b4      	lsls	r4, r6
 8001db8:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001dba:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	2a02      	cmp	r2, #2
 8001dbe:	d112      	bne.n	8001de6 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001dc0:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dc2:	2507      	movs	r5, #7
 8001dc4:	00a4      	lsls	r4, r4, #2
 8001dc6:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001dc8:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dca:	9403      	str	r4, [sp, #12]
 8001dcc:	240f      	movs	r4, #15
 8001dce:	401d      	ands	r5, r3
 8001dd0:	00ad      	lsls	r5, r5, #2
 8001dd2:	40ac      	lsls	r4, r5
 8001dd4:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dd6:	690c      	ldr	r4, [r1, #16]
 8001dd8:	40ac      	lsls	r4, r5
 8001dda:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001ddc:	9c03      	ldr	r4, [sp, #12]
 8001dde:	6227      	str	r7, [r4, #32]
 8001de0:	e001      	b.n	8001de6 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de2:	2a03      	cmp	r2, #3
 8001de4:	d1e3      	bne.n	8001dae <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001de6:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001de8:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dea:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001dec:	4025      	ands	r5, r4
 8001dee:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001df0:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001df2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df4:	24c0      	movs	r4, #192	; 0xc0
 8001df6:	4662      	mov	r2, ip
 8001df8:	02a4      	lsls	r4, r4, #10
 8001dfa:	4222      	tst	r2, r4
 8001dfc:	d04f      	beq.n	8001e9e <HAL_GPIO_Init+0x14e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2501      	movs	r5, #1
 8001e00:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <HAL_GPIO_Init+0x154>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e02:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e06:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e08:	432c      	orrs	r4, r5
 8001e0a:	6194      	str	r4, [r2, #24]
 8001e0c:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0e:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e10:	402a      	ands	r2, r5
 8001e12:	9205      	str	r2, [sp, #20]
 8001e14:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e16:	4a24      	ldr	r2, [pc, #144]	; (8001ea8 <HAL_GPIO_Init+0x158>)
 8001e18:	00a4      	lsls	r4, r4, #2
 8001e1a:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1c:	220f      	movs	r2, #15
 8001e1e:	3502      	adds	r5, #2
 8001e20:	401d      	ands	r5, r3
 8001e22:	00ad      	lsls	r5, r5, #2
 8001e24:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8001e26:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e28:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	42b8      	cmp	r0, r7
 8001e2e:	d00c      	beq.n	8001e4a <HAL_GPIO_Init+0xfa>
 8001e30:	4f1e      	ldr	r7, [pc, #120]	; (8001eac <HAL_GPIO_Init+0x15c>)
 8001e32:	3201      	adds	r2, #1
 8001e34:	42b8      	cmp	r0, r7
 8001e36:	d008      	beq.n	8001e4a <HAL_GPIO_Init+0xfa>
 8001e38:	4f1d      	ldr	r7, [pc, #116]	; (8001eb0 <HAL_GPIO_Init+0x160>)
 8001e3a:	3201      	adds	r2, #1
 8001e3c:	42b8      	cmp	r0, r7
 8001e3e:	d004      	beq.n	8001e4a <HAL_GPIO_Init+0xfa>
 8001e40:	4f1c      	ldr	r7, [pc, #112]	; (8001eb4 <HAL_GPIO_Init+0x164>)
 8001e42:	3201      	adds	r2, #1
 8001e44:	42b8      	cmp	r0, r7
 8001e46:	d000      	beq.n	8001e4a <HAL_GPIO_Init+0xfa>
 8001e48:	3202      	adds	r2, #2
 8001e4a:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e4c:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e4e:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e50:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001e52:	4a19      	ldr	r2, [pc, #100]	; (8001eb8 <HAL_GPIO_Init+0x168>)
        temp &= ~(iocurrent);
 8001e54:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001e56:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001e58:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001e5a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001e5c:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e5e:	03ff      	lsls	r7, r7, #15
 8001e60:	d401      	bmi.n	8001e66 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001e62:	0035      	movs	r5, r6
 8001e64:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e66:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001e68:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001e6a:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001e6c:	9d01      	ldr	r5, [sp, #4]
 8001e6e:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e70:	03bf      	lsls	r7, r7, #14
 8001e72:	d401      	bmi.n	8001e78 <HAL_GPIO_Init+0x128>
        temp &= ~(iocurrent);
 8001e74:	0035      	movs	r5, r6
 8001e76:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e78:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001e7a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001e7c:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001e7e:	9d01      	ldr	r5, [sp, #4]
 8001e80:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e82:	02ff      	lsls	r7, r7, #11
 8001e84:	d401      	bmi.n	8001e8a <HAL_GPIO_Init+0x13a>
        temp &= ~(iocurrent);
 8001e86:	0035      	movs	r5, r6
 8001e88:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e8a:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001e8c:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001e8e:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001e90:	9e01      	ldr	r6, [sp, #4]
 8001e92:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e94:	02bf      	lsls	r7, r7, #10
 8001e96:	d401      	bmi.n	8001e9c <HAL_GPIO_Init+0x14c>
        temp &= ~(iocurrent);
 8001e98:	4025      	ands	r5, r4
 8001e9a:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001e9c:	60d6      	str	r6, [r2, #12]
    position++;
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	e759      	b.n	8001d56 <HAL_GPIO_Init+0x6>
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	48000800 	.word	0x48000800
 8001eb4:	48000c00 	.word	0x48000c00
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ebc:	6900      	ldr	r0, [r0, #16]
 8001ebe:	4008      	ands	r0, r1
 8001ec0:	1e43      	subs	r3, r0, #1
 8001ec2:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001ec4:	b2c0      	uxtb	r0, r0
  }
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec8:	2a00      	cmp	r2, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ecc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ece:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ed0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001ed2:	e7fc      	b.n	8001ece <HAL_GPIO_WritePin+0x6>

08001ed4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	699a      	ldr	r2, [r3, #24]
 8001ed8:	0792      	lsls	r2, r2, #30
 8001eda:	d501      	bpl.n	8001ee0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001edc:	2200      	movs	r2, #0
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6999      	ldr	r1, [r3, #24]
 8001ee4:	4211      	tst	r1, r2
 8001ee6:	d102      	bne.n	8001eee <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ee8:	6999      	ldr	r1, [r3, #24]
 8001eea:	430a      	orrs	r2, r1
 8001eec:	619a      	str	r2, [r3, #24]
  }
}
 8001eee:	4770      	bx	lr

08001ef0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ef0:	b530      	push	{r4, r5, lr}
 8001ef2:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001ef4:	0412      	lsls	r2, r2, #16
 8001ef6:	6800      	ldr	r0, [r0, #0]
 8001ef8:	4322      	orrs	r2, r4
 8001efa:	431a      	orrs	r2, r3
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <I2C_TransferConfig+0x24>)
 8001efe:	6845      	ldr	r5, [r0, #4]
 8001f00:	0589      	lsls	r1, r1, #22
 8001f02:	0d64      	lsrs	r4, r4, #21
 8001f04:	0d89      	lsrs	r1, r1, #22
 8001f06:	431c      	orrs	r4, r3
 8001f08:	43a5      	bics	r5, r4
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	432a      	orrs	r2, r5
 8001f0e:	6042      	str	r2, [r0, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001f10:	bd30      	pop	{r4, r5, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	03ff63ff 	.word	0x03ff63ff

08001f18 <I2C_IsAcknowledgeFailed>:
{
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1a:	6803      	ldr	r3, [r0, #0]
{
 8001f1c:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1e:	699a      	ldr	r2, [r3, #24]
{
 8001f20:	0004      	movs	r4, r0
 8001f22:	000d      	movs	r5, r1
  return HAL_OK;
 8001f24:	2000      	movs	r0, #0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f26:	06d2      	lsls	r2, r2, #27
 8001f28:	d536      	bpl.n	8001f98 <I2C_IsAcknowledgeFailed+0x80>
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	0192      	lsls	r2, r2, #6
 8001f2e:	d404      	bmi.n	8001f3a <I2C_IsAcknowledgeFailed+0x22>
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f30:	2280      	movs	r2, #128	; 0x80
 8001f32:	6859      	ldr	r1, [r3, #4]
 8001f34:	01d2      	lsls	r2, r2, #7
 8001f36:	430a      	orrs	r2, r1
 8001f38:	605a      	str	r2, [r3, #4]
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3a:	2720      	movs	r7, #32
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	699a      	ldr	r2, [r3, #24]
 8001f40:	423a      	tst	r2, r7
 8001f42:	d012      	beq.n	8001f6a <I2C_IsAcknowledgeFailed+0x52>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f44:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8001f46:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f4a:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001f4c:	f7ff ffc2 	bl	8001ed4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001f50:	6822      	ldr	r2, [r4, #0]
 8001f52:	4912      	ldr	r1, [pc, #72]	; (8001f9c <I2C_IsAcknowledgeFailed+0x84>)
 8001f54:	6853      	ldr	r3, [r2, #4]
 8001f56:	400b      	ands	r3, r1
 8001f58:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f62:	0023      	movs	r3, r4
 8001f64:	3341      	adds	r3, #65	; 0x41
 8001f66:	701f      	strb	r7, [r3, #0]
 8001f68:	e00f      	b.n	8001f8a <I2C_IsAcknowledgeFailed+0x72>
      if (Timeout != HAL_MAX_DELAY)
 8001f6a:	1c6a      	adds	r2, r5, #1
 8001f6c:	d0e7      	beq.n	8001f3e <I2C_IsAcknowledgeFailed+0x26>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6e:	f7ff fe93 	bl	8001c98 <HAL_GetTick>
 8001f72:	1b80      	subs	r0, r0, r6
 8001f74:	4285      	cmp	r5, r0
 8001f76:	d301      	bcc.n	8001f7c <I2C_IsAcknowledgeFailed+0x64>
 8001f78:	2d00      	cmp	r5, #0
 8001f7a:	d1df      	bne.n	8001f3c <I2C_IsAcknowledgeFailed+0x24>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f80:	4313      	orrs	r3, r2
 8001f82:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	0023      	movs	r3, r4
 8001f86:	3341      	adds	r3, #65	; 0x41
 8001f88:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8a:	0022      	movs	r2, r4
 8001f8c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001f8e:	2001      	movs	r0, #1
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001f92:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f94:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001f96:	7023      	strb	r3, [r4, #0]
}
 8001f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	fe00e800 	.word	0xfe00e800

08001fa0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	0004      	movs	r4, r0
 8001fa4:	000d      	movs	r5, r1
 8001fa6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fa8:	2702      	movs	r7, #2
 8001faa:	6823      	ldr	r3, [r4, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	423b      	tst	r3, r7
 8001fb0:	d001      	beq.n	8001fb6 <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001fb2:	2000      	movs	r0, #0
}
 8001fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	0032      	movs	r2, r6
 8001fb8:	0029      	movs	r1, r5
 8001fba:	0020      	movs	r0, r4
 8001fbc:	f7ff ffac 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	d115      	bne.n	8001ff0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001fc4:	1c6b      	adds	r3, r5, #1
 8001fc6:	d0f0      	beq.n	8001faa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	f7ff fe66 	bl	8001c98 <HAL_GetTick>
 8001fcc:	1b80      	subs	r0, r0, r6
 8001fce:	42a8      	cmp	r0, r5
 8001fd0:	d801      	bhi.n	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001fd2:	2d00      	cmp	r5, #0
 8001fd4:	d1e9      	bne.n	8001faa <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fde:	0023      	movs	r3, r4
 8001fe0:	3341      	adds	r3, #65	; 0x41
 8001fe2:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fe4:	0022      	movs	r2, r4
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001fea:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fec:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001fee:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	e7df      	b.n	8001fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001ff4 <I2C_WaitOnFlagUntilTimeout>:
{
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	0004      	movs	r4, r0
 8001ff8:	000e      	movs	r6, r1
 8001ffa:	0017      	movs	r7, r2
 8001ffc:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ffe:	6822      	ldr	r2, [r4, #0]
 8002000:	6993      	ldr	r3, [r2, #24]
 8002002:	4033      	ands	r3, r6
 8002004:	1b9b      	subs	r3, r3, r6
 8002006:	4259      	negs	r1, r3
 8002008:	414b      	adcs	r3, r1
 800200a:	42bb      	cmp	r3, r7
 800200c:	d001      	beq.n	8002012 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 800200e:	2000      	movs	r0, #0
 8002010:	e017      	b.n	8002042 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8002012:	1c6b      	adds	r3, r5, #1
 8002014:	d0f4      	beq.n	8002000 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7ff fe3f 	bl	8001c98 <HAL_GetTick>
 800201a:	9b06      	ldr	r3, [sp, #24]
 800201c:	1ac0      	subs	r0, r0, r3
 800201e:	42a8      	cmp	r0, r5
 8002020:	d801      	bhi.n	8002026 <I2C_WaitOnFlagUntilTimeout+0x32>
 8002022:	2d00      	cmp	r5, #0
 8002024:	d1eb      	bne.n	8001ffe <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002026:	2220      	movs	r2, #32
 8002028:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800202a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800202c:	4313      	orrs	r3, r2
 800202e:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002030:	0023      	movs	r3, r4
 8002032:	3341      	adds	r3, #65	; 0x41
 8002034:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002036:	0022      	movs	r2, r4
 8002038:	2300      	movs	r3, #0
 800203a:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 800203c:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800203e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8002040:	7023      	strb	r3, [r4, #0]
}
 8002042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002044 <I2C_RequestMemoryWrite>:
{
 8002044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002046:	0014      	movs	r4, r2
 8002048:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <I2C_RequestMemoryWrite+0x64>)
{
 800204e:	0005      	movs	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
{
 8002054:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002056:	045b      	lsls	r3, r3, #17
 8002058:	f7ff ff4a 	bl	8001ef0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800205c:	0039      	movs	r1, r7
 800205e:	0028      	movs	r0, r5
 8002060:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002062:	f7ff ff9d 	bl	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002066:	2800      	cmp	r0, #0
 8002068:	d001      	beq.n	800206e <I2C_RequestMemoryWrite+0x2a>
    return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
}
 800206c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800206e:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002070:	2e01      	cmp	r6, #1
 8002072:	d10d      	bne.n	8002090 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002074:	b2e4      	uxtb	r4, r4
 8002076:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800207a:	2200      	movs	r2, #0
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2180      	movs	r1, #128	; 0x80
 8002080:	003b      	movs	r3, r7
 8002082:	0028      	movs	r0, r5
 8002084:	f7ff ffb6 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8002088:	1e43      	subs	r3, r0, #1
 800208a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800208c:	b2c0      	uxtb	r0, r0
 800208e:	e7ed      	b.n	800206c <I2C_RequestMemoryWrite+0x28>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002090:	0a22      	lsrs	r2, r4, #8
 8002092:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002094:	0039      	movs	r1, r7
 8002096:	0028      	movs	r0, r5
 8002098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800209a:	f7ff ff81 	bl	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 800209e:	2800      	cmp	r0, #0
 80020a0:	d1e3      	bne.n	800206a <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020a2:	682b      	ldr	r3, [r5, #0]
 80020a4:	e7e6      	b.n	8002074 <I2C_RequestMemoryWrite+0x30>
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	80002000 	.word	0x80002000

080020ac <I2C_RequestMemoryRead>:
{
 80020ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ae:	0005      	movs	r5, r0
 80020b0:	0014      	movs	r4, r2
 80020b2:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <I2C_RequestMemoryRead+0x60>)
{
 80020b8:	9f08      	ldr	r7, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	f7ff ff17 	bl	8001ef0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c2:	0039      	movs	r1, r7
 80020c4:	0028      	movs	r0, r5
 80020c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020c8:	f7ff ff6a 	bl	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80020cc:	2800      	cmp	r0, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80020d0:	2001      	movs	r0, #1
}
 80020d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d4:	682b      	ldr	r3, [r5, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d6:	2e01      	cmp	r6, #1
 80020d8:	d10d      	bne.n	80020f6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020da:	b2e4      	uxtb	r4, r4
 80020dc:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020e0:	2200      	movs	r2, #0
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	2140      	movs	r1, #64	; 0x40
 80020e6:	003b      	movs	r3, r7
 80020e8:	0028      	movs	r0, r5
 80020ea:	f7ff ff83 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 80020ee:	1e43      	subs	r3, r0, #1
 80020f0:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 80020f2:	b2c0      	uxtb	r0, r0
 80020f4:	e7ed      	b.n	80020d2 <I2C_RequestMemoryRead+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020f6:	0a22      	lsrs	r2, r4, #8
 80020f8:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020fa:	0039      	movs	r1, r7
 80020fc:	0028      	movs	r0, r5
 80020fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002100:	f7ff ff4e 	bl	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002104:	2800      	cmp	r0, #0
 8002106:	d1e3      	bne.n	80020d0 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002108:	682b      	ldr	r3, [r5, #0]
 800210a:	e7e6      	b.n	80020da <I2C_RequestMemoryRead+0x2e>
 800210c:	80002000 	.word	0x80002000

08002110 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002112:	0004      	movs	r4, r0
 8002114:	000d      	movs	r5, r1
 8002116:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002118:	2720      	movs	r7, #32
 800211a:	6823      	ldr	r3, [r4, #0]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	423b      	tst	r3, r7
 8002120:	d001      	beq.n	8002126 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8002122:	2000      	movs	r0, #0
}
 8002124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002126:	0032      	movs	r2, r6
 8002128:	0029      	movs	r1, r5
 800212a:	0020      	movs	r0, r4
 800212c:	f7ff fef4 	bl	8001f18 <I2C_IsAcknowledgeFailed>
 8002130:	2800      	cmp	r0, #0
 8002132:	d113      	bne.n	800215c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002134:	f7ff fdb0 	bl	8001c98 <HAL_GetTick>
 8002138:	1b80      	subs	r0, r0, r6
 800213a:	42a8      	cmp	r0, r5
 800213c:	d801      	bhi.n	8002142 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800213e:	2d00      	cmp	r5, #0
 8002140:	d1eb      	bne.n	800211a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002142:	2220      	movs	r2, #32
 8002144:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002146:	4313      	orrs	r3, r2
 8002148:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800214a:	0023      	movs	r3, r4
 800214c:	3341      	adds	r3, #65	; 0x41
 800214e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002150:	0022      	movs	r2, r4
 8002152:	2300      	movs	r3, #0
 8002154:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002156:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800215a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800215c:	2001      	movs	r0, #1
 800215e:	e7e1      	b.n	8002124 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002160 <HAL_I2C_Init>:
{
 8002160:	b570      	push	{r4, r5, r6, lr}
 8002162:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002166:	2c00      	cmp	r4, #0
 8002168:	d03f      	beq.n	80021ea <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	0025      	movs	r5, r4
 800216c:	3541      	adds	r5, #65	; 0x41
 800216e:	782b      	ldrb	r3, [r5, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d105      	bne.n	8002182 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	0023      	movs	r3, r4
 8002178:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800217a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800217c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800217e:	f7ff fb49 	bl	8001814 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002182:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002184:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002188:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800218a:	481d      	ldr	r0, [pc, #116]	; (8002200 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800218c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800218e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002190:	438a      	bics	r2, r1
 8002192:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002194:	6861      	ldr	r1, [r4, #4]
 8002196:	4a1b      	ldr	r2, [pc, #108]	; (8002204 <HAL_I2C_Init+0xa4>)
 8002198:	400a      	ands	r2, r1
 800219a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	4002      	ands	r2, r0
 80021a0:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021a2:	68e2      	ldr	r2, [r4, #12]
 80021a4:	2a01      	cmp	r2, #1
 80021a6:	d121      	bne.n	80021ec <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0209      	lsls	r1, r1, #8
 80021ac:	4331      	orrs	r1, r6
 80021ae:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4915      	ldr	r1, [pc, #84]	; (8002208 <HAL_I2C_Init+0xa8>)
 80021b4:	4311      	orrs	r1, r2
 80021b6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021b8:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ba:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021bc:	4002      	ands	r2, r0
 80021be:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c0:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021c4:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021c6:	69a1      	ldr	r1, [r4, #24]
 80021c8:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ca:	430a      	orrs	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ce:	6a21      	ldr	r1, [r4, #32]
 80021d0:	69e2      	ldr	r2, [r4, #28]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80021d6:	2201      	movs	r2, #1
 80021d8:	6819      	ldr	r1, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021e0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021e2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e6:	3442      	adds	r4, #66	; 0x42
 80021e8:	7020      	strb	r0, [r4, #0]
}
 80021ea:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021ec:	2184      	movs	r1, #132	; 0x84
 80021ee:	0209      	lsls	r1, r1, #8
 80021f0:	4331      	orrs	r1, r6
 80021f2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021f4:	2a02      	cmp	r2, #2
 80021f6:	d1db      	bne.n	80021b0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0112      	lsls	r2, r2, #4
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	e7d7      	b.n	80021b0 <HAL_I2C_Init+0x50>
 8002200:	ffff7fff 	.word	0xffff7fff
 8002204:	f0ffffff 	.word	0xf0ffffff
 8002208:	02008000 	.word	0x02008000

0800220c <HAL_I2C_Mem_Write>:
{
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	b089      	sub	sp, #36	; 0x24
 8002210:	9307      	str	r3, [sp, #28]
 8002212:	ab0e      	add	r3, sp, #56	; 0x38
 8002214:	9206      	str	r2, [sp, #24]
 8002216:	cb04      	ldmia	r3!, {r2}
 8002218:	0004      	movs	r4, r0
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	9203      	str	r2, [sp, #12]
 800221e:	9304      	str	r3, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002220:	0003      	movs	r3, r0
 8002222:	3341      	adds	r3, #65	; 0x41
 8002224:	9305      	str	r3, [sp, #20]
 8002226:	781b      	ldrb	r3, [r3, #0]
{
 8002228:	000f      	movs	r7, r1
    return HAL_BUSY;
 800222a:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800222c:	2b20      	cmp	r3, #32
 800222e:	d108      	bne.n	8002242 <HAL_I2C_Mem_Write+0x36>
    if ((pData == NULL) || (Size == 0U))
 8002230:	2a00      	cmp	r2, #0
 8002232:	d002      	beq.n	800223a <HAL_I2C_Mem_Write+0x2e>
 8002234:	9b04      	ldr	r3, [sp, #16]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d105      	bne.n	8002246 <HAL_I2C_Mem_Write+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
}
 8002242:	b009      	add	sp, #36	; 0x24
 8002244:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8002246:	0023      	movs	r3, r4
 8002248:	3340      	adds	r3, #64	; 0x40
 800224a:	9302      	str	r3, [sp, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 800224e:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8002250:	2b01      	cmp	r3, #1
 8002252:	d0f6      	beq.n	8002242 <HAL_I2C_Mem_Write+0x36>
 8002254:	2201      	movs	r2, #1
 8002256:	9b02      	ldr	r3, [sp, #8]
 8002258:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800225a:	f7ff fd1d 	bl	8001c98 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002262:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002264:	2319      	movs	r3, #25
 8002266:	2201      	movs	r2, #1
 8002268:	0020      	movs	r0, r4
 800226a:	0209      	lsls	r1, r1, #8
 800226c:	f7ff fec2 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8002270:	1e06      	subs	r6, r0, #0
 8002272:	d1e5      	bne.n	8002240 <HAL_I2C_Mem_Write+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002274:	2321      	movs	r3, #33	; 0x21
 8002276:	9a05      	ldr	r2, [sp, #20]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002278:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800227a:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800227c:	0023      	movs	r3, r4
 800227e:	3342      	adds	r3, #66	; 0x42
 8002280:	9305      	str	r3, [sp, #20]
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	9a05      	ldr	r2, [sp, #20]
 8002286:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8002288:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800228c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800228e:	9b04      	ldr	r3, [sp, #16]
    hi2c->XferISR   = NULL;
 8002290:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002292:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002296:	0020      	movs	r0, r4
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	9a06      	ldr	r2, [sp, #24]
 800229c:	9b07      	ldr	r3, [sp, #28]
 800229e:	9501      	str	r5, [sp, #4]
 80022a0:	f7ff fed0 	bl	8002044 <I2C_RequestMemoryWrite>
 80022a4:	2800      	cmp	r0, #0
 80022a6:	d002      	beq.n	80022ae <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80022a8:	9b02      	ldr	r3, [sp, #8]
 80022aa:	701e      	strb	r6, [r3, #0]
 80022ac:	e7c8      	b.n	8002240 <HAL_I2C_Mem_Write+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022b0:	2bff      	cmp	r3, #255	; 0xff
 80022b2:	d954      	bls.n	800235e <HAL_I2C_Mem_Write+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022b6:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022ba:	045b      	lsls	r3, r3, #17
 80022bc:	9000      	str	r0, [sp, #0]
 80022be:	0039      	movs	r1, r7
 80022c0:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022c2:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022c4:	f7ff fe14 	bl	8001ef0 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022c8:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ca:	002a      	movs	r2, r5
 80022cc:	0020      	movs	r0, r4
 80022ce:	9910      	ldr	r1, [sp, #64]	; 0x40
 80022d0:	f7ff fe66 	bl	8001fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80022d4:	2800      	cmp	r0, #0
 80022d6:	d1b3      	bne.n	8002240 <HAL_I2C_Mem_Write+0x34>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022da:	6822      	ldr	r2, [r4, #0]
 80022dc:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80022de:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022e0:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80022e2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022e6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022ee:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022f2:	b292      	uxth	r2, r2
 80022f4:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d017      	beq.n	800232a <HAL_I2C_Mem_Write+0x11e>
 80022fa:	2a00      	cmp	r2, #0
 80022fc:	d115      	bne.n	800232a <HAL_I2C_Mem_Write+0x11e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022fe:	2180      	movs	r1, #128	; 0x80
 8002300:	0020      	movs	r0, r4
 8002302:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002304:	9500      	str	r5, [sp, #0]
 8002306:	f7ff fe75 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 800230a:	2800      	cmp	r0, #0
 800230c:	d000      	beq.n	8002310 <HAL_I2C_Mem_Write+0x104>
 800230e:	e797      	b.n	8002240 <HAL_I2C_Mem_Write+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002310:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d92b      	bls.n	800236e <HAL_I2C_Mem_Write+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002316:	23ff      	movs	r3, #255	; 0xff
 8002318:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800231a:	2380      	movs	r3, #128	; 0x80
 800231c:	22ff      	movs	r2, #255	; 0xff
 800231e:	9000      	str	r0, [sp, #0]
 8002320:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002322:	0039      	movs	r1, r7
 8002324:	0020      	movs	r0, r4
 8002326:	f7ff fde3 	bl	8001ef0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800232a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1cc      	bne.n	80022ca <HAL_I2C_Mem_Write+0xbe>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	002a      	movs	r2, r5
 8002332:	0020      	movs	r0, r4
 8002334:	9910      	ldr	r1, [sp, #64]	; 0x40
 8002336:	f7ff feeb 	bl	8002110 <I2C_WaitOnSTOPFlagUntilTimeout>
 800233a:	2800      	cmp	r0, #0
 800233c:	d000      	beq.n	8002340 <HAL_I2C_Mem_Write+0x134>
 800233e:	e77f      	b.n	8002240 <HAL_I2C_Mem_Write+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002340:	2120      	movs	r1, #32
 8002342:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002344:	4d0d      	ldr	r5, [pc, #52]	; (800237c <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002346:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	402a      	ands	r2, r5
 800234c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800234e:	0023      	movs	r3, r4
 8002350:	3341      	adds	r3, #65	; 0x41
 8002352:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002354:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 8002356:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002358:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800235a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800235c:	e771      	b.n	8002242 <HAL_I2C_Mem_Write+0x36>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800235e:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8002360:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002362:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8002364:	b292      	uxth	r2, r2
 8002366:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	9000      	str	r0, [sp, #0]
 800236c:	e7a7      	b.n	80022be <HAL_I2C_Mem_Write+0xb2>
          hi2c->XferSize = hi2c->XferCount;
 800236e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002370:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 8002372:	b292      	uxth	r2, r2
 8002374:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	9000      	str	r0, [sp, #0]
 800237a:	e7d2      	b.n	8002322 <HAL_I2C_Mem_Write+0x116>
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <HAL_I2C_Mem_Read>:
{
 8002380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002382:	b08b      	sub	sp, #44	; 0x2c
 8002384:	9309      	str	r3, [sp, #36]	; 0x24
 8002386:	ab10      	add	r3, sp, #64	; 0x40
 8002388:	9208      	str	r2, [sp, #32]
 800238a:	cb04      	ldmia	r3!, {r2}
 800238c:	0004      	movs	r4, r0
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	9205      	str	r2, [sp, #20]
 8002392:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	0003      	movs	r3, r0
 8002396:	3341      	adds	r3, #65	; 0x41
 8002398:	9307      	str	r3, [sp, #28]
 800239a:	781b      	ldrb	r3, [r3, #0]
{
 800239c:	000d      	movs	r5, r1
    return HAL_BUSY;
 800239e:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a0:	2b20      	cmp	r3, #32
 80023a2:	d108      	bne.n	80023b6 <HAL_I2C_Mem_Read+0x36>
    if ((pData == NULL) || (Size == 0U))
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d002      	beq.n	80023ae <HAL_I2C_Mem_Read+0x2e>
 80023a8:	9b06      	ldr	r3, [sp, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_I2C_Mem_Read+0x3a>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80023b4:	2001      	movs	r0, #1
}
 80023b6:	b00b      	add	sp, #44	; 0x2c
 80023b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80023ba:	0023      	movs	r3, r4
 80023bc:	3340      	adds	r3, #64	; 0x40
 80023be:	9304      	str	r3, [sp, #16]
 80023c0:	781b      	ldrb	r3, [r3, #0]
    return HAL_BUSY;
 80023c2:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d0f6      	beq.n	80023b6 <HAL_I2C_Mem_Read+0x36>
 80023c8:	2701      	movs	r7, #1
 80023ca:	9b04      	ldr	r3, [sp, #16]
 80023cc:	701f      	strb	r7, [r3, #0]
    tickstart = HAL_GetTick();
 80023ce:	f7ff fc63 	bl	8001c98 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d2:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80023d4:	9003      	str	r0, [sp, #12]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d6:	9000      	str	r0, [sp, #0]
 80023d8:	2319      	movs	r3, #25
 80023da:	003a      	movs	r2, r7
 80023dc:	0020      	movs	r0, r4
 80023de:	0209      	lsls	r1, r1, #8
 80023e0:	f7ff fe08 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 80023e4:	1e06      	subs	r6, r0, #0
 80023e6:	d1e5      	bne.n	80023b4 <HAL_I2C_Mem_Read+0x34>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023e8:	2322      	movs	r3, #34	; 0x22
 80023ea:	9a07      	ldr	r2, [sp, #28]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023ec:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023ee:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f0:	0023      	movs	r3, r4
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	9307      	str	r3, [sp, #28]
 80023f6:	2340      	movs	r3, #64	; 0x40
 80023f8:	9a07      	ldr	r2, [sp, #28]
 80023fa:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80023fc:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023fe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002400:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002402:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8002404:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002406:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002408:	9b03      	ldr	r3, [sp, #12]
 800240a:	0020      	movs	r0, r4
 800240c:	9301      	str	r3, [sp, #4]
 800240e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002410:	9a08      	ldr	r2, [sp, #32]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002416:	f7ff fe49 	bl	80020ac <I2C_RequestMemoryRead>
 800241a:	2800      	cmp	r0, #0
 800241c:	d002      	beq.n	8002424 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 800241e:	9b04      	ldr	r3, [sp, #16]
 8002420:	701e      	strb	r6, [r3, #0]
      return HAL_ERROR;
 8002422:	e7c7      	b.n	80023b4 <HAL_I2C_Mem_Read+0x34>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002424:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002426:	4b36      	ldr	r3, [pc, #216]	; (8002500 <HAL_I2C_Mem_Read+0x180>)
 8002428:	2aff      	cmp	r2, #255	; 0xff
 800242a:	d959      	bls.n	80024e0 <HAL_I2C_Mem_Read+0x160>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002430:	9300      	str	r3, [sp, #0]
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	045b      	lsls	r3, r3, #17
 8002436:	0029      	movs	r1, r5
 8002438:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800243a:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800243c:	f7ff fd58 	bl	8001ef0 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002440:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002442:	04b6      	lsls	r6, r6, #18
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002444:	9b03      	ldr	r3, [sp, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	2104      	movs	r1, #4
 800244c:	0020      	movs	r0, r4
 800244e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002450:	f7ff fdd0 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 8002454:	2800      	cmp	r0, #0
 8002456:	d1ad      	bne.n	80023b4 <HAL_I2C_Mem_Read+0x34>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002460:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002462:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002464:	3301      	adds	r3, #1
 8002466:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002468:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800246a:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800246c:	3b01      	subs	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002472:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002474:	b292      	uxth	r2, r2
 8002476:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002478:	2b00      	cmp	r3, #0
 800247a:	d017      	beq.n	80024ac <HAL_I2C_Mem_Read+0x12c>
 800247c:	2a00      	cmp	r2, #0
 800247e:	d115      	bne.n	80024ac <HAL_I2C_Mem_Read+0x12c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002480:	9b03      	ldr	r3, [sp, #12]
 8002482:	2180      	movs	r1, #128	; 0x80
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	0020      	movs	r0, r4
 8002488:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800248a:	f7ff fdb3 	bl	8001ff4 <I2C_WaitOnFlagUntilTimeout>
 800248e:	2800      	cmp	r0, #0
 8002490:	d000      	beq.n	8002494 <HAL_I2C_Mem_Read+0x114>
 8002492:	e78f      	b.n	80023b4 <HAL_I2C_Mem_Read+0x34>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002494:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002496:	2bff      	cmp	r3, #255	; 0xff
 8002498:	d92a      	bls.n	80024f0 <HAL_I2C_Mem_Read+0x170>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800249e:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80024a0:	045b      	lsls	r3, r3, #17
 80024a2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a4:	0029      	movs	r1, r5
 80024a6:	0020      	movs	r0, r4
 80024a8:	f7ff fd22 	bl	8001ef0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80024ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d1c8      	bne.n	8002444 <HAL_I2C_Mem_Read+0xc4>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b2:	0020      	movs	r0, r4
 80024b4:	9a03      	ldr	r2, [sp, #12]
 80024b6:	9912      	ldr	r1, [sp, #72]	; 0x48
 80024b8:	f7ff fe2a 	bl	8002110 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024bc:	2800      	cmp	r0, #0
 80024be:	d000      	beq.n	80024c2 <HAL_I2C_Mem_Read+0x142>
 80024c0:	e778      	b.n	80023b4 <HAL_I2C_Mem_Read+0x34>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c2:	2120      	movs	r1, #32
 80024c4:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 80024c6:	4d0f      	ldr	r5, [pc, #60]	; (8002504 <HAL_I2C_Mem_Read+0x184>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	402a      	ands	r2, r5
 80024ce:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	0023      	movs	r3, r4
 80024d2:	3341      	adds	r3, #65	; 0x41
 80024d4:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d6:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 80024d8:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024da:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80024dc:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80024de:	e76a      	b.n	80023b6 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = hi2c->XferCount;
 80024e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80024e2:	b292      	uxth	r2, r2
 80024e4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2380      	movs	r3, #128	; 0x80
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	049b      	lsls	r3, r3, #18
 80024ee:	e7a2      	b.n	8002436 <HAL_I2C_Mem_Read+0xb6>
          hi2c->XferSize = hi2c->XferCount;
 80024f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f2:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80024f4:	b292      	uxth	r2, r2
 80024f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	9000      	str	r0, [sp, #0]
 80024fc:	e7d2      	b.n	80024a4 <HAL_I2C_Mem_Read+0x124>
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	80002400 	.word	0x80002400
 8002504:	fe00e800 	.word	0xfe00e800

08002508 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250a:	0004      	movs	r4, r0
 800250c:	3441      	adds	r4, #65	; 0x41
 800250e:	7822      	ldrb	r2, [r4, #0]
{
 8002510:	0003      	movs	r3, r0
 8002512:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002514:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	b2d6      	uxtb	r6, r2
 8002518:	2a20      	cmp	r2, #32
 800251a:	d118      	bne.n	800254e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 800251c:	001d      	movs	r5, r3
 800251e:	3540      	adds	r5, #64	; 0x40
 8002520:	782a      	ldrb	r2, [r5, #0]
 8002522:	2a01      	cmp	r2, #1
 8002524:	d013      	beq.n	800254e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002526:	2224      	movs	r2, #36	; 0x24
 8002528:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3a23      	subs	r2, #35	; 0x23
 800252e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002530:	4807      	ldr	r0, [pc, #28]	; (8002550 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8002532:	4391      	bics	r1, r2
 8002534:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 800253a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800253c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	4339      	orrs	r1, r7
 8002542:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 800254c:	7028      	strb	r0, [r5, #0]
  }
}
 800254e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002550:	ffffefff 	.word	0xffffefff

08002554 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002554:	0002      	movs	r2, r0
{
 8002556:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002558:	3241      	adds	r2, #65	; 0x41
 800255a:	7814      	ldrb	r4, [r2, #0]
{
 800255c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002560:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002562:	2c20      	cmp	r4, #32
 8002564:	d117      	bne.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002566:	001c      	movs	r4, r3
 8002568:	3440      	adds	r4, #64	; 0x40
 800256a:	7826      	ldrb	r6, [r4, #0]
 800256c:	2e01      	cmp	r6, #1
 800256e:	d012      	beq.n	8002596 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002570:	3022      	adds	r0, #34	; 0x22
 8002572:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	3823      	subs	r0, #35	; 0x23
 8002578:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800257a:	4f07      	ldr	r7, [pc, #28]	; (8002598 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 800257c:	4386      	bics	r6, r0
 800257e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002580:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8002582:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002584:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002586:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002588:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800258a:	6819      	ldr	r1, [r3, #0]
 800258c:	4308      	orrs	r0, r1
 800258e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002590:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002592:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8002594:	7020      	strb	r0, [r4, #0]
  }
}
 8002596:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002598:	fffff0ff 	.word	0xfffff0ff

0800259c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259e:	0004      	movs	r4, r0
 80025a0:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d045      	beq.n	8002632 <HAL_RCC_OscConfig+0x96>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a6:	6803      	ldr	r3, [r0, #0]
 80025a8:	07db      	lsls	r3, r3, #31
 80025aa:	d42f      	bmi.n	800260c <HAL_RCC_OscConfig+0x70>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	079b      	lsls	r3, r3, #30
 80025b0:	d500      	bpl.n	80025b4 <HAL_RCC_OscConfig+0x18>
 80025b2:	e081      	b.n	80026b8 <HAL_RCC_OscConfig+0x11c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b4:	6823      	ldr	r3, [r4, #0]
 80025b6:	071b      	lsls	r3, r3, #28
 80025b8:	d500      	bpl.n	80025bc <HAL_RCC_OscConfig+0x20>
 80025ba:	e0bc      	b.n	8002736 <HAL_RCC_OscConfig+0x19a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025bc:	6823      	ldr	r3, [r4, #0]
 80025be:	075b      	lsls	r3, r3, #29
 80025c0:	d500      	bpl.n	80025c4 <HAL_RCC_OscConfig+0x28>
 80025c2:	e0df      	b.n	8002784 <HAL_RCC_OscConfig+0x1e8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80025c4:	6823      	ldr	r3, [r4, #0]
 80025c6:	06db      	lsls	r3, r3, #27
 80025c8:	d51a      	bpl.n	8002600 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80025ca:	6962      	ldr	r2, [r4, #20]
 80025cc:	2304      	movs	r3, #4
 80025ce:	4db5      	ldr	r5, [pc, #724]	; (80028a4 <HAL_RCC_OscConfig+0x308>)
 80025d0:	2a01      	cmp	r2, #1
 80025d2:	d000      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3a>
 80025d4:	e14a      	b.n	800286c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80025d6:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025d8:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80025da:	430b      	orrs	r3, r1
 80025dc:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80025de:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80025e0:	431a      	orrs	r2, r3
 80025e2:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80025e4:	f7ff fb58 	bl	8001c98 <HAL_GetTick>
 80025e8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80025ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80025ec:	423b      	tst	r3, r7
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x56>
 80025f0:	e135      	b.n	800285e <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80025f2:	21f8      	movs	r1, #248	; 0xf8
 80025f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025f6:	69a3      	ldr	r3, [r4, #24]
 80025f8:	438a      	bics	r2, r1
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4313      	orrs	r3, r2
 80025fe:	636b      	str	r3, [r5, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002600:	6a23      	ldr	r3, [r4, #32]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d000      	beq.n	8002608 <HAL_RCC_OscConfig+0x6c>
 8002606:	e159      	b.n	80028bc <HAL_RCC_OscConfig+0x320>
        }
      }
    }
  }

  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e02a      	b.n	8002662 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800260c:	210c      	movs	r1, #12
 800260e:	4da5      	ldr	r5, [pc, #660]	; (80028a4 <HAL_RCC_OscConfig+0x308>)
 8002610:	686a      	ldr	r2, [r5, #4]
 8002612:	400a      	ands	r2, r1
 8002614:	2a04      	cmp	r2, #4
 8002616:	d006      	beq.n	8002626 <HAL_RCC_OscConfig+0x8a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002618:	686b      	ldr	r3, [r5, #4]
 800261a:	400b      	ands	r3, r1
 800261c:	2b08      	cmp	r3, #8
 800261e:	d10a      	bne.n	8002636 <HAL_RCC_OscConfig+0x9a>
 8002620:	686b      	ldr	r3, [r5, #4]
 8002622:	03db      	lsls	r3, r3, #15
 8002624:	d507      	bpl.n	8002636 <HAL_RCC_OscConfig+0x9a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002626:	682b      	ldr	r3, [r5, #0]
 8002628:	039b      	lsls	r3, r3, #14
 800262a:	d5bf      	bpl.n	80025ac <HAL_RCC_OscConfig+0x10>
 800262c:	6863      	ldr	r3, [r4, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1bc      	bne.n	80025ac <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e015      	b.n	8002662 <HAL_RCC_OscConfig+0xc6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002636:	6863      	ldr	r3, [r4, #4]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d114      	bne.n	8002666 <HAL_RCC_OscConfig+0xca>
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	682a      	ldr	r2, [r5, #0]
 8002640:	025b      	lsls	r3, r3, #9
 8002642:	4313      	orrs	r3, r2
 8002644:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002646:	f7ff fb27 	bl	8001c98 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800264c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	02bf      	lsls	r7, r7, #10
 8002650:	682b      	ldr	r3, [r5, #0]
 8002652:	423b      	tst	r3, r7
 8002654:	d1aa      	bne.n	80025ac <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002656:	f7ff fb1f 	bl	8001c98 <HAL_GetTick>
 800265a:	1b80      	subs	r0, r0, r6
 800265c:	2864      	cmp	r0, #100	; 0x64
 800265e:	d9f7      	bls.n	8002650 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
 8002660:	2003      	movs	r0, #3
}
 8002662:	b005      	add	sp, #20
 8002664:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0xfc>
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	4a8e      	ldr	r2, [pc, #568]	; (80028a8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800266e:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002670:	4013      	ands	r3, r2
 8002672:	602b      	str	r3, [r5, #0]
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	4a8d      	ldr	r2, [pc, #564]	; (80028ac <HAL_RCC_OscConfig+0x310>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002678:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267a:	4013      	ands	r3, r2
 800267c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800267e:	f7ff fb0b 	bl	8001c98 <HAL_GetTick>
 8002682:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	423b      	tst	r3, r7
 8002688:	d100      	bne.n	800268c <HAL_RCC_OscConfig+0xf0>
 800268a:	e78f      	b.n	80025ac <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7ff fb04 	bl	8001c98 <HAL_GetTick>
 8002690:	1b80      	subs	r0, r0, r6
 8002692:	2864      	cmp	r0, #100	; 0x64
 8002694:	d9f6      	bls.n	8002684 <HAL_RCC_OscConfig+0xe8>
 8002696:	e7e3      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002698:	2b05      	cmp	r3, #5
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x10c>
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	682a      	ldr	r2, [r5, #0]
 80026a0:	02db      	lsls	r3, r3, #11
 80026a2:	4313      	orrs	r3, r2
 80026a4:	602b      	str	r3, [r5, #0]
 80026a6:	e7c9      	b.n	800263c <HAL_RCC_OscConfig+0xa0>
 80026a8:	682b      	ldr	r3, [r5, #0]
 80026aa:	4a7f      	ldr	r2, [pc, #508]	; (80028a8 <HAL_RCC_OscConfig+0x30c>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	602b      	str	r3, [r5, #0]
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	4a7e      	ldr	r2, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x310>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	e7c5      	b.n	8002644 <HAL_RCC_OscConfig+0xa8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026b8:	220c      	movs	r2, #12
 80026ba:	4d7a      	ldr	r5, [pc, #488]	; (80028a4 <HAL_RCC_OscConfig+0x308>)
 80026bc:	686b      	ldr	r3, [r5, #4]
 80026be:	4213      	tst	r3, r2
 80026c0:	d006      	beq.n	80026d0 <HAL_RCC_OscConfig+0x134>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026c2:	686b      	ldr	r3, [r5, #4]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d110      	bne.n	80026ec <HAL_RCC_OscConfig+0x150>
 80026ca:	686b      	ldr	r3, [r5, #4]
 80026cc:	03db      	lsls	r3, r3, #15
 80026ce:	d40d      	bmi.n	80026ec <HAL_RCC_OscConfig+0x150>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d0:	682b      	ldr	r3, [r5, #0]
 80026d2:	079b      	lsls	r3, r3, #30
 80026d4:	d502      	bpl.n	80026dc <HAL_RCC_OscConfig+0x140>
 80026d6:	68e3      	ldr	r3, [r4, #12]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d1aa      	bne.n	8002632 <HAL_RCC_OscConfig+0x96>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	21f8      	movs	r1, #248	; 0xf8
 80026de:	682a      	ldr	r2, [r5, #0]
 80026e0:	6923      	ldr	r3, [r4, #16]
 80026e2:	438a      	bics	r2, r1
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4313      	orrs	r3, r2
 80026e8:	602b      	str	r3, [r5, #0]
 80026ea:	e763      	b.n	80025b4 <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ec:	68e2      	ldr	r2, [r4, #12]
 80026ee:	2301      	movs	r3, #1
 80026f0:	2a00      	cmp	r2, #0
 80026f2:	d00f      	beq.n	8002714 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_ENABLE();
 80026f4:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f6:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80026f8:	4313      	orrs	r3, r2
 80026fa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026fc:	f7ff facc 	bl	8001c98 <HAL_GetTick>
 8002700:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002702:	682b      	ldr	r3, [r5, #0]
 8002704:	423b      	tst	r3, r7
 8002706:	d1e9      	bne.n	80026dc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002708:	f7ff fac6 	bl	8001c98 <HAL_GetTick>
 800270c:	1b80      	subs	r0, r0, r6
 800270e:	2802      	cmp	r0, #2
 8002710:	d9f7      	bls.n	8002702 <HAL_RCC_OscConfig+0x166>
 8002712:	e7a5      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_HSI_DISABLE();
 8002714:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 8002718:	439a      	bics	r2, r3
 800271a:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 800271c:	f7ff fabc 	bl	8001c98 <HAL_GetTick>
 8002720:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	423b      	tst	r3, r7
 8002726:	d100      	bne.n	800272a <HAL_RCC_OscConfig+0x18e>
 8002728:	e744      	b.n	80025b4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800272a:	f7ff fab5 	bl	8001c98 <HAL_GetTick>
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	2802      	cmp	r0, #2
 8002732:	d9f6      	bls.n	8002722 <HAL_RCC_OscConfig+0x186>
 8002734:	e794      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002736:	69e2      	ldr	r2, [r4, #28]
 8002738:	2301      	movs	r3, #1
 800273a:	4d5a      	ldr	r5, [pc, #360]	; (80028a4 <HAL_RCC_OscConfig+0x308>)
 800273c:	2a00      	cmp	r2, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_LSI_ENABLE();
 8002740:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8002744:	4313      	orrs	r3, r2
 8002746:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8002748:	f7ff faa6 	bl	8001c98 <HAL_GetTick>
 800274c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002750:	423b      	tst	r3, r7
 8002752:	d000      	beq.n	8002756 <HAL_RCC_OscConfig+0x1ba>
 8002754:	e732      	b.n	80025bc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff fa9f 	bl	8001c98 <HAL_GetTick>
 800275a:	1b80      	subs	r0, r0, r6
 800275c:	2802      	cmp	r0, #2
 800275e:	d9f6      	bls.n	800274e <HAL_RCC_OscConfig+0x1b2>
 8002760:	e77e      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
      __HAL_RCC_LSI_DISABLE();
 8002762:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002764:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 8002766:	439a      	bics	r2, r3
 8002768:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800276a:	f7ff fa95 	bl	8001c98 <HAL_GetTick>
 800276e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002772:	423b      	tst	r3, r7
 8002774:	d100      	bne.n	8002778 <HAL_RCC_OscConfig+0x1dc>
 8002776:	e721      	b.n	80025bc <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7ff fa8e 	bl	8001c98 <HAL_GetTick>
 800277c:	1b80      	subs	r0, r0, r6
 800277e:	2802      	cmp	r0, #2
 8002780:	d9f6      	bls.n	8002770 <HAL_RCC_OscConfig+0x1d4>
 8002782:	e76d      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002784:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002788:	4d46      	ldr	r5, [pc, #280]	; (80028a4 <HAL_RCC_OscConfig+0x308>)
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 800278e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002790:	4213      	tst	r3, r2
 8002792:	d108      	bne.n	80027a6 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	69eb      	ldr	r3, [r5, #28]
 8002796:	4313      	orrs	r3, r2
 8002798:	61eb      	str	r3, [r5, #28]
 800279a:	69eb      	ldr	r3, [r5, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	9303      	str	r3, [sp, #12]
 80027a0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	2780      	movs	r7, #128	; 0x80
 80027a8:	4e41      	ldr	r6, [pc, #260]	; (80028b0 <HAL_RCC_OscConfig+0x314>)
 80027aa:	007f      	lsls	r7, r7, #1
 80027ac:	6833      	ldr	r3, [r6, #0]
 80027ae:	423b      	tst	r3, r7
 80027b0:	d006      	beq.n	80027c0 <HAL_RCC_OscConfig+0x224>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b2:	68a3      	ldr	r3, [r4, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d113      	bne.n	80027e0 <HAL_RCC_OscConfig+0x244>
 80027b8:	6a2a      	ldr	r2, [r5, #32]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	622b      	str	r3, [r5, #32]
 80027be:	e030      	b.n	8002822 <HAL_RCC_OscConfig+0x286>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027c0:	6833      	ldr	r3, [r6, #0]
 80027c2:	433b      	orrs	r3, r7
 80027c4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027c6:	f7ff fa67 	bl	8001c98 <HAL_GetTick>
 80027ca:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	6833      	ldr	r3, [r6, #0]
 80027ce:	423b      	tst	r3, r7
 80027d0:	d1ef      	bne.n	80027b2 <HAL_RCC_OscConfig+0x216>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7ff fa61 	bl	8001c98 <HAL_GetTick>
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	1ac0      	subs	r0, r0, r3
 80027da:	2864      	cmp	r0, #100	; 0x64
 80027dc:	d9f6      	bls.n	80027cc <HAL_RCC_OscConfig+0x230>
 80027de:	e73f      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e0:	2201      	movs	r2, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d114      	bne.n	8002810 <HAL_RCC_OscConfig+0x274>
 80027e6:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	4393      	bics	r3, r2
 80027ec:	622b      	str	r3, [r5, #32]
 80027ee:	6a2b      	ldr	r3, [r5, #32]
 80027f0:	3203      	adds	r2, #3
 80027f2:	4393      	bics	r3, r2
 80027f4:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80027f6:	f7ff fa4f 	bl	8001c98 <HAL_GetTick>
 80027fa:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fc:	6a2b      	ldr	r3, [r5, #32]
 80027fe:	423b      	tst	r3, r7
 8002800:	d016      	beq.n	8002830 <HAL_RCC_OscConfig+0x294>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002802:	f7ff fa49 	bl	8001c98 <HAL_GetTick>
 8002806:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <HAL_RCC_OscConfig+0x318>)
 8002808:	1b80      	subs	r0, r0, r6
 800280a:	4298      	cmp	r0, r3
 800280c:	d9f6      	bls.n	80027fc <HAL_RCC_OscConfig+0x260>
 800280e:	e727      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	2b05      	cmp	r3, #5
 8002812:	d116      	bne.n	8002842 <HAL_RCC_OscConfig+0x2a6>
 8002814:	6a29      	ldr	r1, [r5, #32]
 8002816:	3b01      	subs	r3, #1
 8002818:	430b      	orrs	r3, r1
 800281a:	622b      	str	r3, [r5, #32]
 800281c:	6a2b      	ldr	r3, [r5, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8002822:	f7ff fa39 	bl	8001c98 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8002828:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	6a2b      	ldr	r3, [r5, #32]
 800282c:	423b      	tst	r3, r7
 800282e:	d00f      	beq.n	8002850 <HAL_RCC_OscConfig+0x2b4>
    if(pwrclkchanged == SET)
 8002830:	9b00      	ldr	r3, [sp, #0]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d000      	beq.n	8002838 <HAL_RCC_OscConfig+0x29c>
 8002836:	e6c5      	b.n	80025c4 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002838:	69eb      	ldr	r3, [r5, #28]
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_RCC_OscConfig+0x31c>)
 800283c:	4013      	ands	r3, r2
 800283e:	61eb      	str	r3, [r5, #28]
 8002840:	e6c0      	b.n	80025c4 <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002842:	6a2b      	ldr	r3, [r5, #32]
 8002844:	4393      	bics	r3, r2
 8002846:	2204      	movs	r2, #4
 8002848:	622b      	str	r3, [r5, #32]
 800284a:	6a2b      	ldr	r3, [r5, #32]
 800284c:	4393      	bics	r3, r2
 800284e:	e7b5      	b.n	80027bc <HAL_RCC_OscConfig+0x220>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002850:	f7ff fa22 	bl	8001c98 <HAL_GetTick>
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_RCC_OscConfig+0x318>)
 8002856:	1b80      	subs	r0, r0, r6
 8002858:	4298      	cmp	r0, r3
 800285a:	d9e6      	bls.n	800282a <HAL_RCC_OscConfig+0x28e>
 800285c:	e700      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800285e:	f7ff fa1b 	bl	8001c98 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2802      	cmp	r0, #2
 8002866:	d800      	bhi.n	800286a <HAL_RCC_OscConfig+0x2ce>
 8002868:	e6bf      	b.n	80025ea <HAL_RCC_OscConfig+0x4e>
 800286a:	e6f9      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800286c:	3205      	adds	r2, #5
 800286e:	d103      	bne.n	8002878 <HAL_RCC_OscConfig+0x2dc>
      __HAL_RCC_HSI14ADC_ENABLE();
 8002870:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002872:	439a      	bics	r2, r3
 8002874:	636a      	str	r2, [r5, #52]	; 0x34
 8002876:	e6bc      	b.n	80025f2 <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002878:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800287a:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800287c:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800287e:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8002880:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002882:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002884:	4393      	bics	r3, r2
 8002886:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002888:	f7ff fa06 	bl	8001c98 <HAL_GetTick>
 800288c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800288e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002890:	423b      	tst	r3, r7
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x2fa>
 8002894:	e6b4      	b.n	8002600 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002896:	f7ff f9ff 	bl	8001c98 <HAL_GetTick>
 800289a:	1b80      	subs	r0, r0, r6
 800289c:	2802      	cmp	r0, #2
 800289e:	d9f6      	bls.n	800288e <HAL_RCC_OscConfig+0x2f2>
 80028a0:	e6de      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	40021000 	.word	0x40021000
 80028a8:	fffeffff 	.word	0xfffeffff
 80028ac:	fffbffff 	.word	0xfffbffff
 80028b0:	40007000 	.word	0x40007000
 80028b4:	00001388 	.word	0x00001388
 80028b8:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028bc:	210c      	movs	r1, #12
 80028be:	4d34      	ldr	r5, [pc, #208]	; (8002990 <HAL_RCC_OscConfig+0x3f4>)
 80028c0:	686a      	ldr	r2, [r5, #4]
 80028c2:	400a      	ands	r2, r1
 80028c4:	2a08      	cmp	r2, #8
 80028c6:	d047      	beq.n	8002958 <HAL_RCC_OscConfig+0x3bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028c8:	4a32      	ldr	r2, [pc, #200]	; (8002994 <HAL_RCC_OscConfig+0x3f8>)
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d132      	bne.n	8002934 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_DISABLE();
 80028ce:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80028d2:	4013      	ands	r3, r2
 80028d4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028d6:	f7ff f9df 	bl	8001c98 <HAL_GetTick>
 80028da:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028dc:	04bf      	lsls	r7, r7, #18
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	423b      	tst	r3, r7
 80028e2:	d121      	bne.n	8002928 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028e4:	220f      	movs	r2, #15
 80028e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ea:	4393      	bics	r3, r2
 80028ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028ee:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	4313      	orrs	r3, r2
 80028f2:	62eb      	str	r3, [r5, #44]	; 0x2c
 80028f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80028f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80028f8:	686a      	ldr	r2, [r5, #4]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	4926      	ldr	r1, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x3fc>)
 80028fe:	400a      	ands	r2, r1
 8002900:	4313      	orrs	r3, r2
 8002902:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	682a      	ldr	r2, [r5, #0]
 8002908:	045b      	lsls	r3, r3, #17
 800290a:	4313      	orrs	r3, r2
 800290c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800290e:	f7ff f9c3 	bl	8001c98 <HAL_GetTick>
 8002912:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	682b      	ldr	r3, [r5, #0]
 8002916:	4233      	tst	r3, r6
 8002918:	d000      	beq.n	800291c <HAL_RCC_OscConfig+0x380>
 800291a:	e675      	b.n	8002608 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7ff f9bc 	bl	8001c98 <HAL_GetTick>
 8002920:	1b00      	subs	r0, r0, r4
 8002922:	2802      	cmp	r0, #2
 8002924:	d9f6      	bls.n	8002914 <HAL_RCC_OscConfig+0x378>
 8002926:	e69b      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f9b6 	bl	8001c98 <HAL_GetTick>
 800292c:	1b80      	subs	r0, r0, r6
 800292e:	2802      	cmp	r0, #2
 8002930:	d9d5      	bls.n	80028de <HAL_RCC_OscConfig+0x342>
 8002932:	e695      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
        __HAL_RCC_PLL_DISABLE();
 8002934:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002936:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002938:	4013      	ands	r3, r2
 800293a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800293c:	f7ff f9ac 	bl	8001c98 <HAL_GetTick>
 8002940:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	04b6      	lsls	r6, r6, #18
 8002944:	682b      	ldr	r3, [r5, #0]
 8002946:	4233      	tst	r3, r6
 8002948:	d100      	bne.n	800294c <HAL_RCC_OscConfig+0x3b0>
 800294a:	e65d      	b.n	8002608 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294c:	f7ff f9a4 	bl	8001c98 <HAL_GetTick>
 8002950:	1b00      	subs	r0, r0, r4
 8002952:	2802      	cmp	r0, #2
 8002954:	d9f6      	bls.n	8002944 <HAL_RCC_OscConfig+0x3a8>
 8002956:	e683      	b.n	8002660 <HAL_RCC_OscConfig+0xc4>
        return HAL_ERROR;
 8002958:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800295a:	2b01      	cmp	r3, #1
 800295c:	d100      	bne.n	8002960 <HAL_RCC_OscConfig+0x3c4>
 800295e:	e680      	b.n	8002662 <HAL_RCC_OscConfig+0xc6>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	2180      	movs	r1, #128	; 0x80
        pll_config  = RCC->CFGR;
 8002962:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002966:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8002968:	6aea      	ldr	r2, [r5, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	4019      	ands	r1, r3
 800296c:	4281      	cmp	r1, r0
 800296e:	d000      	beq.n	8002972 <HAL_RCC_OscConfig+0x3d6>
 8002970:	e65f      	b.n	8002632 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002972:	210f      	movs	r1, #15
 8002974:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002978:	428a      	cmp	r2, r1
 800297a:	d000      	beq.n	800297e <HAL_RCC_OscConfig+0x3e2>
 800297c:	e659      	b.n	8002632 <HAL_RCC_OscConfig+0x96>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800297e:	22f0      	movs	r2, #240	; 0xf0
 8002980:	0392      	lsls	r2, r2, #14
 8002982:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002984:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002986:	4293      	cmp	r3, r2
 8002988:	d100      	bne.n	800298c <HAL_RCC_OscConfig+0x3f0>
 800298a:	e63d      	b.n	8002608 <HAL_RCC_OscConfig+0x6c>
 800298c:	e651      	b.n	8002632 <HAL_RCC_OscConfig+0x96>
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	40021000 	.word	0x40021000
 8002994:	feffffff 	.word	0xfeffffff
 8002998:	ffc2ffff 	.word	0xffc2ffff

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b570      	push	{r4, r5, r6, lr}
 800299e:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029a0:	2210      	movs	r2, #16
 80029a2:	4912      	ldr	r1, [pc, #72]	; (80029ec <HAL_RCC_GetSysClockFreq+0x50>)
 80029a4:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029a6:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80029a8:	f000 fb22 	bl	8002ff0 <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80029ac:	2210      	movs	r2, #16
 80029ae:	0028      	movs	r0, r5
 80029b0:	490f      	ldr	r1, [pc, #60]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80029b2:	f000 fb1d 	bl	8002ff0 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029b6:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 80029b8:	4e0e      	ldr	r6, [pc, #56]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80029ba:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	401a      	ands	r2, r3
 80029be:	2a08      	cmp	r2, #8
 80029c0:	d111      	bne.n	80029e6 <HAL_RCC_GetSysClockFreq+0x4a>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80029c2:	200f      	movs	r0, #15
 80029c4:	466a      	mov	r2, sp
 80029c6:	0c99      	lsrs	r1, r3, #18
 80029c8:	4001      	ands	r1, r0
 80029ca:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80029cc:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80029ce:	4002      	ands	r2, r0
 80029d0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80029d2:	03db      	lsls	r3, r3, #15
 80029d4:	d505      	bpl.n	80029e2 <HAL_RCC_GetSysClockFreq+0x46>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80029d6:	4808      	ldr	r0, [pc, #32]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x5c>)
 80029d8:	f7fd fbb4 	bl	8000144 <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029dc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029de:	b008      	add	sp, #32
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029e2:	4806      	ldr	r0, [pc, #24]	; (80029fc <HAL_RCC_GetSysClockFreq+0x60>)
 80029e4:	e7fa      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = HSE_VALUE;
 80029e6:	4804      	ldr	r0, [pc, #16]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80029e8:	e7f9      	b.n	80029de <HAL_RCC_GetSysClockFreq+0x42>
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	08003095 	.word	0x08003095
 80029f0:	080030a6 	.word	0x080030a6
 80029f4:	40021000 	.word	0x40021000
 80029f8:	007a1200 	.word	0x007a1200
 80029fc:	003d0900 	.word	0x003d0900

08002a00 <HAL_RCC_ClockConfig>:
{
 8002a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a02:	0004      	movs	r4, r0
 8002a04:	000e      	movs	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8002a0a:	2001      	movs	r0, #1
}
 8002a0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0e:	2201      	movs	r2, #1
 8002a10:	4d37      	ldr	r5, [pc, #220]	; (8002af0 <HAL_RCC_ClockConfig+0xf0>)
 8002a12:	682b      	ldr	r3, [r5, #0]
 8002a14:	4013      	ands	r3, r2
 8002a16:	428b      	cmp	r3, r1
 8002a18:	d31c      	bcc.n	8002a54 <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1a:	6821      	ldr	r1, [r4, #0]
 8002a1c:	078b      	lsls	r3, r1, #30
 8002a1e:	d422      	bmi.n	8002a66 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a20:	07cb      	lsls	r3, r1, #31
 8002a22:	d42f      	bmi.n	8002a84 <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a24:	2301      	movs	r3, #1
 8002a26:	682a      	ldr	r2, [r5, #0]
 8002a28:	401a      	ands	r2, r3
 8002a2a:	42b2      	cmp	r2, r6
 8002a2c:	d851      	bhi.n	8002ad2 <HAL_RCC_ClockConfig+0xd2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2e:	6823      	ldr	r3, [r4, #0]
 8002a30:	4d30      	ldr	r5, [pc, #192]	; (8002af4 <HAL_RCC_ClockConfig+0xf4>)
 8002a32:	075b      	lsls	r3, r3, #29
 8002a34:	d454      	bmi.n	8002ae0 <HAL_RCC_ClockConfig+0xe0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a36:	f7ff ffb1 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8002a3a:	686b      	ldr	r3, [r5, #4]
 8002a3c:	4a2e      	ldr	r2, [pc, #184]	; (8002af8 <HAL_RCC_ClockConfig+0xf8>)
 8002a3e:	061b      	lsls	r3, r3, #24
 8002a40:	0f1b      	lsrs	r3, r3, #28
 8002a42:	5cd3      	ldrb	r3, [r2, r3]
 8002a44:	40d8      	lsrs	r0, r3
 8002a46:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_ClockConfig+0xfc>)
 8002a48:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a4a:	2003      	movs	r0, #3
 8002a4c:	f7ff f8e4 	bl	8001c18 <HAL_InitTick>
  return HAL_OK;
 8002a50:	2000      	movs	r0, #0
 8002a52:	e7db      	b.n	8002a0c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	4393      	bics	r3, r2
 8002a58:	430b      	orrs	r3, r1
 8002a5a:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5c:	682b      	ldr	r3, [r5, #0]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d1d2      	bne.n	8002a0a <HAL_RCC_ClockConfig+0xa>
 8002a64:	e7d9      	b.n	8002a1a <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a66:	4a23      	ldr	r2, [pc, #140]	; (8002af4 <HAL_RCC_ClockConfig+0xf4>)
 8002a68:	074b      	lsls	r3, r1, #29
 8002a6a:	d504      	bpl.n	8002a76 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002a6c:	23e0      	movs	r3, #224	; 0xe0
 8002a6e:	6850      	ldr	r0, [r2, #4]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4303      	orrs	r3, r0
 8002a74:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a76:	20f0      	movs	r0, #240	; 0xf0
 8002a78:	6853      	ldr	r3, [r2, #4]
 8002a7a:	4383      	bics	r3, r0
 8002a7c:	68a0      	ldr	r0, [r4, #8]
 8002a7e:	4303      	orrs	r3, r0
 8002a80:	6053      	str	r3, [r2, #4]
 8002a82:	e7cd      	b.n	8002a20 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a84:	4f1b      	ldr	r7, [pc, #108]	; (8002af4 <HAL_RCC_ClockConfig+0xf4>)
 8002a86:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a88:	683b      	ldr	r3, [r7, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8a:	2a01      	cmp	r2, #1
 8002a8c:	d119      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	039b      	lsls	r3, r3, #14
 8002a90:	d5bb      	bpl.n	8002a0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	2103      	movs	r1, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	438b      	bics	r3, r1
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	607b      	str	r3, [r7, #4]
    tickstart = HAL_GetTick();
 8002a9c:	f7ff f8fc 	bl	8001c98 <HAL_GetTick>
 8002aa0:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	230c      	movs	r3, #12
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	6863      	ldr	r3, [r4, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d0b9      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab0:	f7ff f8f2 	bl	8001c98 <HAL_GetTick>
 8002ab4:	9b01      	ldr	r3, [sp, #4]
 8002ab6:	1ac0      	subs	r0, r0, r3
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_RCC_ClockConfig+0x100>)
 8002aba:	4298      	cmp	r0, r3
 8002abc:	d9f1      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
 8002ac0:	e7a4      	b.n	8002a0c <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac2:	2a02      	cmp	r2, #2
 8002ac4:	d102      	bne.n	8002acc <HAL_RCC_ClockConfig+0xcc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	019b      	lsls	r3, r3, #6
 8002ac8:	d4e3      	bmi.n	8002a92 <HAL_RCC_ClockConfig+0x92>
 8002aca:	e79e      	b.n	8002a0a <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002acc:	079b      	lsls	r3, r3, #30
 8002ace:	d4e0      	bmi.n	8002a92 <HAL_RCC_ClockConfig+0x92>
 8002ad0:	e79b      	b.n	8002a0a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad2:	682a      	ldr	r2, [r5, #0]
 8002ad4:	439a      	bics	r2, r3
 8002ad6:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad8:	682a      	ldr	r2, [r5, #0]
 8002ada:	421a      	tst	r2, r3
 8002adc:	d0a7      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x2e>
 8002ade:	e794      	b.n	8002a0a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae0:	686b      	ldr	r3, [r5, #4]
 8002ae2:	4a08      	ldr	r2, [pc, #32]	; (8002b04 <HAL_RCC_ClockConfig+0x104>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	68e2      	ldr	r2, [r4, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	606b      	str	r3, [r5, #4]
 8002aec:	e7a3      	b.n	8002a36 <HAL_RCC_ClockConfig+0x36>
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40022000 	.word	0x40022000
 8002af4:	40021000 	.word	0x40021000
 8002af8:	0800307d 	.word	0x0800307d
 8002afc:	20000000 	.word	0x20000000
 8002b00:	00001388 	.word	0x00001388
 8002b04:	fffff8ff 	.word	0xfffff8ff

08002b08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002b0a:	4a05      	ldr	r2, [pc, #20]	; (8002b20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	055b      	lsls	r3, r3, #21
 8002b10:	0f5b      	lsrs	r3, r3, #29
 8002b12:	5cd3      	ldrb	r3, [r2, r3]
 8002b14:	4a03      	ldr	r2, [pc, #12]	; (8002b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b16:	6810      	ldr	r0, [r2, #0]
 8002b18:	40d8      	lsrs	r0, r3
}    
 8002b1a:	4770      	bx	lr
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	0800308d 	.word	0x0800308d
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b2a:	6803      	ldr	r3, [r0, #0]
{
 8002b2c:	0005      	movs	r5, r0
 8002b2e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b30:	03db      	lsls	r3, r3, #15
 8002b32:	d52a      	bpl.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b34:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002b36:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b38:	4c38      	ldr	r4, [pc, #224]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002b3a:	0552      	lsls	r2, r2, #21
 8002b3c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b40:	4213      	tst	r3, r2
 8002b42:	d108      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b44:	69e3      	ldr	r3, [r4, #28]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61e3      	str	r3, [r4, #28]
 8002b4a:	69e3      	ldr	r3, [r4, #28]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	9303      	str	r3, [sp, #12]
 8002b50:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002b52:	2301      	movs	r3, #1
 8002b54:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b56:	2780      	movs	r7, #128	; 0x80
 8002b58:	4e31      	ldr	r6, [pc, #196]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8002b5a:	007f      	lsls	r7, r7, #1
 8002b5c:	6833      	ldr	r3, [r6, #0]
 8002b5e:	423b      	tst	r3, r7
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b62:	6a22      	ldr	r2, [r4, #32]
 8002b64:	23c0      	movs	r3, #192	; 0xc0
 8002b66:	0011      	movs	r1, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4e2e      	ldr	r6, [pc, #184]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8002b6c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b6e:	421a      	tst	r2, r3
 8002b70:	d132      	bne.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b72:	6a23      	ldr	r3, [r4, #32]
 8002b74:	401e      	ands	r6, r3
 8002b76:	686b      	ldr	r3, [r5, #4]
 8002b78:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b7a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b7c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d103      	bne.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b82:	69e3      	ldr	r3, [r4, #28]
 8002b84:	4a28      	ldr	r2, [pc, #160]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x100>)
 8002b86:	4013      	ands	r3, r2
 8002b88:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b8a:	682a      	ldr	r2, [r5, #0]
 8002b8c:	07d3      	lsls	r3, r2, #31
 8002b8e:	d506      	bpl.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b90:	2003      	movs	r0, #3
 8002b92:	4922      	ldr	r1, [pc, #136]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002b94:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8002b96:	4383      	bics	r3, r0
 8002b98:	68a8      	ldr	r0, [r5, #8]
 8002b9a:	4303      	orrs	r3, r0
 8002b9c:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ba0:	0693      	lsls	r3, r2, #26
 8002ba2:	d517      	bpl.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba4:	2110      	movs	r1, #16
 8002ba6:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8002ba8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002baa:	438b      	bics	r3, r1
 8002bac:	68e9      	ldr	r1, [r5, #12]
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	e00f      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0xac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb4:	6833      	ldr	r3, [r6, #0]
 8002bb6:	433b      	orrs	r3, r7
 8002bb8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002bba:	f7ff f86d 	bl	8001c98 <HAL_GetTick>
 8002bbe:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc0:	6833      	ldr	r3, [r6, #0]
 8002bc2:	423b      	tst	r3, r7
 8002bc4:	d1cd      	bne.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bc6:	f7ff f867 	bl	8001c98 <HAL_GetTick>
 8002bca:	9b01      	ldr	r3, [sp, #4]
 8002bcc:	1ac0      	subs	r0, r0, r3
 8002bce:	2864      	cmp	r0, #100	; 0x64
 8002bd0:	d9f6      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
          return HAL_TIMEOUT;
 8002bd2:	2003      	movs	r0, #3
}
 8002bd4:	b005      	add	sp, #20
 8002bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd8:	686a      	ldr	r2, [r5, #4]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d0c8      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be0:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be2:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be4:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be6:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8002be8:	025b      	lsls	r3, r3, #9
 8002bea:	4303      	orrs	r3, r0
 8002bec:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bee:	6a23      	ldr	r3, [r4, #32]
 8002bf0:	480e      	ldr	r0, [pc, #56]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x104>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bf2:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bf4:	4003      	ands	r3, r0
 8002bf6:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8002bf8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002bfa:	07d3      	lsls	r3, r2, #31
 8002bfc:	d5b9      	bpl.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8002bfe:	f7ff f84b 	bl	8001c98 <HAL_GetTick>
 8002c02:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c04:	2202      	movs	r2, #2
 8002c06:	6a23      	ldr	r3, [r4, #32]
 8002c08:	4213      	tst	r3, r2
 8002c0a:	d1b2      	bne.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0c:	f7ff f844 	bl	8001c98 <HAL_GetTick>
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8002c12:	1bc0      	subs	r0, r0, r7
 8002c14:	4298      	cmp	r0, r3
 8002c16:	d9f5      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8002c18:	e7db      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8002c1a:	46c0      	nop			; (mov r8, r8)
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40007000 	.word	0x40007000
 8002c24:	fffffcff 	.word	0xfffffcff
 8002c28:	efffffff 	.word	0xefffffff
 8002c2c:	fffeffff 	.word	0xfffeffff
 8002c30:	00001388 	.word	0x00001388

08002c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c34:	b570      	push	{r4, r5, r6, lr}
 8002c36:	0004      	movs	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c38:	6925      	ldr	r5, [r4, #16]
 8002c3a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c3c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c3e:	432a      	orrs	r2, r5
 8002c40:	6965      	ldr	r5, [r4, #20]
 8002c42:	69c3      	ldr	r3, [r0, #28]
 8002c44:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c46:	6808      	ldr	r0, [r1, #0]
 8002c48:	4d39      	ldr	r5, [pc, #228]	; (8002d30 <UART_SetConfig+0xfc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c4a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	4028      	ands	r0, r5
 8002c4e:	4302      	orrs	r2, r0
 8002c50:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c52:	684a      	ldr	r2, [r1, #4]
 8002c54:	4837      	ldr	r0, [pc, #220]	; (8002d34 <UART_SetConfig+0x100>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002c56:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c58:	4002      	ands	r2, r0
 8002c5a:	68e0      	ldr	r0, [r4, #12]
 8002c5c:	4302      	orrs	r2, r0
 8002c5e:	604a      	str	r2, [r1, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8002c60:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c62:	6888      	ldr	r0, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002c64:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c66:	4d34      	ldr	r5, [pc, #208]	; (8002d38 <UART_SetConfig+0x104>)
 8002c68:	4028      	ands	r0, r5
 8002c6a:	4302      	orrs	r2, r0
 8002c6c:	608a      	str	r2, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c6e:	2103      	movs	r1, #3
 8002c70:	4a32      	ldr	r2, [pc, #200]	; (8002d3c <UART_SetConfig+0x108>)
 8002c72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c74:	400a      	ands	r2, r1
 8002c76:	2180      	movs	r1, #128	; 0x80
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	0209      	lsls	r1, r1, #8
 8002c7c:	2a02      	cmp	r2, #2
 8002c7e:	d84c      	bhi.n	8002d1a <UART_SetConfig+0xe6>
 8002c80:	482f      	ldr	r0, [pc, #188]	; (8002d40 <UART_SetConfig+0x10c>)
 8002c82:	5c80      	ldrb	r0, [r0, r2]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c84:	428b      	cmp	r3, r1
 8002c86:	d124      	bne.n	8002cd2 <UART_SetConfig+0x9e>
  {
    switch (clocksource)
 8002c88:	2808      	cmp	r0, #8
 8002c8a:	d817      	bhi.n	8002cbc <UART_SetConfig+0x88>
 8002c8c:	f7fd fa46 	bl	800011c <__gnu_thumb1_case_uqi>
 8002c90:	16081647 	.word	0x16081647
 8002c94:	16161605 	.word	0x16161605
 8002c98:	09          	.byte	0x09
 8002c99:	00          	.byte	0x00
        break;
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c9a:	f7ff fe7f 	bl	800299c <HAL_RCC_GetSysClockFreq>
 8002c9e:	e040      	b.n	8002d22 <UART_SetConfig+0xee>
    switch (clocksource)
 8002ca0:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <UART_SetConfig+0x110>)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ca2:	0058      	lsls	r0, r3, #1
 8002ca4:	6863      	ldr	r3, [r4, #4]
 8002ca6:	6861      	ldr	r1, [r4, #4]
 8002ca8:	085b      	lsrs	r3, r3, #1
 8002caa:	18c0      	adds	r0, r0, r3
 8002cac:	f7fd fa4a 	bl	8000144 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cb0:	4925      	ldr	r1, [pc, #148]	; (8002d48 <UART_SetConfig+0x114>)
 8002cb2:	b282      	uxth	r2, r0
 8002cb4:	3a10      	subs	r2, #16
 8002cb6:	0403      	lsls	r3, r0, #16
 8002cb8:	428a      	cmp	r2, r1
 8002cba:	d901      	bls.n	8002cc0 <UART_SetConfig+0x8c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	e033      	b.n	8002d28 <UART_SetConfig+0xf4>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc0:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cc2:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cc4:	4390      	bics	r0, r2
 8002cc6:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8002cc8:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002cca:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8002ccc:	4318      	orrs	r0, r3
 8002cce:	60d0      	str	r0, [r2, #12]
 8002cd0:	e029      	b.n	8002d26 <UART_SetConfig+0xf2>
    switch (clocksource)
 8002cd2:	2808      	cmp	r0, #8
 8002cd4:	d8f2      	bhi.n	8002cbc <UART_SetConfig+0x88>
 8002cd6:	f7fd fa17 	bl	8000108 <__gnu_thumb1_case_sqi>
 8002cda:	f116      	.short	0xf116
 8002cdc:	f11bf11e 	.word	0xf11bf11e
 8002ce0:	f1f1      	.short	0xf1f1
 8002ce2:	05          	.byte	0x05
 8002ce3:	00          	.byte	0x00
 8002ce4:	2080      	movs	r0, #128	; 0x80
 8002ce6:	0200      	lsls	r0, r0, #8
    }

    if (pclk != 0U)
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	6861      	ldr	r1, [r4, #4]
 8002cec:	085b      	lsrs	r3, r3, #1
 8002cee:	1818      	adds	r0, r3, r0
 8002cf0:	f7fd fa28 	bl	8000144 <__udivsi3>
 8002cf4:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	4b13      	ldr	r3, [pc, #76]	; (8002d48 <UART_SetConfig+0x114>)
 8002cfa:	3a10      	subs	r2, #16
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8dd      	bhi.n	8002cbc <UART_SetConfig+0x88>
      {
        huart->Instance->BRR = usartdiv;
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	60d8      	str	r0, [r3, #12]
 8002d04:	e00f      	b.n	8002d26 <UART_SetConfig+0xf2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d06:	f7ff feff 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002d0a:	2800      	cmp	r0, #0
 8002d0c:	d00b      	beq.n	8002d26 <UART_SetConfig+0xf2>
 8002d0e:	e7eb      	b.n	8002ce8 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d10:	f7ff fe44 	bl	800299c <HAL_RCC_GetSysClockFreq>
        break;
 8002d14:	e7f9      	b.n	8002d0a <UART_SetConfig+0xd6>
        pclk = (uint32_t) HSI_VALUE;
 8002d16:	480b      	ldr	r0, [pc, #44]	; (8002d44 <UART_SetConfig+0x110>)
 8002d18:	e7e6      	b.n	8002ce8 <UART_SetConfig+0xb4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d1a:	428b      	cmp	r3, r1
 8002d1c:	d1f3      	bne.n	8002d06 <UART_SetConfig+0xd2>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d1e:	f7ff fef3 	bl	8002b08 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8002d22:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8002d24:	d1bd      	bne.n	8002ca2 <UART_SetConfig+0x6e>
 8002d26:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8002d2c:	66a3      	str	r3, [r4, #104]	; 0x68

  return ret;
}
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	ffff69f3 	.word	0xffff69f3
 8002d34:	ffffcfff 	.word	0xffffcfff
 8002d38:	fffff4ff 	.word	0xfffff4ff
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	080030b7 	.word	0x080030b7
 8002d44:	007a1200 	.word	0x007a1200
 8002d48:	0000ffef 	.word	0x0000ffef

08002d4c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8002d4e:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d50:	07da      	lsls	r2, r3, #31
 8002d52:	d506      	bpl.n	8002d62 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d54:	6801      	ldr	r1, [r0, #0]
 8002d56:	4c28      	ldr	r4, [pc, #160]	; (8002df8 <UART_AdvFeatureConfig+0xac>)
 8002d58:	684a      	ldr	r2, [r1, #4]
 8002d5a:	4022      	ands	r2, r4
 8002d5c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002d5e:	4322      	orrs	r2, r4
 8002d60:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d62:	079a      	lsls	r2, r3, #30
 8002d64:	d506      	bpl.n	8002d74 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d66:	6801      	ldr	r1, [r0, #0]
 8002d68:	4c24      	ldr	r4, [pc, #144]	; (8002dfc <UART_AdvFeatureConfig+0xb0>)
 8002d6a:	684a      	ldr	r2, [r1, #4]
 8002d6c:	4022      	ands	r2, r4
 8002d6e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d70:	4322      	orrs	r2, r4
 8002d72:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d74:	075a      	lsls	r2, r3, #29
 8002d76:	d506      	bpl.n	8002d86 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d78:	6801      	ldr	r1, [r0, #0]
 8002d7a:	4c21      	ldr	r4, [pc, #132]	; (8002e00 <UART_AdvFeatureConfig+0xb4>)
 8002d7c:	684a      	ldr	r2, [r1, #4]
 8002d7e:	4022      	ands	r2, r4
 8002d80:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d82:	4322      	orrs	r2, r4
 8002d84:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d86:	071a      	lsls	r2, r3, #28
 8002d88:	d506      	bpl.n	8002d98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d8a:	6801      	ldr	r1, [r0, #0]
 8002d8c:	4c1d      	ldr	r4, [pc, #116]	; (8002e04 <UART_AdvFeatureConfig+0xb8>)
 8002d8e:	684a      	ldr	r2, [r1, #4]
 8002d90:	4022      	ands	r2, r4
 8002d92:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d94:	4322      	orrs	r2, r4
 8002d96:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d98:	06da      	lsls	r2, r3, #27
 8002d9a:	d506      	bpl.n	8002daa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d9c:	6801      	ldr	r1, [r0, #0]
 8002d9e:	4c1a      	ldr	r4, [pc, #104]	; (8002e08 <UART_AdvFeatureConfig+0xbc>)
 8002da0:	688a      	ldr	r2, [r1, #8]
 8002da2:	4022      	ands	r2, r4
 8002da4:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002da6:	4322      	orrs	r2, r4
 8002da8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002daa:	069a      	lsls	r2, r3, #26
 8002dac:	d506      	bpl.n	8002dbc <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dae:	6801      	ldr	r1, [r0, #0]
 8002db0:	4c16      	ldr	r4, [pc, #88]	; (8002e0c <UART_AdvFeatureConfig+0xc0>)
 8002db2:	688a      	ldr	r2, [r1, #8]
 8002db4:	4022      	ands	r2, r4
 8002db6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002db8:	4322      	orrs	r2, r4
 8002dba:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002dbc:	065a      	lsls	r2, r3, #25
 8002dbe:	d510      	bpl.n	8002de2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dc0:	6801      	ldr	r1, [r0, #0]
 8002dc2:	4d13      	ldr	r5, [pc, #76]	; (8002e10 <UART_AdvFeatureConfig+0xc4>)
 8002dc4:	684a      	ldr	r2, [r1, #4]
 8002dc6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002dc8:	402a      	ands	r2, r5
 8002dca:	4322      	orrs	r2, r4
 8002dcc:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002dce:	2280      	movs	r2, #128	; 0x80
 8002dd0:	0352      	lsls	r2, r2, #13
 8002dd2:	4294      	cmp	r4, r2
 8002dd4:	d105      	bne.n	8002de2 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002dd6:	684a      	ldr	r2, [r1, #4]
 8002dd8:	4c0e      	ldr	r4, [pc, #56]	; (8002e14 <UART_AdvFeatureConfig+0xc8>)
 8002dda:	4022      	ands	r2, r4
 8002ddc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002dde:	4322      	orrs	r2, r4
 8002de0:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	d506      	bpl.n	8002df4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002de6:	6802      	ldr	r2, [r0, #0]
 8002de8:	490b      	ldr	r1, [pc, #44]	; (8002e18 <UART_AdvFeatureConfig+0xcc>)
 8002dea:	6853      	ldr	r3, [r2, #4]
 8002dec:	400b      	ands	r3, r1
 8002dee:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002df0:	430b      	orrs	r3, r1
 8002df2:	6053      	str	r3, [r2, #4]
  }
}
 8002df4:	bd30      	pop	{r4, r5, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	fffdffff 	.word	0xfffdffff
 8002dfc:	fffeffff 	.word	0xfffeffff
 8002e00:	fffbffff 	.word	0xfffbffff
 8002e04:	ffff7fff 	.word	0xffff7fff
 8002e08:	ffffefff 	.word	0xffffefff
 8002e0c:	ffffdfff 	.word	0xffffdfff
 8002e10:	ffefffff 	.word	0xffefffff
 8002e14:	ff9fffff 	.word	0xff9fffff
 8002e18:	fff7ffff 	.word	0xfff7ffff

08002e1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e1e:	2780      	movs	r7, #128	; 0x80
{
 8002e20:	0004      	movs	r4, r0
 8002e22:	000d      	movs	r5, r1
 8002e24:	0016      	movs	r6, r2
 8002e26:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e28:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e2a:	6822      	ldr	r2, [r4, #0]
 8002e2c:	69d3      	ldr	r3, [r2, #28]
 8002e2e:	402b      	ands	r3, r5
 8002e30:	1b5b      	subs	r3, r3, r5
 8002e32:	4259      	negs	r1, r3
 8002e34:	414b      	adcs	r3, r1
 8002e36:	42b3      	cmp	r3, r6
 8002e38:	d001      	beq.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x22>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	e028      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002e3e:	9b08      	ldr	r3, [sp, #32]
 8002e40:	3301      	adds	r3, #1
 8002e42:	d0f3      	beq.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e44:	f7fe ff28 	bl	8001c98 <HAL_GetTick>
 8002e48:	9b01      	ldr	r3, [sp, #4]
 8002e4a:	1ac0      	subs	r0, r0, r3
 8002e4c:	9b08      	ldr	r3, [sp, #32]
 8002e4e:	4298      	cmp	r0, r3
 8002e50:	d801      	bhi.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x3a>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d11d      	bne.n	8002e92 <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e56:	f3ef 8010 	mrs	r0, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e60:	6821      	ldr	r1, [r4, #0]
 8002e62:	4d1e      	ldr	r5, [pc, #120]	; (8002edc <UART_WaitOnFlagUntilTimeout+0xc0>)
 8002e64:	680b      	ldr	r3, [r1, #0]
 8002e66:	402b      	ands	r3, r5
 8002e68:	600b      	str	r3, [r1, #0]
 8002e6a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	6821      	ldr	r1, [r4, #0]
 8002e78:	688b      	ldr	r3, [r1, #8]
 8002e7a:	4393      	bics	r3, r2
 8002e7c:	608b      	str	r3, [r1, #8]
 8002e7e:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002e82:	2320      	movs	r3, #32
 8002e84:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8002e88:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8002e8a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8002e8c:	3474      	adds	r4, #116	; 0x74
 8002e8e:	7023      	strb	r3, [r4, #0]
}
 8002e90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e92:	2104      	movs	r1, #4
 8002e94:	6823      	ldr	r3, [r4, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	420a      	tst	r2, r1
 8002e9a:	d0c6      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e9c:	69da      	ldr	r2, [r3, #28]
 8002e9e:	423a      	tst	r2, r7
 8002ea0:	d0c3      	beq.n	8002e2a <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ea2:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eae:	6821      	ldr	r1, [r4, #0]
 8002eb0:	4d0a      	ldr	r5, [pc, #40]	; (8002edc <UART_WaitOnFlagUntilTimeout+0xc0>)
 8002eb2:	680b      	ldr	r3, [r1, #0]
 8002eb4:	402b      	ands	r3, r5
 8002eb6:	600b      	str	r3, [r1, #0]
 8002eb8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ebc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec0:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec4:	6821      	ldr	r1, [r4, #0]
 8002ec6:	688b      	ldr	r3, [r1, #8]
 8002ec8:	4393      	bics	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
 8002ecc:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002ed0:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ed2:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8002ed4:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ed6:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ed8:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002eda:	e7d5      	b.n	8002e88 <UART_WaitOnFlagUntilTimeout+0x6c>
 8002edc:	fffffe5f 	.word	0xfffffe5f

08002ee0 <UART_CheckIdleState>:
{
 8002ee0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	2600      	movs	r6, #0
{
 8002ee4:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee6:	1d03      	adds	r3, r0, #4
 8002ee8:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002eea:	f7fe fed5 	bl	8001c98 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eee:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002ef0:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	071b      	lsls	r3, r3, #28
 8002ef6:	d416      	bmi.n	8002f26 <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ef8:	6823      	ldr	r3, [r4, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	075b      	lsls	r3, r3, #29
 8002efe:	d50a      	bpl.n	8002f16 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <UART_CheckIdleState+0x60>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	0020      	movs	r0, r4
 8002f0a:	002b      	movs	r3, r5
 8002f0c:	03c9      	lsls	r1, r1, #15
 8002f0e:	f7ff ff85 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002f12:	2800      	cmp	r0, #0
 8002f14:	d112      	bne.n	8002f3c <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8002f16:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f18:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002f1a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1e:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8002f20:	3474      	adds	r4, #116	; 0x74
 8002f22:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8002f24:	e00b      	b.n	8002f3e <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f26:	2180      	movs	r1, #128	; 0x80
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <UART_CheckIdleState+0x60>)
 8002f2a:	0032      	movs	r2, r6
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	0389      	lsls	r1, r1, #14
 8002f30:	0003      	movs	r3, r0
 8002f32:	0020      	movs	r0, r4
 8002f34:	f7ff ff72 	bl	8002e1c <UART_WaitOnFlagUntilTimeout>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d0dd      	beq.n	8002ef8 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8002f3c:	2003      	movs	r0, #3
}
 8002f3e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002f40:	01ffffff 	.word	0x01ffffff

08002f44 <HAL_UART_Init>:
{
 8002f44:	b510      	push	{r4, lr}
 8002f46:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002f48:	d101      	bne.n	8002f4e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8002f4a:	2001      	movs	r0, #1
}
 8002f4c:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f4e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d104      	bne.n	8002f5e <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8002f54:	0002      	movs	r2, r0
 8002f56:	3274      	adds	r2, #116	; 0x74
 8002f58:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002f5a:	f7fe fe01 	bl	8001b60 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002f5e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002f60:	2101      	movs	r1, #1
 8002f62:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f64:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8002f66:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f68:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002f6a:	438b      	bics	r3, r1
 8002f6c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f6e:	f7ff fe61 	bl	8002c34 <UART_SetConfig>
 8002f72:	2801      	cmp	r0, #1
 8002f74:	d0e9      	beq.n	8002f4a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8002f7c:	0020      	movs	r0, r4
 8002f7e:	f7ff fee5 	bl	8002d4c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	4907      	ldr	r1, [pc, #28]	; (8002fa4 <HAL_UART_Init+0x60>)
 8002f86:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8002f88:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f8a:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f8c:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002f8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	438a      	bics	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f96:	2201      	movs	r2, #1
 8002f98:	6819      	ldr	r1, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002f9e:	f7ff ff9f 	bl	8002ee0 <UART_CheckIdleState>
 8002fa2:	e7d3      	b.n	8002f4c <HAL_UART_Init+0x8>
 8002fa4:	fffff7ff 	.word	0xfffff7ff

08002fa8 <__libc_init_array>:
 8002fa8:	b570      	push	{r4, r5, r6, lr}
 8002faa:	2600      	movs	r6, #0
 8002fac:	4d0c      	ldr	r5, [pc, #48]	; (8002fe0 <__libc_init_array+0x38>)
 8002fae:	4c0d      	ldr	r4, [pc, #52]	; (8002fe4 <__libc_init_array+0x3c>)
 8002fb0:	1b64      	subs	r4, r4, r5
 8002fb2:	10a4      	asrs	r4, r4, #2
 8002fb4:	42a6      	cmp	r6, r4
 8002fb6:	d109      	bne.n	8002fcc <__libc_init_array+0x24>
 8002fb8:	2600      	movs	r6, #0
 8002fba:	f000 f82b 	bl	8003014 <_init>
 8002fbe:	4d0a      	ldr	r5, [pc, #40]	; (8002fe8 <__libc_init_array+0x40>)
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <__libc_init_array+0x44>)
 8002fc2:	1b64      	subs	r4, r4, r5
 8002fc4:	10a4      	asrs	r4, r4, #2
 8002fc6:	42a6      	cmp	r6, r4
 8002fc8:	d105      	bne.n	8002fd6 <__libc_init_array+0x2e>
 8002fca:	bd70      	pop	{r4, r5, r6, pc}
 8002fcc:	00b3      	lsls	r3, r6, #2
 8002fce:	58eb      	ldr	r3, [r5, r3]
 8002fd0:	4798      	blx	r3
 8002fd2:	3601      	adds	r6, #1
 8002fd4:	e7ee      	b.n	8002fb4 <__libc_init_array+0xc>
 8002fd6:	00b3      	lsls	r3, r6, #2
 8002fd8:	58eb      	ldr	r3, [r5, r3]
 8002fda:	4798      	blx	r3
 8002fdc:	3601      	adds	r6, #1
 8002fde:	e7f2      	b.n	8002fc6 <__libc_init_array+0x1e>
 8002fe0:	080030bc 	.word	0x080030bc
 8002fe4:	080030bc 	.word	0x080030bc
 8002fe8:	080030bc 	.word	0x080030bc
 8002fec:	080030c0 	.word	0x080030c0

08002ff0 <memcpy>:
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	b510      	push	{r4, lr}
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d100      	bne.n	8002ffa <memcpy+0xa>
 8002ff8:	bd10      	pop	{r4, pc}
 8002ffa:	5ccc      	ldrb	r4, [r1, r3]
 8002ffc:	54c4      	strb	r4, [r0, r3]
 8002ffe:	3301      	adds	r3, #1
 8003000:	e7f8      	b.n	8002ff4 <memcpy+0x4>

08003002 <memset>:
 8003002:	0003      	movs	r3, r0
 8003004:	1882      	adds	r2, r0, r2
 8003006:	4293      	cmp	r3, r2
 8003008:	d100      	bne.n	800300c <memset+0xa>
 800300a:	4770      	bx	lr
 800300c:	7019      	strb	r1, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	e7f9      	b.n	8003006 <memset+0x4>
	...

08003014 <_init>:
 8003014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301a:	bc08      	pop	{r3}
 800301c:	469e      	mov	lr, r3
 800301e:	4770      	bx	lr

08003020 <_fini>:
 8003020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003026:	bc08      	pop	{r3}
 8003028:	469e      	mov	lr, r3
 800302a:	4770      	bx	lr
